// HIER DIE CANVAS BREITE ANPASSEN
var CANVAS_WIDTH = 1300;
var CANVAS_HEIGHT = 1000;

var MIN_LINE_LENGTH = 500; 

var values = [];

var min_values = []; 
var max_values = [];

function preload() {
	// read data from long string "data" (end of this file)
	// into array "values"
	var rows = rawData.split(";");  

	// column[0] = wavelength, column[1]=silzium, column[2]=wavelength1,column[3]=silzium1;
	for (var i = 0; i < rows.length; i++) {
		var columns = rows[i].split(",");
		var prepared_columns = [];
		var output_columns = [];
		// default min values by the first Row !!!! MUST BE COMPLETELY FILLED WITH RIGHT DATA (numbers...)
		if (i === 0) { 
			for (var x = 0; x < columns.length; x++) {
				min_values[x] = max_values[x] = parseFloat(columns[x]);
			}
		}
		// correct missing data fill with min
		if (columns.length != min_values.length) {
			for (var x = 0; x < min_values.length; x++) {
				columns.push = min_values[x];
			}
		}
		// set prepared_columns -> only integers -> non integers replaced by min_value
		for (var x = 0; x < columns.length; x++) {
			var field = columns[x]*1000;
			if (field = parseFloat(field)) {
			} else {
				field = min_values[x];
			}
			prepared_columns[x] = field;
		}
		// set min_values and max_values
		for (var x = 0; x < columns.length; x++) {
			if (prepared_columns[x] < min_values[x]) { min_values[x] = prepared_columns[x]; }
			if (prepared_columns[x] > max_values[x]) { max_values[x] = prepared_columns[x]; }
		}

		for (var x = 0; x < prepared_columns.length; x++) {
			output_columns[x] = map(prepared_columns[x], min_values[x], max_values[x], MIN_LINE_LENGTH, CANVAS_WIDTH);
			if (x == 1) console.log(output_columns[x]);
		}
		values.push(output_columns);
	}
	// DEBUGGING Output min and max Values 
	/*
	var debug_string = "";
    for (var i = 0; i < min_values.length; i++) {
		debug_string += 'min_values['+i+']='+min_values[i]+', max_values['+i+']='+max_values[i]+' & ';
	}
	alert(debug_string); 
	*/
}

var mainCircle;
var vertSlider;
var lineCount = 70;
var vertMin, vertMax, horMin, horMax;

function setup() {
  createCanvas(CANVAS_WIDTH,CANVAS_HEIGHT);
  var red = color(255, 255, 255);

// circle slider 

  mainCircle = new Bubble (900 , height/3 , 40);
  vertSlider = new Circle(width / 10, height / 2, 30, red);



  var red = color(0, 0, 0);


  vertMin = height / 5;
  vertMax = height / 5 * 4;
  vertSlider.setMaximums(width / 10, vertMin, width / 10, vertMax);

  var green = color(0,0, 0);
  
// create a new Circle object and save it as horSlider
  horSlider = new Circle(width / 2, height / 10, 30, green);

  horMin = width / 5;
  horMax = width / 5 * 4;
  horSlider.setMaximums(horMin, height / 10, horMax, height / 10);
}

function draw() {
  background(0);
  // Punkt anzeigen


  mainCircle.display();

  //Linie für horizontale und vertikale Linie
  stroke(0);
  line(width / 10, vertMax, width / 10, vertMin);
  vertSlider.display();

  stroke(0);
  line(horMin, height / 10, horMax, height / 10);
  horSlider.display();



  // Linie anzeigen
  // Farbe hängt von horizontalem Slider ab
  // die Menge der Linien von vertikalem Slider
  var lineColor = color( map(horSlider.xPos, horMin, horMax, 255, 155) );
  var lineCount = floor( map(vertSlider.yPos, height / 5, height / 5 * 4, 1, 20) );
  stroke(lineColor);
  for (var i = 1; i < lineCount; i++) {
    var lineYPos = height / 2 - 100 + (i * 5);

    //Linie Lichtquelle
     line(mainCircle.xPos,mainCircle.yPos, 700, 300 / (lineCount - 1) * i+400);
    //Linie Wellenlaenge
     line(700 ,300 / (lineCount - 1) * i+400, 300, 300 / (lineCount - 1) * i+400);
     //Linie Silizium
     line(300 ,300 / (lineCount - 1) * i+400, 200, 300 / (lineCount - 1) * i+300);

  }



}

function Circle (xPos, yPos, radius, color) {
  // a new circle is created with properties selected by the user
  this.xPos = xPos;
  this.yPos = yPos;
  this.radius = radius;
  this.color = color;

  // by default the circle can be moved anywhere
  // default min and max values are set to the size of the canvas
  this.minX = 0;
  this.maxX = width;
  this.minY = 0;
  this.maxY = height;

  // dragging is set to false initially, as the circle is not being dragged yet
  this.dragging = true;

  // the display functions displays the circle and first checks if it's being dragged
  // if so, the move function is called to update the circle's xPos and yPos
  this.display = function() {
    noStroke();
    fill(this.color);

    if(this.dragging === true) {
      this.move(mouseX, mouseY);
    }

    ellipse(this.xPos, this.yPos, 15);


    }

  // the move function moves the circles to the target position
  // as long as it is within the min and max values
  // the constrain function makes sure that only values between min and max are picked
  this.move = function(targetX, targetY) {
    this.xPos = constrain(targetX, this.minX, this.maxX);
    this.yPos = constrain(targetY, this.minY, this.maxY);
  }

  // if the clicked function is called, the distance between mouse and the circle's midpoint is calculated
  // if it is smaller than the circle's radius that means the user has clicked on the circle
  // dragging will be set to true in this case
  this.clicked = function() {
    var d = dist(mouseX, mouseY, this.xPos, this.yPos);
    if(d < this.radius) {
      this.dragging = true;

    }
  }

  // if the release function is called, dragging will be set to false again, as the user is not dragging anymore
  this.released = function() {
    this.dragging = false
  }

  // maximums can be used to restrain movement (for sliders etc.)
  this.setMaximums = function(minX, minY, maxX, maxY) {
    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
  }
}


function Bubble (xPos, yPos, radius) {
  background(0);
  // a new circle is created with properties selected by the user
  this.xPos = xPos;
  this.yPos = yPos;
  this.radius = radius;

  // dragging is set to false initially, as the circle is not being dragged yet
  this.dragging = false;

  // the display functions displays the circle and first checks if it's being dragged
  // if so, the move function is called to update the circle's xPos and yPos
  this.display = function() {
    background(0);
    noStroke();

    if(this.dragging ===true) {
      this.move(mouseX, mouseY);
    }

    ellipse(this.xPos, this.yPos, radius);
  }

  this.move = function(targetX, targetY) {
    this.xPos = targetX;
    this.yPos = targetY;
  }

  // if the clicked function is called, the distance between mouse and the circle's midpoint is calculated
  // if it is smaller than the circle's radius that means the user has clicked on the circle
  // dragging will be set to true in this case
  this.clicked = function() {
    var d = dist(mouseX, mouseY, this.xPos, this.yPos);
    if(d < this.radius) {
      this.dragging = true;
    }
  }

  // if the release function is called, dragging will be set to false again, as the user is not dragging anymore
  this.released = function() {
    this.dragging = false;
  }
}

// if the mouse is pressed the clicked function is called on the circle
function mousePressed() {
  vertSlider.clicked();
  horSlider.clicked();
  mainCircle.clicked();
}

// if the mouse is released the released function is called on the circle
function mouseReleased() {
  vertSlider.released();
  horSlider.released
  mainCircle.released();
}
var rawData = "1.3,0.52598362,2.500074252,-0.0625; 1299,0.52586586,2.499923596,-0.111111111; 1298,0.525835991,2.499772952,-0.176470588; 1297,0.525855484,2.499622326,-0.230769231; 1296,0.525885696,2.499471718,-0.222222222; 1295,0.525817108,2.499321128,0; 1294,0.525766296,2.499170557,2; 1293,0.525744209,2.499020009,-0.5; 1292,0.525803375,2.498869474,-0.153846154; 1291,0.525780869,2.498718957,0; 1.29,0.525700073,2.498568458,0.166666667; 1289,0.525682335,2.498417977,0.8; 1288,0.525727577,2.498267514,4; 1287,0.525730362,2.498117075,4; 1286,0.525598335,2.497966649,1.25; 1285,0.525594788,2.49781624,0.666666667; 1284,0.525646324,2.49766585,0.5; 1283,0.525650749,2.497515478,0.368421053; 1282,0.525525703,2.497365124,0.291666667; 1281,0.525504952,2.497214794,0.260869565; 1.28,0.525567169,2.497064476,0.333333333; 1279,0.525504837,2.496914176,0.416666667; 1278,0.525411415,2.496763894,0.4; 1277,0.52546196,2.496613631,0.142857143; 1276,0.525499535,2.496463385,0.045454545; 1275,0.525451202,2.496313164,0.04; 1274,0.525354805,2.496162954,0.043478261; 1273,0.525432167,2.496012763,0.105263158; 1272,0.525398178,2.49586259,0.176470588; 1271,0.525296021,2.495712435,0.2; 1.27,0.525320702,2.495562298,0.173913043; 1269,0.525387878,2.495412185,0.136363636; 1268,0.525278435,2.495262084,0.111111111; 1267,0.525237312,2.495112001,0.076923077; 1266,0.525313606,2.494961936,0; 1265,0.525258827,2.494811889,0; 1264,0.525144463,2.49466186,0.111111111; 1263,0.525175438,2.494511856,0.173913043; 1262,0.525211029,2.494361863,0.208333333; 1261,0.525106316,2.494211888,0.2; 1.26,0.525077744,2.494061932,0.230769231; 1259,0.525145607,2.493911993,0.25; 1258,0.525095711,2.493762072,0.285714286; 1257,0.525004501,2.493612176,0.333333333; 1256,0.525051308,2.493462291,0.5; 1255,0.525002594,2.493312425,3; 1254,0.5249366,2.493162576,-0.111111111; 1253,0.524964867,2.493012746,0; 1252,0.52499115,2.492862933,0; 1251,0.5248983,2.492713145,-0.083333333; 1.25,0.524925766,2.492563369,-0.428571429; 1249,0.524885521,2.49241361,-0.5; 1248,0.524817467,2.49226387,-0.307692308; 1247,0.524834213,2.492114147,-0.157894737; 1246,0.524829674,2.491964443,-0.1; 1245,0.524747658,2.491814762,-0.142857143; 1244,0.524743576,2.491665094,-0.5; 1243,0.524727402,2.491515443,0.142857143; 1242,0.524665833,2.491365811,0.076923077; 1241,0.524685135,2.491216196,0.133333333; 1.24,0.52466095,2.491066599,0.230769231; 1239,0.524603729,2.490917027,0.272727273; 1238,0.524638672,2.490767466,0.444444444; 1237,0.524561005,2.490617923,0.571428571; 1236,0.524550858,2.490468398,0.833333333; 1235,0.52452343,2.490318892,1; 1234,0.524484711,2.490169403,0.8; 1233,0.524474335,2.490019938,0.6; 1232,0.524447937,2.489870485,0.285714286; 1231,0.524399948,2.48972105,0.090909091; 1.23,0.524388428,2.489571633,0; 1229,0.524369659,2.489422233,0; 1228,0.524333649,2.489272852,-0.04; 1227,0.524298973,2.489123495,0; 1226,0.524300385,2.488974149,0.041666667; 1225,0.524244232,2.488824822,0.08; 1224,0.524218483,2.488675512,125; 1223,0.524218445,2.488526221,0.166666667; 1222,0.52416153,2.488376947,0.285714286; 1221,0.524114189,2.488227697,-0.2; 1.22,0.524054833,2.488078459,-0.2; 1219,0.524082832,2.487929239,-0.333333333; 1218,0.524060669,2.487780037,-0.5; 1217,0.524006767,2.487630853,-0.428571429; 1216,0.523949699,2.487481686,-0.181818182; 1215,0.523923035,2.487332544,-0.153846154; 1214,0.523925705,2.487183413,-0.444444444 1213,0.523883629,2.487034301,-7; 1212,0.523848648,2.486885206,2.25; 1211,0.523836784,2.486736129,3.666666667; 1.21,0.523778992,2.48658707,11; 1209,0.523753357,2.486438035,5; 1208,0.523696289,2.486289011,1.428571429; 1207,0.52369606,2.486140006,0.9; 1206,0.523680611,2.485991018,1; 1205,0.523631973,2.485842048,3.5; 1204,0.523606834,2.485693096,-2; 1203,0.523529587,2.485544168,-1; 1202,0.523514633,2.485395252,2; 1201,0.523459358,2.485246354,0.166666667; 1.2,0.523430595,2.485097473,0.285714286; 1199,0.52337574,2.48494861,0.5; 1198,0.523345184,2.484799765,4; 1197,0.523309708,2.484650938,-1.333333333; 1196,0.523285637,2.484502135,-0.5; 1195,0.523226128,2.484353344,-0.4; 1194,0.523214035,2.48420457,0.04; 1193,0.523162537,2.484055815,0.333333333; 1192,0.523119812,2.483907077,0.2; 1191,0.523062286,2.483758356,0; 1.19,0.523035507,2.48360966,-0.1; 1189,0.522952957,2.483460976,-0.090909091; 1188,0.522937431,2.483312309,0; 1187,0.522871361,2.48316366,0; 1186,0.522821426,2.483015029,-0.142857143; 1185,0.522760048,2.482866415,0.04; 1184,0.522678185,2.482717826,0.2; 1183,0.522625084,2.482569248,-0.166666667; 1182,0.522547531,2.482420688,-5; 1181,0.522462425,2.482272146,875; 1.18,0.522381668,2.482123622,0.533333333; 1179,0.522211418,2.481975115,0.35; 1178,0.522019196,2.481826632,0.210526316; 1177,0.521855049,2.481678161,0.133333333; 1176,0.521557312,2.481529708,125; 1175,0.521264076,2.481381272,0.2; 1174,0.520940361,2.481232854,0.25; 1173,0.520584564,2.481084454,0.2; 1172,0.520252686,2.480936078,0.173913043; 1171,0.519909439,2.480787713,0.16; 1.17,0.519611435,2.480639366,0.181818182; 1169,0.519300652,2.480491037,0.3125; 1168,0.518981743,2.480342726,0.454545455; 1167,0.518673134,2.480194432,0.555555556; 1166,0.518316574,2.480046162,0.714285714; 1165,0.517991676,2.479897904,1.25; 1164,0.517638931,2.479749664,6; 1163,0.51729847,2.479601441,-6; 1162,0.516919365,2.479453236,6; 1161,0.516568527,2.479305049,1.2; 1.16,0.516153336,2.479156885,0.75; 1159,0.515722389,2.479008733,0.714285714; 1158,0.515309677,2.478860599,2; 1157,0.514869614,2.478712483,-1.5; 1156,0.514409409,2.478564384,-0.666666667; 1155,0.513932419,2.478416303,-0.666666667; 1154,0.513499908,2.478268245,-2; 1153,0.513012886,2.4781202,2; 1152,0.512454529,2.477972172,0.714285714; 1151,0.512006645,2.477824161,0.428571429; 1.15,0.511464729,2.477676169,0.272727273; 1149,0.510903359,2.477528194,0.172413793; 1148,0.510375099,2.477380243,125; 1147,0.509821816,2.477232303,0.129032258; 1146,0.509251175,2.477084381,0.148148148; 1145,0.508672295,2.476936477,0.238095238; 1144,0.508067131,2.47678859,0.333333333; 1143,0.507471199,2.476640721,0.333333333; 1142,0.506882973,2.476492876,0.333333333; 1141,0.506252213,2.476345042,0.4; 1.14,0.505584488,2.476197226,0.444444444; 1139,0.504955101,2.476049428,0.666666667; 1138,0.504273644,2.475901647,0; 1137,0.503615799,2.475753884,0.083333333; 1136,0.502882195,2.475606144,125; 1135,0.502216988,2.475458417,0.2; 1134,0.501432838,2.475310706,0.555555556; 1133,0.500601234,2.475163014,2.666666667; 1132,0.4998386,2.475015339,3; 1131,0.499029312,2.474867682,0.888888889; 1.13,0.498218956,2.474720048,0.333333333; 1129,0.49742157,2.474572426,0.208333333; 1128,0.496517334,2.474424821,0.217391304; 1127,0.495690651,2.474277234,0.294117647; 1126,0.494794235,2.474129665,0.555555556; 1125,0.493899765,2.473982114,1.25; 1124,0.492988777,2.473834586,2.5; 1123,0.492110596,2.473687069,1.25; 1122,0.491130142,2.47353957,0.666666667; 1121,0.490145111,2.473392089,0.4375; 1.12,0.489160881,2.473244625,0.272727273; 1119,0.488147469,2.473097179,0.230769231; 1118,0.487169724,2.472949757,0.192307692; 1117,0.486095886,2.472802346,0.208333333; 1116,0.485018349,2.472654952,0.238095238; 1115,0.483907089,2.472507576,0.263157895; 1114,0.482788696,2.472360218,0.315789474; 1113,0.481614189,2.472212877,0.380952381; 1112,0.480445862,2.47206556,0.296296296; 1111,0.479285965,2.471918255,0.228571429; 1.11,0.478083649,2.471770967,0.195121951; 1109,0.476800957,2.471623696,0.179487179; 1108,0.475560684,2.471476443,0.206896552; 1107,0.474332047,2.471329208,375; 1106,0.473027992,2.471181996,1; 1105,0.471635513,2.471034796,-6; 1104,0.470408058,2.470887613,-2; 1103,0.468989563,2.470740448,-2; 1102,0.467544746,2.4705933,-3; 1101,0.466137848,2.47044617,0.04; 1.1,0.464707985,2.470299063,2; 1099,0.46320488,2.470151968,0.6; 1098,0.461658516,2.47000489,0.272727273; 1097,0.460067139,2.46985783,0.2; 1096,0.458358307,2.469710788,0.111111111; 1095,0.456662827,2.469563763,0.115384615; 1094,0.454973106,2.469416755,0.133333333; 1093,0.453218765,2.469269771,-1; 1092,0.451460037,2.469122798,-0.235294118; 1091,0.449652367,2.468975843,-0.25; 1.09,0.447801781,2.468828906,-0.384615385; 1089,0.445872421,2.468681986,-0.8; 1088,0.444020615,2.468535083,0.04; 1087,0.442091751,2.468388204,2; 1086,0.440066948,2.468241336,0.833333333; 1085,0.438116798,2.468094486,0.333333333; 1084,0.435982895,2.467947653,0.208333333; 1083,0.43377018,2.467800838,0.142857143; 1082,0.431681099,2.46765404,0.16; 1081,0.429482307,2.467507266,0.235294118; 1.08,0.427229347,2.467360503,0.454545455; 1079,0.424929581,2.467213758,625; 1078,0.422627258,2.46706703,0.857142857; 1077,0.420098915,2.466920319,1.2; 1076,0.417648621,2.466773626,0.04; 1075,0.415200844,2.466626957,-0.833333333; 1074,0.412658501,2.466480298,-0.333333333; 1073,0.410044746,2.466333658,-0.6; 1072,0.40742569,2.466187034,0.8; 1071,0.404673119,2.466040429,0.3125; 1.07,0.401866036,2.46589384,0.238095238; 1069,0.399101067,2.465747275,0.3125; 1068,0.396287689,2.465600722,1; 1067,0.393354149,2.465454185,-1; 1066,0.390454369,2.465307667,-875; 1065,0.387271004,2.465161165,-2.666666667; 1064,0.383865013,2.465014681,1.75; 1063,0.380375099,2.464868221,0.666666667; 1062,0.376468391,2.464721772,0.5; 1061,0.372194023,2.46457534,0.5; 1.06,0.367482185,2.464428926,0.6; 1059,0.362583313,2.464282529,0.428571429; 1058,0.357329292,2.464136149,0.363636364; 1057,0.352064591,2.463989793,0.266666667; 1056,0.34710434,2.463843448,0.263157895; 1055,0.34202034,2.463697121,0.260869565; 1054,0.337039337,2.463550811,0.222222222; 1053,0.332180443,2.463404519,0.25; 1052,0.327095108,2.463258243,0.230769231; 1051,0.32196209,2.463111991,0.272727273; 1.05,0.316989479,2.462965751,0.315789474; 1049,0.311927357,2.462819528,0.260869565; 1048,0.306510601,2.462673322,0.181818182; 1047,0.301498585,2.462527134,0.159090909; 1046,0.296067715,2.462380963,0.142857143; 1045,0.290634842,2.462234815,0.173913043; 1044,0.285327873,2.462088679,0.243243243; 1043,0.279980602,2.461942559,0.4;"
