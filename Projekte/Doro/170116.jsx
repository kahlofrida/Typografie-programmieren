// @includepath "~/Documents/;%USERPROFILE%Documents";// @include "basiljs/basil.js";function draw() {b.clear(b.doc());  //b.units(b.MM);    //JSON  var jsonString = b.loadString("2_29.json");  var jsonData = b.JSON.decode(jsonString);  //LEVEL  var totalLevel = 0;   for(var i = 0; i < jsonData.length; i++){         // summarize total level    totalLevel += jsonData[i].level;   }  var levelAverage = totalLevel / jsonData.length;  // find average level  var highestLevel = 0;                             // find highest level  for(var i = 0; i < jsonData.length; i++) {    var proofedLevelHigh = jsonData[i].level;    if(proofedLevelHigh > highestLevel) {      highestLevel = proofedLevelHigh;    }  }  var lowestLevel = 1;                          // find lowest level  for(var i = 0; i < jsonData.length; i++) {    var proofedLevelLow = jsonData[i].level;    if (proofedLevelLow < lowestLevel){      lowestLevel = proofedLevelLow;    }  }  // CENTROID  var totalCentroid = 0;   for(var i = 0; i < jsonData.length; i++){         // summarize total centroid    totalCentroid += jsonData[i].centroid;   }  var centroidAverage = totalCentroid / jsonData.length;  // find average centroid  var highestCentroid = 0;                             // find highest centroid  for(var i = 0; i < jsonData.length; i++) {    var proofedCentroidHigh = jsonData[i].centroid;    if(proofedCentroidHigh > highestCentroid) {      highestCentroid = proofedCentroidHigh;    }  }  var lowestCentroid = 1;                          // find lowest centroid  for(var i = 0; i < jsonData.length; i++) {    var proofedCentroidLow = jsonData[i].centroid;    if (proofedCentroidLow < lowestCentroid){      lowestCentroid = proofedCentroidLow;    }  }  // LEVELVOICE  var totalLevelVoice = 0;   for(var i = 0; i < jsonData.length; i++){       // summarize total levelVoice      totalLevelVoice += jsonData[i].levelVoice;     }  var levelVoiceAverage = totalLevelVoice / jsonData.length;  // find average levelVoice  var highestLevelVoice = 0;                             // find highest levelVoice  for(var i = 0; i < jsonData.length; i++) {    var proofedLevelVoiceHigh = jsonData[i].levelVoice;    if(proofedLevelVoiceHigh > highestLevelVoice) {      highestLevelVoice = proofedLevelVoiceHigh;    }  }  var lowestLevelVoice = 255;                             // find lowest levelVoice  for(var i = 0; i < jsonData.length; i++) {    var proofedLevelVoiceLow = jsonData[i].levelVoice;    if (proofedLevelVoiceLow < lowestLevelVoice){      lowestLevelVoice = proofedLevelVoiceLow;    }  }  // SOPRANO  var totalSoprano = 0;   for(var i = 0; i < jsonData.length; i++){       // summarize total soprano    totalSoprano += jsonData[i].soprano;   }  var sopranoAverage = totalSoprano / jsonData.length;  // find average soprano  var highestSoprano = 0;                             // find highest soprano  for(var i = 0; i < jsonData.length; i++) {    var proofedSopranoHigh = jsonData[i].soprano;    if(proofedSopranoHigh > highestSoprano) {      highestSoprano = proofedSopranoHigh;    }  }  var lowestSoprano = 255;                             // find lowest soprano  for(var i = 0; i < jsonData.length; i++) {    var proofedSopranoLow = jsonData[i].soprano;    if (proofedSopranoLow < lowestSoprano){      lowestSoprano = proofedSopranoLow;    }  }  // MEZZOSOPRANO  var totalMezzosoprano = 0;   for(var i = 0; i < jsonData.length; i++){       // summarize total mezzosoprano    totalMezzosoprano += jsonData[i].mezzosoprano;   }  var mezzosopranoAverage = totalMezzosoprano / jsonData.length;  // find average mezzosoprano // CONTRALTO  var totalContralto = 0;   for(var i = 0; i < jsonData.length; i++){       // summarize total contralto    totalContralto += jsonData[i].contralto;   }  var contraltoAverage = totalContralto / jsonData.length;  // find average contralto // ALTUS  var totalAltus = 0;   for(var i = 0; i < jsonData.length; i++){       // summarize total altus    totalAltus += jsonData[i].altus;   }  var altusAverage = totalAltus / jsonData.length;  // find average altus // TENOR  var totalTenor = 0;   for(var i = 0; i < jsonData.length; i++){       // summarize total tenor    totalTenor += jsonData[i].tenor;   }  var tenorAverage = totalTenor / jsonData.length;  // find average tenor // BARITONE  var totalBaritone = 0;   for(var i = 0; i < jsonData.length; i++){       // summarize total baritone    totalBaritone += jsonData[i].baritone;   }  var baritoneAverage = totalBaritone / jsonData.length;  // find average baritone  // BASS  var totalBass = 0;   for(var i = 0; i < jsonData.length; i++){       // summarize total bass    totalBass += jsonData[i].bass;   }  var bassAverage = totalBass / jsonData.length;  // find average bass  var highestBass = 0;                             // find highest bass  for(var i = 0; i < jsonData.length; i++) {    var proofedBassHigh = jsonData[i].bass;    if(proofedBassHigh > highestBass) {      highestBass = proofedBassHigh;    }  }  var lowestBass = 255;                             // find lowest bass  for(var i = 0; i < jsonData.length; i++) {    var proofedBassLow = jsonData[i].bass;    if (proofedBassLow < lowestBass){      lowestBass = proofedBassLow;    }  }  // FEMALELEVEL  var totalFemaleLevel = 0;   for(var i = 0; i < jsonData.length; i++){       // summarize total femaleLevel    totalFemaleLevel += jsonData[i].femaleLevel;   }  var femaleLevelAverage = totalFemaleLevel / jsonData.length;  // find average femaleLevel  var highestFemaleLevel = 0;                             // find highest femaleLevel  for(var i = 0; i < jsonData.length; i++) {    var proofedFemaleLevelHigh = jsonData[i].femaleLevel;    if(proofedFemaleLevelHigh > highestFemaleLevel) {      highestFemaleLevel = proofedFemaleLevelHigh;    }  }  var lowestFemaleLevel = 255;                             // find lowest femaleLevel  for(var i = 0; i < jsonData.length; i++) {    var proofedFemaleLevelLow = jsonData[i].femaleLevel;    if (proofedFemaleLevelLow < lowestFemaleLevel){      lowestFemaleLevel = proofedFemaleLevelLow;    }  }  // MALELEVEL  var totalMaleLevel = 0;   for(var i = 0; i < jsonData.length; i++){       // summarize total maleLevel    totalMaleLevel += jsonData[i].maleLevel;   }  var maleLevelAverage = totalMaleLevel / jsonData.length;  // find average maleLevel  var highestMaleLevel = 0;                             // find highest maleLevel  for(var i = 0; i < jsonData.length; i++) {    var proofedMaleLevelHigh = jsonData[i].maleLevel;    if(proofedMaleLevelHigh > highestMaleLevel) {      highestMaleLevel = proofedMaleLevelHigh;    }  }  var lowestMaleLevel = 255;                             // find lowest maleLevel  for(var i = 0; i < jsonData.length; i++) {    var proofedMaleLevelLow = jsonData[i].maleLevel;    if (proofedMaleLevelLow < lowestMaleLevel){      lowestMaleLevel = proofedMaleLevelLow;    }  }  b.println("levelAverage: " + levelAverage + "; ");  b.println("levelVoiceAverage: " + levelVoiceAverage + "; ");  b.println("highestLevelVoice: " + highestLevelVoice + "; ");  b.println("lowestLevelVoice: " + lowestLevelVoice + "; ");  b.println("femaleLevel: " + femaleLevelAverage + "; ");  b.println("highestFemaleLevel: " + highestFemaleLevel + "; ");  b.println("lowestFemaleLevel: " + lowestFemaleLevel + "; ");  b.println("maleLevel: " + maleLevelAverage + "; ");  b.println("highestMaleLevel: " + highestMaleLevel + "; ");  b.println("lowestMaleLevel: " + lowestMaleLevel + "; ");  b.println("soprano: " + sopranoAverage + "; ");  b.println("highestSoprano: " + highestSoprano + "; ");  b.println("lowestSoprano: " + lowestSoprano + "; ");  b.println("mezzosoprano: " + mezzosopranoAverage + "; ");  b.println("contralto: " + contraltoAverage + "; ");  b.println("altus: " + altusAverage + "; ");  b.println("tenor: " + tenorAverage + "; ");  b.println("baritone: " + baritoneAverage + "; ");  b.println("bass: " + bassAverage + "; ");  b.println("highestBass: " + highestBass + "; ");  b.println("lowestBass: " + lowestBass + "; ");      b.println("centroidAverage: " + centroidAverage + "; ");    b.println("lowestCentroid: " + lowestCentroid + "; ");  b.println("highestCentroid: " + highestCentroid + "; ");  // TEXT   var pointSize = 9;  var textLeading = 15;  b.textSize(pointSize);  b.textLeading(textLeading);  b.textFont("Adobe Devanagari", "Regular");  var myText = b.loadString("2_29.txt")  var xText = 15;  var yText = 40;   var wText = 200;  var hText = 300;   var tf = b.text(myText, xText, yText, wText, hText);  var myCharacters = b.characters(tf);  // LINE  b.strokeWeight(0.3);  var green = b.color(28, 197, 118);  b.stroke(green);  var myLines = b.lines(tf);  var firstChar = myCharacters[0];  var charBounds = b.bounds(firstChar);  var yLineStart = charBounds.baseline;  for(i = 0; i < myLines.length+1; i++){    var yLine = yLineStart + (i * textLeading);    b.line(xText, yLine, xText + wText, yLine);  }   for (var i = 0; i < myCharacters.length; i++){    // map level to character-grey      var greyMinValue = 80;    var greyMaxValue = 0;    var greyValue = b.map(jsonData[i].level, lowestLevel, highestLevel, greyMinValue, greyMaxValue);    var greyValueRounded = b.round(greyValue);    var grey = b.color(greyValueRounded);    b.typo(myCharacters[i], 'fillColor', grey);    //  map baselineshift and pointsize to levelVoice    var input = jsonData[i].levelVoice;    var inMin = 0;    var inMax = 255;    var outMin = -6;    var outMax = 6;    var baselineShiftValue = b.map(input, inMin, inMax, outMin, outMax);    b.typo(myCharacters[i], 'baselineShift', baselineShiftValue);    var sizeMin = 6;    var sizeMax = 9;    var pointSizeValue = b.map(input, inMin, inMax, sizeMin, sizeMax);    b.typo(myCharacters[i], 'pointSize', pointSizeValue);    // map horizontalScale to bass    var inputHori = jsonData[i].bass;    var inHoriMin = lowestBass;    var inHoriMax = highestBass;    var outHoriMin = 80;    var outHoriMax = 120;    var horizontalScaleValue = b.map(inputHori, inHoriMin, inHoriMax, outHoriMin, outHoriMax);    b.typo(myCharacters[i], 'horizontalScale', horizontalScaleValue);    // map verticalScale to soprano    var inputVerti = jsonData[i].soprano;    var inVertiMin = lowestSoprano;    var inVertiMax = highestSoprano;    var outVertiMin = 80;    var outVertiMax = 120;    var verticalScaleValue = b.map(inputVerti, inVertiMin, inVertiMax, outVertiMin, outVertiMax);    b.typo(myCharacters[i], 'verticalScale', verticalScaleValue);    // difference male-female    if (femaleLevelAverage > maleLevelAverage){      var inputFemaleLev = jsonData[i].femaleLevel;      var inSkewMin = lowestFemaleLevel      var inSkewMax = highestFemaleLevel      var outSkewMin = 0;       var outSkewMax = 15;      var skewValue = b.map(inputFemaleLev, inSkewMin, inSkewMax, outSkewMin, outSkewMax);      b.typo(myCharacters[i], 'skew', skewValue);    } else {      var inputMaleLev = jsonData[i].maleLevel;      var inSkewMaleMin = lowestMaleLevel      var inSkewMaleMax = highestMaleLevel      var outSkewMaleMin = -15;       var outSkewMaleMax = 0;      var skewValueMale = b.map(inputMaleLev, inSkewMaleMin, inSkewMaleMax, outSkewMaleMin, outSkewMaleMax);      b.typo(myCharacters[i], 'skew', skewValueMale);    }  }   }b.go();// morgen: disired letter spacing map vertical scale + horizontal scale, pointsize auch noch mitnehmen//facing pages mit linked textframes// if male > female: mulitplicator für horizontale scalierung