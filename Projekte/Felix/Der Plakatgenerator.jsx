// @includepath "~/Documents/;%USERPROFILE%Documents";// @include "basiljs/basil.js";function draw() {b.clear (b.doc ());// Die beiden Variabeln für zu langen Namen oder keinen Namen und ESC Taste gedrücktvar tooLong = "Jhonny Too Longy";var noName  = "Secret Susi";// Die große Var Schleife beginntfor (var theBigVar = 0; theBigVar < 10; theBigVar++) {b.clear (b.doc ());// Löscht alle unbenutzten Farbfeldervar myIndesignDoc = app.activeDocument;var myUnusedSwatches = myIndesignDoc.unusedSwatches;for (var s = myUnusedSwatches.length-1; s >= 0; s--) {     var mySwatch = myIndesignDoc.unusedSwatches[s];     var name = mySwatch.name; // alert (name);  if (name != ""){ mySwatch.remove(); }}// Rückgängig machen des rechtsbündigen Textes für die nachfolgenden Schleifenb.textAlign(Justification.LEFT_ALIGN );//========================================================================================================================================================= Fenster / Start / Startvar windowStart = new Window ("dialog", " ", undefined, {closeButton: false});windowStart.alignChildren = ['fill', 'fill'];windowStart.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/StartBild.jpg"));var buttonStart = windowStart.add ("button", [0,0,280,80], "Start", {name:"ok"});windowStart.show ( );// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Wie heißt du / Namenvar windowYourName = new Window ("dialog", "", undefined, {closeButton: false} );// Dinge in dem Fenster sind volle BreitewindowYourName.alignChildren = ['fill', 'fill'];// Platzhaltervar staticTextNameName = windowYourName.add ('statictext  {text: "Centre", characters: 20, justify: "center"} ', [0,0,300,80], "");staticTextNameName.text = "Wie ist dein Name?";// Das Texteingabefeldvar edittextYourName = windowYourName.add ("edittext", undefined);edittextYourName.characters = 20;// Setzt das Textfeld auf Eingabe wenn es erscheint.edittextYourName.active = true;var buttonWeiterName = windowYourName.add ("button", [0,0,280,60], "Weiter", {name:"ok"});buttonWeiterName.enabled = false;// Die Funktion die Veränderungen im Textfeld misstedittextYourName.onChanging = function () {// Misst ob die Länge des Textes im Textfeld ungleich 0 ist (Wenn nichts eingegeben ist wird gesperrt)var controlNameLength =  edittextYourName.text.length != 0;// Färbt das Textfeld Rot falls nichts eingegeben (controlNameLength) ist.this.graphics.backgroundColor = this.graphics.newBrush (this.graphics.BrushType.SOLID_COLOR, controlNameLength ? [1, 1, 1, 1] : [1, 0.5, 0.5, 1]);// Wenn controlNameLength ungleich 0 ist wird der Weiter Button enabledbuttonWeiterName.enabled = controlNameLength;var controlNameLengthLenght =  edittextYourName.text.length < 30 && edittextYourName.text.length != 0;// Färbt das Textfeld Rot falls der Text zu lange ist.this.graphics.backgroundColor = this.graphics.newBrush (this.graphics.BrushType.SOLID_COLOR, controlNameLengthLenght ? [1, 1, 1, 1] : [1, 0.5, 0.5, 1]);// Wenn controlNameLengthLenght kurz genug ist wird der Weiter Button enabledbuttonWeiterName.enabled = controlNameLengthLenght;}windowYourName.show ();// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Anzeige Namen / Namenvar windowShowName = new Window ("dialog", " ", undefined, {closeButton: false} );// windowShowName.orientation = "row";windowShowName.alignChildren = ['fill', 'fill'];// Falls jemand ESC bei der Namenseingabe gedrückt haben sollte und nichts eingegeben hatif (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {windowShowName.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Nichts.png"));  var messageHallo = windowShowName.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,400,30],);  messageHallo.text = "Du hast die Escape Taste gedrückt.";    var messageHallo2 = windowShowName.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,400,10],);  messageHallo2.text = "---------------------------------------------------------------------------";    var messageHallo3 = windowShowName.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,400,30],);  messageHallo3.text = "Wir nennen dich daher einfach " + noName + ".";}// Ganz normaler Willkommenstextif (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {  windowShowName.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Welcome.png"));  var messageHallo = windowShowName.add ('statictext  {text: "Centre", characters: 20, justify: "center"} ', [0,0,400,80],);  messageHallo.text = "Herzlich Willkommen " + edittextYourName.text + ", ich bin der Plakatgenerator.";}// Falls jemand ESC bei der Namenseingabe gedrückt haben sollte und der Name zu lange istif (edittextYourName.text.length > 30) {  // Das Fragezeichen Bild wird plaziert  windowShowName.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Nope.png"));  var messageHallo = windowShowName.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,400,30],);  messageHallo.text = "Tut mir leid, dein Name ist zu lang.";  var messageHallo2 = windowShowName.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,400,10],);  messageHallo2.text = "---------------------------------------------------------------------------";  var messageHallo3 = windowShowName.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,400,30],);  messageHallo3.text = "Wir nennen dich einfach " + tooLong + ".";}var buttonWeiterShowName = windowShowName.add ("button", [0,0,350,60], "Weiter", {name:"ok"});windowShowName.show ();// Die Variabel die später die While Schleife abbrichtvar enoughForms = 0;// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// Die while Schleife die durchläuft bis der User genug hat beginnt  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!while (enoughForms != 200) {// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Welche Form willst du / Formen// Neues Fenster mit Statischem Textvar windowForms = new Window ("dialog", "", undefined, {closeButton: false} );    windowForms.alignChildren = ['fill', 'fill'];windowForms.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Formen.png"));    windowForms.add ('statictext', [0,0,350,20], '->  Wähle hier eine Form für dein Plakat aus');   // windowForms.alignChildren = "left";// Checkboxen welche Formvar panelForms = windowForms.add ("panel")panelForms.alignChildren = "left";    panelForms.add ("radiobutton", undefined, "Rechtecke");    panelForms.add ("radiobutton", undefined, "Kreise");    panelForms.add ("radiobutton", undefined, "Dreiecke");   // panelForms.add ("radiobutton", [0,0,315,18], "Linien");    var randomFormsNumber = b.round ( b.random (2));    panelForms.children[randomFormsNumber].value = true;    // panelForms.children[3].value = true;// Die beiden Buttonsvar buttonWeiterForms = windowForms.add ("button", [0,0,315,40], "Weiter", {name:"ok"});var buttonZufallForms = windowForms.add ("button", [0,0,315,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall Button / Formen    with(windowForms)        buttonZufallForms.onClick = function(buttonZufallFormsFunction){             // Zufallsgenerator für die Checkboxen            var randomNumberGeneralForms = b.round (b.random (0,3) );            panelForms.children[randomNumberGeneralForms].value = true;        }windowForms.show();// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Die If Funktion beginnt / Rechtecke// Die If Funktion der Rechtecke beginnt hierif (panelForms.children[0].value == true) {b.doc().layoutWindows[0].transformReferencePoint = AnchorPoint.CENTER_ANCHOR;b.resetMatrix ();b.units (b.MM);var minOpacityRectangles =  2;var maxOpacityRectangles = 100;var minColorGreyRectangles = 20;var maxColorGreyRectangles = 240;// Variabeln für die Anzahl je nach dem wie die Größe eingestellt wirdvar maxCountSliderValueSizeIsBiggerThan350Rectangles = 10;var maxCountSliderValueSizeIsBiggerThan300Rectangles = 20;var maxCountSliderValueSizeIsBiggerThan250Rectangles = 40;var maxCountSliderValueSizeIsBiggerThan200Rectangles = 70;var maxCountSliderValueSizeIsBiggerThan150Rectangles = 100;var maxCountSliderValueSizeIsBiggerThan100Rectangles = 140;var maxCountSliderValueSizeIsBiggerThan50Rectangles  = 300;// Will man diese Größe verändern muss man dies auf im Max Wert des Sliders tunvar maxSizeRasterRectangles  = 80;var maxSizeNoRasterRectangles  = 400;// Die Anzahl Abstufungen abhängig von der Größevar maxCountRasterSizeIsBiggerThan60Rectangles  = 6;var maxCountRasterSizeIsBiggerThan50Rectangles  = 8;var maxCountRasterSizeIsBiggerThan40Rectangles  = 10;var maxCountRasterSizeIsBiggerThan30Rectangles  = 15;var maxCountRasterSizeIsBiggerThan15Rectangles  = 20;var maxCountRasterSizeIsBiggerThan0Rectangles  = 30;// Die Effektevar blendModeRadioOneRectangles = BlendMode.SCREEN;var blendModeRadioTwoRectangles = BlendMode.OVERLAY;//========================================================================================================================================================= Fenster / Wie sollen die Rechtecke aussehen / Rechtecke// Neues Fenster mit Statischem Textvar windowLookRectangles = new Window ("dialog", "", undefined, {closeButton: false} );windowLookRectangles.alignChildren = "left";windowLookRectangles.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Aussehen.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Farbe wählen / RechteckewindowLookRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier die Farbe deiner Rechtecke');    // Farben Panel    var panelLookColorRectangles = windowLookRectangles.add ("panel");    panelLookColorRectangles.alignChildren = "left";        // Die Radio Buttons der Farben        panelLookColorRectangles.add ("radiobutton", undefined, "Eine Farbe");        panelLookColorRectangles.add ("radiobutton", undefined, "Ein Verlauf");        panelLookColorRectangles.add ("radiobutton", undefined, "Schwarz-Weiß");        panelLookColorRectangles.add ("radiobutton", [0,0,315,20], "Bunt");        // Setzt zufällig einen der panelLookColorRectangles Panels auf true damit etwas ausgewählt ist        var panelLookColorRandomAktiveRectangles = b.round ( b.random (0, 2) );        panelLookColorRectangles.children[panelLookColorRandomAktiveRectangles].value = true;//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Effekte wählen / RechteckewindowLookRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier einen Effekt');    // Effekte Panel    var panelLookEffectsRectangles = windowLookRectangles.add ("panel");    panelLookEffectsRectangles.alignChildren = "left";        // Die Radio Buttons der Effekte        panelLookEffectsRectangles.add ("radiobutton", undefined, "Keinen Effekt");        panelLookEffectsRectangles.add ("radiobutton", undefined, "Transparenz");        panelLookEffectsRectangles.add ("radiobutton", undefined, "Negativ Multiplizieren");        panelLookEffectsRectangles.add ("radiobutton", [0,0,315,20], "Inneinanderkopieren");        // Setzt zufällig einen der panelLookEffectsRectangles Panels auf true damit etwas ausgewählt ist        var panelLookEffectsRandomAktiveRectangles = b.round ( b.random (0, 3) );        panelLookEffectsRectangles.children[panelLookEffectsRandomAktiveRectangles].value = true;//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Kontur keine Füllung / RechteckewindowLookRectangles.add ('statictext', [0,-10,350,20], '->  Wähle hier zwischen Kontur und oder keine Füllung');    // Kontur / Füllung Panel    var panelLookOutlineNoFillRectangles = windowLookRectangles.add ("panel");    panelLookOutlineNoFillRectangles.alignChildren = "left";        panelLookOutlineNoFillRectangles.add ("checkbox", undefined, "Kontur");        panelLookOutlineNoFillRectangles.add ("checkbox", [0,0,315,20], "Keine Füllung");        // Setzt zufällig einen, beide oder keinen der panelLookEffectsRectangles Checkboxen auf true damit etwas ausgewählt ist        var panelLookOutlineNoFillRandomAktiveRectangles = b.round ( b.random (0, 2.5) );        if (panelLookOutlineNoFillRandomAktiveRectangles == 0) {panelLookOutlineNoFillRectangles.children[0].value = true;}        if (panelLookOutlineNoFillRandomAktiveRectangles == 1) {panelLookOutlineNoFillRectangles.children[0].value = true && panelLookOutlineNoFillRectangles.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kontur keine Füllung / Rechtecke    // Das Verhalten der beiden Buttons Kontur & Fülliung zueinander    panelLookOutlineNoFillRectangles.children[1].onClick = function(){      panelLookOutlineNoFillRectangles.children[0].value = true;    }    panelLookOutlineNoFillRectangles.children[0].onClick = function(){      panelLookOutlineNoFillRectangles.children[1].value = false;    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Aussehen / Rechtecke    var buttonLookWeiterRectangles = windowLookRectangles.add ("button", [0,0,350,40], "Weiter", {name:"ok"} );    var buttonLookZufallRectangles = windowLookRectangles.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall + Panels / Aussehen / Rechtecke    // Reaktion auf Zufall Button klicken    with(windowLookRectangles)        buttonLookZufallRectangles.onClick = function(buttonLookZufallRectanglesFunction){             // Alle radio Boxen deaktivieren             for (var i = 0; i < 4; i++) {                panelLookColorRectangles.children[i].value = false;             }             // Zufallsgenerator für die Farben Radio Boxen                  var randomNumberColorRadioButtonsRectangles = b.floor (b.random (0,3) );                  panelLookColorRectangles.children[randomNumberColorRadioButtonsRectangles].value = true;             // Zufallsgenerator für die Kontur Checkboxen                // Zufalls Zahl ob es generell eine Outline gibt                 var randomNumberEffectsGeneralRectangles = (b.random (0,3) );                 if (randomNumberEffectsGeneralRectangles > 1.5) {                       // Zufalls Zahl was für eine Outline                       var randomNumberOutlineCheckboxesRectangles = b.floor (b.random (0,3) );                       if (randomNumberOutlineCheckboxesRectangles == 0) { panelLookOutlineNoFillRectangles.children[0].value = true; }                       if (randomNumberOutlineCheckboxesRectangles == 1) { panelLookOutlineNoFillRectangles.children[0].value = true; panelLookOutlineNoFillRectangles.children[1].value = true;  }                       if (randomNumberOutlineCheckboxesRectangles == 2) { panelLookOutlineNoFillRectangles.children[0].value = false; panelLookOutlineNoFillRectangles.children[1].value = false; }                  }                    else {                        panelLookOutlineNoFillRectangles.children[0].value = false;                        panelLookOutlineNoFillRectangles.children[1].value = false;                         }             // Zufallsgenerator für die Transparenz Radio Boxen                      // Zufall was für ein Transparenzeffekt entstehen soll                      var randomNumberTransparencyRadioButtonsRectangles = b.floor (b.random (0,4) );                      panelLookEffectsRectangles.children[randomNumberTransparencyRadioButtonsRectangles].value = true;         }windowLookRectangles.show();// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Kontur Aussehen / Rechtecke if (panelLookOutlineNoFillRectangles.children[0].value == true) {// Neues Fenster mit Statischem Textvar windowOutlineRectangles = new Window ("dialog", "", undefined, {closeButton: false} );windowOutlineRectangles.alignChildren = "left";windowOutlineRectangles.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Kontur.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Radiobuttons / Kontur Aussehen / RechteckewindowOutlineRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier ob alle Konturen gleich groß sein sollen');var panelOutlineSizeRectangles = windowOutlineRectangles.add ("panel")panelOutlineSizeRectangles.alignChildren = "left";        panelOutlineSizeRectangles.add ("radiobutton", undefined, "Alle unterschiedlich groß");        panelOutlineSizeRectangles.add ("radiobutton", [0,0,315,20], "Alle gleich groß");        // Setzt zufällig einen der panelOutlineSizeRectangles Radiobuttons auf true damit etwas ausgewählt ist        var panelOutlineSizeRandomAktiveRectangles = b.round ( b.random (0, 1) );        if (panelOutlineSizeRandomAktiveRectangles == 0) {panelOutlineSizeRectangles.children[0].value = true;}        if (panelOutlineSizeRandomAktiveRectangles == 1) {panelOutlineSizeRectangles.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Radiobuttons / Kontur Aussehen / RechteckewindowOutlineRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Konturen Farbe bekommen sollen');var panelOutlineColorRectangles = windowOutlineRectangles.add ("panel")panelOutlineColorRectangles.alignChildren = "left";        panelOutlineColorRectangles.add ("radiobutton", undefined, "Schwarz-Weiß");        panelOutlineColorRectangles.add ("radiobutton", [0,0,315,20], "Eine zufällige Farbe");        // Setzt zufällig einen der panelOutlineColorRectangles Radiobuttons auf true damit etwas ausgewählt ist        var panelOutlineColorRandomAktiveRectangles = b.round ( b.random (0, 1) );        if (panelOutlineColorRandomAktiveRectangles == 0) {panelOutlineColorRectangles.children[0].value = true;}        if (panelOutlineColorRandomAktiveRectangles == 1) {panelOutlineColorRectangles.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Kontur Aussehen / RechteckewindowOutlineRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier die Stärke der Konturen');var panelOutlineSliderRectangles = windowOutlineRectangles.add ("panel")panelOutlineSliderRectangles.alignChildren = "left";// Das Textfeld des Slidersvar edittextOutlineSliderRectangles = panelOutlineSliderRectangles.add ('edittext {text: 10, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// Der Slider ansichvar sliderOutlineSliderRectangles = panelOutlineSliderRectangles.add ('slider {minvalue: 1, maxvalue: 100, value: 10 }',[0,0,315,20]);// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderOutlineRandomValueRectangles = b.round ( b.random (1,100));edittextOutlineSliderRectangles.text = sliderOutlineRandomValueRectangles;sliderOutlineSliderRectangles.value = sliderOutlineRandomValueRectangles;// Reaktionen auf die beiden Objekte, Slider & TextfeldsliderOutlineSliderRectangles.onChanging = function () {edittextOutlineSliderRectangles.text = b.round (sliderOutlineSliderRectangles.value) };edittextOutlineSliderRectangles.onChanging = function () {sliderOutlineSliderRectangles.value = Number (edittextOutlineSliderRectangles.text) };//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Kontur Aussehen / Rechteckevar buttonOutlineWeiterRectangles = windowOutlineRectangles.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonOutlineZufallRectangles = windowOutlineRectangles.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Kontur Aussehen / Rechtecke    // Reaktion auf Zufall Button klicken    with(windowOutlineRectangles)        buttonOutlineZufallRectangles.onClick = function(buttonOutlineZufallRectanglesFunction){             for (var i = 0; i < 2; i++) {            panelOutlineSizeRectangles.children[i].value = false;            }             // Zufallsgenerator für die unterschiedliche Konturgröße Radio Buttons                  var randomNumberDifferentOutlineRectangles = b.floor (b.random (0,2) );                  panelOutlineSizeRectangles.children[randomNumberDifferentOutlineRectangles].value = true;             // Zufallsgenerator für die Farbe der Kontur Radio Buttons                  var randomNumberColorRectangles = b.floor (b.random (0,2) );                  panelOutlineColorRectangles.children[randomNumberColorRectangles].value = true;             // Zufallsgenerator für den Größe Slider                  var randomNumberCountHowBigOutlineRectangles = b.round (b.random (1,100) ) ;                  sliderOutlineSliderRectangles.value = randomNumberCountHowBigOutlineRectangles;                  edittextOutlineSliderRectangles.text = randomNumberCountHowBigOutlineRectangles;            }windowOutlineRectangles.show();// Variable die ich einbauen musste weil edittextOutlineSliderRectangles.text weiter unten irgendwie nicht ausgelesen werden konntevar outlineSliderMagicVariableRectangles =  edittextOutlineSliderRectangles.text ;}// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Position und Größe / Rechtecke// Neues Fenster mit Statischem Textvar windowPositionSizeRectangles = new Window ("dialog", "", undefined, {closeButton: false} );    windowPositionSizeRectangles.alignChildren = "left";windowPositionSizeRectangles.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Platzierung.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Drehung / RechteckewindowPositionSizeRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Rechtecke gedreht werden sollen');var panelPositionRotationRectangles = windowPositionSizeRectangles.add ("panel")panelPositionRotationRectangles.alignChildren = "left";    // Radio Buttons Drehung    panelPositionRotationRectangles.add ("radiobutton", undefined, "Keine Drehung");    panelPositionRotationRectangles.add ("radiobutton", undefined, "Einheitliche Drehung");    panelPositionRotationRectangles.add ("radiobutton", [0,0,315,20], "Unterschiedliche Drehung");    // Setzt zufällig einen der panelPositionRotationRectangles Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionRotationRandomAktiveRectangles = b.round ( b.random (0, 2) );    if (panelPositionRotationRandomAktiveRectangles == 0) {panelPositionRotationRectangles.children[0].value = true;}    if (panelPositionRotationRandomAktiveRectangles == 1) {panelPositionRotationRectangles.children[1].value = true;}    if (panelPositionRotationRandomAktiveRectangles == 2) {panelPositionRotationRectangles.children[2].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Positionierung / Raster oder kein Raster / RechteckewindowPositionSizeRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier die Positionierung deiner Rechtecke');var panelPositionRasterRectangles = windowPositionSizeRectangles.add ("panel")panelPositionRasterRectangles.alignChildren = "left";    // Radio Buttons Positionierung    panelPositionRasterRectangles.add ("radiobutton", undefined, "Raster");    panelPositionRasterRectangles.add ("radiobutton", [0,0,315,20], "Zufällige Position");    // Setzt zufällig einen der panelOutlineSizeRectangles Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionRasterRandomAktiveRectangles = b.round ( b.random (0, 1) );    if (panelPositionRasterRandomAktiveRectangles == 0) {panelPositionRasterRectangles.children[0].value = true;}    if (panelPositionRasterRandomAktiveRectangles == 1) {panelPositionRasterRectangles.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Alle gleich groß / RechteckewindowPositionSizeRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Rechtecke alle gleich groß sein sollen');var panelPositionSameSizeRectangles = windowPositionSizeRectangles.add ("panel")panelPositionSameSizeRectangles.alignChildren = "left";    // Radio Buttons Alle gleich groß    panelPositionSameSizeRectangles.add ("radiobutton", undefined, "Alle unterschiedlich groß");    panelPositionSameSizeRectangles.add ("radiobutton", [0,0,315,20], "Alle gleich groß");    // Setzt zufällig einen der panelOutlineSizeRectangles Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionSameSizeRandomAktiveRectangles = b.round ( b.random (0, 1) );    if (panelPositionSameSizeRandomAktiveRectangles == 0) {panelPositionSameSizeRectangles.children[0].value = true;}    if (panelPositionSameSizeRandomAktiveRectangles == 1) {panelPositionSameSizeRectangles.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Quadratische Form / RechteckewindowPositionSizeRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier die Grundform deiner Rechtecke');var panelPositionQuadratRectangles = windowPositionSizeRectangles.add ("panel")panelPositionQuadratRectangles.alignChildren = "left";    // Checkboxen Quadratische Form    panelPositionQuadratRectangles.add ("radiobutton", undefined, "Rechteckig");    panelPositionQuadratRectangles.add ("radiobutton", [0,0,315,20], "Quadratisch");    // Setzt zufällig einen der panelOutlineSizeRectangles Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionQuadratRandomAktiveRectangles = b.round ( b.random (0, 1) );    if (panelPositionQuadratRandomAktiveRectangles == 0) {panelPositionQuadratRectangles.children[0].value = true;}    if (panelPositionQuadratRandomAktiveRectangles == 1) {panelPositionQuadratRectangles.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Plazierung / Rechtecke// Die beiden Buttonsvar buttonPositionWeiterRectangles = windowPositionSizeRectangles.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonPositionZufallRectangles = windowPositionSizeRectangles.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall + Panels / Plazierung / Rechtecke    // Reaktion auf Zufall Button klicken    with(windowPositionSizeRectangles)        buttonPositionZufallRectangles.onClick = function(buttonPositionZufallRectanglesFunction){             // Alle Radiobuttons und Checkboxen deaktivieren             for (var i = 0; i < 2; i++) {                panelPositionRotationRectangles.children[i].value = false;                panelPositionRasterRectangles.children[i].value = false;                panelPositionSameSizeRectangles.children[0].value = false;                panelPositionQuadratRectangles.children[i].value = false;             // Zufallsgenerator für die Rotation Radio Buttons                  var randomNumberPositionRotationRectangles = b.floor (b.random (0,3) );                  panelPositionRotationRectangles.children[randomNumberPositionRotationRectangles].value = true;             // Zufallsgenerator für die Position Radio Buttons                  var randomNumberPositionPositionRectangles = b.floor (b.random (0,2) );                  panelPositionRasterRectangles.children[randomNumberPositionPositionRectangles].value = true;             // Zufallsgenerator für die Alle gleich groß Checkbox                  var randomNumberPositionSameSizeRectangles = b.floor (b.random (0,2) );                  panelPositionSameSizeRectangles.children[randomNumberPositionSameSizeRectangles].value = true;             // Zufallsgenerator für die Grundform Radio Buttons                 var randomNumberPositionQuadratRectangles = b.floor (b.random (0,2) );                 panelPositionQuadratRectangles.children[randomNumberPositionQuadratRectangles].value = true;            }        }windowPositionSizeRectangles.show();// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Maximale Größe / Rechtecke// Neues Fenster mit Statischem Textvar windowMaxSizeRectangles = new Window ("dialog", "", undefined, {closeButton: false} );    windowMaxSizeRectangles.alignChildren = "left";windowMaxSizeRectangles.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Grösse.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Maximale Größe / RechteckewindowMaxSizeRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier die maximale Größe deiner Rechtecke');var panelSliderMaxSizeRectangles = windowMaxSizeRectangles.add ("panel")panelSliderMaxSizeRectangles.alignChildren = "left";// Das Textfeld des Slidersvar sliderTextMaxSizeRectangles = panelSliderMaxSizeRectangles.add ('edittext {text: 20, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// Der Slider Größe für Raster Anordnungif (panelPositionRasterRectangles.children[0].value == true) {var sliderSliderMaxSizeRectangles = panelSliderMaxSizeRectangles.add ('slider {minvalue: 5, maxvalue: 80, value: 20}',[0,0,315,20]);// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderMaxSizeRandomValueRectangles = b.round ( b.random (5,maxSizeRasterRectangles));}// Der Slider Größe für keine Raster Anordnungif (panelPositionRasterRectangles.children[1].value == true) {var sliderSliderMaxSizeRectangles = panelSliderMaxSizeRectangles.add ('slider {minvalue: 5, maxvalue: 400, value: 20}',[0,0,315,20]);// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderMaxSizeRandomValueRectangles = b.round ( b.random (5,maxSizeNoRasterRectangles));}sliderTextMaxSizeRectangles.text = sliderMaxSizeRandomValueRectangles;sliderSliderMaxSizeRectangles.value = sliderMaxSizeRandomValueRectangles;// Reaktionen auf die beiden Objekte, Slider & TextfeldsliderSliderMaxSizeRectangles.onChanging = function () {sliderTextMaxSizeRectangles.text = b.round (sliderSliderMaxSizeRectangles.value) };sliderTextMaxSizeRectangles.onChanging = function () {sliderSliderMaxSizeRectangles.value = Number (sliderTextMaxSizeRectangles.text) };//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter / Maxiamale Größe / Rechtecke// Die beiden Buttonsvar buttonMaxSizeWeiterRectangles = windowMaxSizeRectangles.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonMaxSizeZufallRectangles = windowMaxSizeRectangles.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Maxiamale Größe / Rechtecke    // Reaktion auf Zufall Button klicken    with(windowMaxSizeRectangles)        buttonMaxSizeZufallRectangles.onClick = function(buttonMaxSizeZufallRectanglesFunction){// Wenn Raster ausgewählt wurdeif (panelPositionRasterRectangles.children[0].value == true) {             // Zufallsgenerator für den Größe Slider                  var randomNumberMaxSizeRectangles = b.round (b.random (5,maxSizeRasterRectangles) );                  sliderSliderMaxSizeRectangles.value = randomNumberMaxSizeRectangles;                  sliderTextMaxSizeRectangles.text = randomNumberMaxSizeRectangles;            }// Wenn kein Raster ausgewählt wurdeif (panelPositionRasterRectangles.children[1].value == true) {             // Zufallsgenerator für den Größe Slider                  var randomNumberMaxSizeRectangles = b.round (b.random (5,maxSizeNoRasterRectangles) );                  sliderSliderMaxSizeRectangles.value = randomNumberMaxSizeRectangles;                  sliderTextMaxSizeRectangles.text = randomNumberMaxSizeRectangles;            }}windowMaxSizeRectangles.show();// Variabel sicherheitshalber eingebaut, da es schoneinmal einen Fehler deswegen gabvar maxSizeSliderMagicVariabelRectangles = b.round (sliderTextMaxSizeRectangles.text);// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Anzahl / Rechtecke// Neues Fenster mit Statischem Textvar windowCountRectangles = new Window ("dialog", "Wie viele Rechtecke sollen es sein?", undefined, {closeButton: false} );//windowCountRectangles.alignChildren = "left";windowCountRectangles.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Anzahl.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Anzahl / Rechtecke// Wenn kein Raster erstellt wirdif (panelPositionRasterRectangles.children[1].value == true) {    windowCountRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier wie viele Rechtecke du plazieren möchtest');}// Wenn Raster erstellt wirdif (panelPositionRasterRectangles.children[0].value == true) {    windowCountRectangles.add ('statictext', [0,0,350,20], '->  Wähle hier die Anzahl der Zeilen und Spalten des Rasters');}var panelCountSliderRectangles = windowCountRectangles.add ("panel")panelCountSliderRectangles.alignChildren = "left";// Anzeige wenn ein Raster ausgewählt wurde// Das Textfeld des Slidersvar edittextCountSliderRectangles = panelCountSliderRectangles.add ('edittext {text: 10, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// Der Slider ansichvar sliderCountSliderRectangles = panelCountSliderRectangles.add ('slider {minvalue: 1, maxvalue: 300, value: 10}',[0,0,315,20]);// Anzahlanpassung bei einem Rasterif (panelPositionRasterRectangles.children[0].value == true) {// Variabel für die Anzahl die durch die Größe beeinflusst wird  if (maxSizeSliderMagicVariabelRectangles >60 ) {sliderCountSliderRectangles.maxvalue = maxCountRasterSizeIsBiggerThan60Rectangles};  if (maxSizeSliderMagicVariabelRectangles >50 && maxSizeSliderMagicVariabelRectangles <=60) {sliderCountSliderRectangles.maxvalue = maxCountRasterSizeIsBiggerThan50Rectangles};  if (maxSizeSliderMagicVariabelRectangles >40 && maxSizeSliderMagicVariabelRectangles <=50) {sliderCountSliderRectangles.maxvalue = maxCountRasterSizeIsBiggerThan40Rectangles};  if (maxSizeSliderMagicVariabelRectangles >30 && maxSizeSliderMagicVariabelRectangles <=40) {sliderCountSliderRectangles.maxvalue = maxCountRasterSizeIsBiggerThan30Rectangles};  if (maxSizeSliderMagicVariabelRectangles >15 && maxSizeSliderMagicVariabelRectangles <=30) {sliderCountSliderRectangles.maxvalue = maxCountRasterSizeIsBiggerThan15Rectangles};  if (maxSizeSliderMagicVariabelRectangles >0 && maxSizeSliderMagicVariabelRectangles  <=15)  {sliderCountSliderRectangles.maxvalue = maxCountRasterSizeIsBiggerThan0Rectangles};}// Anzahlanpassung bei keinem Rasterif (panelPositionRasterRectangles.children[1].value == true) {// Variabel für die Anzahl die durch die Größe beeinflusst wird  if (maxSizeSliderMagicVariabelRectangles >350 ) {sliderCountSliderRectangles.maxvalue = maxCountSliderValueSizeIsBiggerThan350Rectangles};  if (maxSizeSliderMagicVariabelRectangles >300 && maxSizeSliderMagicVariabelRectangles <=350) {sliderCountSliderRectangles.maxvalue = maxCountSliderValueSizeIsBiggerThan300Rectangles};  if (maxSizeSliderMagicVariabelRectangles >250 && maxSizeSliderMagicVariabelRectangles <=300) {sliderCountSliderRectangles.maxvalue = maxCountSliderValueSizeIsBiggerThan250Rectangles};  if (maxSizeSliderMagicVariabelRectangles >200 && maxSizeSliderMagicVariabelRectangles <=250) {sliderCountSliderRectangles.maxvalue = maxCountSliderValueSizeIsBiggerThan200Rectangles};  if (maxSizeSliderMagicVariabelRectangles >150 && maxSizeSliderMagicVariabelRectangles <=200) {sliderCountSliderRectangles.maxvalue = maxCountSliderValueSizeIsBiggerThan150Rectangles};  if (maxSizeSliderMagicVariabelRectangles >100 && maxSizeSliderMagicVariabelRectangles <=150) {sliderCountSliderRectangles.maxvalue = maxCountSliderValueSizeIsBiggerThan100Rectangles};  if (maxSizeSliderMagicVariabelRectangles >50 && maxSizeSliderMagicVariabelRectangles  <=100)  {sliderCountSliderRectangles.maxvalue = maxCountSliderValueSizeIsBiggerThan50Rectangles};}// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderCountRandomValueRectanles = b.round ( b.random (5,sliderCountSliderRectangles.maxvalue));edittextCountSliderRectangles.text = sliderCountRandomValueRectanles;sliderCountSliderRectangles.value = sliderCountRandomValueRectanles;// Reaktionen auf die beiden Objekte, Slider & TextfeldsliderCountSliderRectangles.onChanging = function () {edittextCountSliderRectangles.text = b.round (sliderCountSliderRectangles.value) };edittextCountSliderRectangles.onChanging = function () {sliderCountSliderRectangles.value = Number (edittextCountSliderRectangles.text) };//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Anzahl / Rechteckevar buttonCountWeiterRectangles = windowCountRectangles.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonCountZufallRectangles = windowCountRectangles.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Anzahl / Rechtecke    // Reaktion auf Zufall Button klicken    with(windowCountRectangles)        buttonCountZufallRectangles.onClick = function(buttonCountZufallRectanglesFunction){             // Zufallsgenerator für den Größe Slider                  var randomNumberCountHowMuchRectangles = b.round (b.random (2,sliderCountSliderRectangles.maxvalue) );                  sliderCountSliderRectangles.value = randomNumberCountHowMuchRectangles;                  edittextCountSliderRectangles.text = randomNumberCountHowMuchRectangles;            }windowCountRectangles.show();countSliderMagicVariableRectangles = edittextCountSliderRectangles.text;// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################b.noStroke ();//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / 1 Farbe + 1 Verlauf / Rechtecke// Reaktionen auf die Farben Radio Buttons// Eine Farbe    if (panelLookColorRectangles.children[0].value  == true) {      var colorNormalRectangles = b.color (b.random (0,255), b.random (0,255), b.random (0,255) );      b.fill (colorNormalRectangles);    }// Ein Verlauf// Die Zufallszahl für die benennung des Verlaufs, andernfalls überscheiben die nachfolgenden Verläufe die alten und das Bild wird schwarz weißvar randomGradiantNumberRectangles = b.random (1000);    if (panelLookColorRectangles.children[1].value  == true) {      var colorCreateGradiantColorOneRectangles = b.color ( b.random (0,255), b.random (0,255), b.random (0,255) );      var colorCreateGradiantColorTwoRectangles = b.color ( b.random (0,255), b.random (0,255), b.random (0,255) );      b.fill( b.gradient(colorCreateGradiantColorOneRectangles, colorCreateGradiantColorTwoRectangles, "GradiantRectangles" + randomGradiantNumberRectangles) );    }//---------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Rotation / Keine + gleiche Drehung / Rechtecke// Reaktionen auf die Drehung Radio Buttons    // Keine Drehung    if (panelPositionRotationRectangles.children[0].value  == true) {      // Zufallszahl die entscheidet ob 0, oder 90 Grad gedret wird      var rotationRadiansRandomNumberRectangles = b.random (1,3);      if (rotationRadiansRandomNumberRectangles > 1.5) {        var rotationRadiansRectangles = b.radians ( 90 );        b.rotate ( rotationRadiansRectangles );      }    }    // Einheitliche Drehung    if (panelPositionRotationRectangles.children[1].value  == true) {      var rotationRadiansRectangles = b.radians ( b.random (10,350) );      b.rotate ( rotationRadiansRectangles );    }//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kontur / Rechtecke// Eine minimale Konturenstärke + der Wert der im Slider eingestellt wurdevar minStrokeWeightRectangles = 0.5;var maxStrokeWeightRectangles = outlineSliderMagicVariableRectangles;// Reaktionen auf die Outline Checkboxen    // Normale Kontur + normale Füllung + zufällige Farbe    if (panelLookOutlineNoFillRectangles.children[0].value  == true && panelLookOutlineNoFillRectangles.children[1].value == false && panelOutlineColorRectangles.children[1].value == true) {         b.stroke (b.random (255), b.random (255), b.random (255) );    }    // NormaleKontur + Keine Füllung + Eine zufällige Farbe    if (panelLookOutlineNoFillRectangles.children[0].value  == true && panelLookOutlineNoFillRectangles.children[1].value == true && panelOutlineColorRectangles.children[1].value == true) {      b.stroke (b.random (255), b.random (255), b.random (255) );    }//---------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kontur / Alle Konturen gleich groß / Rechtecke// Wenn die Option Outline geklickt wurde, treten diese If Funktionen in Kraft if (panelLookOutlineNoFillRectangles.children[0].value == true) {    // Alle Konturen gleich groß    if (panelOutlineSizeRectangles.children[1].value == true) {      b.strokeWeight ( maxStrokeWeightRectangles );    }}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Quadratisch + Gleiche Größe / Rechtecke    // Größe Rechtecke alle nicht Quadratisch und gleich groß    if (panelPositionQuadratRectangles.children[0].value  == true && panelPositionSameSizeRectangles.children[1].value  == true) {        // Zufallszahl welche Seite größer ist als die andere, je nach dem wird die eine zufällig und die andere mit maxSizeSliderMagicVariabelRectangles ausgestattet oder umgekehrt        var noSquereRandomNumberRectangles = b.random (0,3);        if (noSquereRandomNumberRectangles < 1.5) {            var theSizeWidthRectangles = maxSizeSliderMagicVariabelRectangles;            var theSizeHeightRectangles = b.random ( 5, maxSizeSliderMagicVariabelRectangles );        }             else {               var theSizeWidthRectangles = b.random ( 5, maxSizeSliderMagicVariabelRectangles );               var theSizeHeightRectangles = maxSizeSliderMagicVariabelRectangles;            }        }    // Größe Quadratisch und alle gleich groß    if (panelPositionQuadratRectangles.children[1].value  == true && panelPositionSameSizeRectangles.children[1].value  == true) {      var theSizeWidthRectangles = maxSizeSliderMagicVariabelRectangles;      var theSizeHeightRectangles = maxSizeSliderMagicVariabelRectangles;    }//------------------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Position / Raster / Rechtecke// Wenn ein Raster gewählt wurde// ################################################################################################################################################################################# DIE If ein Raster Funktion beginnt if (panelPositionRasterRectangles.children[0].value == true) {// ########################################################################################################################################################################## DIE If ein Raster Funktion beginnt // Damit ist das Raster zentriert          var center = true;          // Das rundet das Slider Ergebniss auf eine gerade Zahl          if (countSliderMagicVariableRectangles&2 != 0) {            countSliderMagicVariableRectangles++          }          // Falls 1 Objekt ausgegeben wird, damit mindestens 2 Dinge erscheinen            if (countSliderMagicVariableRectangles == 1) {              var xCellsRectangles = 1;              var yCellsRectanlges = 1;              }                  else {                  var xCellsRectangles = countSliderMagicVariableRectangles;                  var yCellsRectanlges = countSliderMagicVariableRectangles;                  }            // Teilung der Zellen            var cellWidthRasterRectangles = b.width / xCellsRectangles;            var cellHeightRasterRectangles = b.height / yCellsRectanlges;// ##################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT            for( var forYRectangles = 0; forYRectangles < yCellsRectanlges; forYRectangles++) {               for( var forXRectangles = 0; forXRectangles < xCellsRectangles; forXRectangles++) {// ##################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT//----------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Quadratisch + unterschiedlich Groß / Rechtecke    // Größe alle Quadratisch und unterschiedlich groß    if (panelPositionQuadratRectangles.children[1].value  == true && panelPositionSameSizeRectangles.children[0].value  == true) {      // Die Quadratgröße wird jedesmal neu ausgewürfelt      var generalSizeRectangles = b.random ( 5, maxSizeSliderMagicVariabelRectangles);      var theSizeWidthRectangles = generalSizeRectangles;      var theSizeHeightRectangles = generalSizeRectangles;    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Nicht Quadratisch + unterschiedlich Groß / Rechtecke    // Größe alle nicht Quadratisch und alle unterschiedlich groß    if (panelPositionQuadratRectangles.children[0].value  == true && panelPositionSameSizeRectangles.children[0].value  == true) {            var theSizeWidthRectangles = b.random ( 5, maxSizeSliderMagicVariabelRectangles );            var theSizeHeightRectangles = b.random ( 5, maxSizeSliderMagicVariabelRectangles );    }//--------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Alle unterschiedlich / Rechtecke    // Wenn die Option Outline geklickt wurde, und im nächsten Fenster die Option alle Konturen unterschiedlich groß     if (panelLookOutlineNoFillRectangles.children[0].value == true && panelOutlineSizeRectangles.children[0].value == true) {          b.strokeWeight (b.random (minStrokeWeightRectangles, maxStrokeWeightRectangles) );    }    //------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / Schwarz-Weiß + Bunt / Rechtecke    // Reaktionen auf die Farben Radio Buttons    // Schwarz-Weiß        if (panelLookColorRectangles.children[2].value  == true) {          var colorGreyRandomNumberRectangles = b.random (minColorGreyRectangles, maxColorGreyRectangles);          var colorGreyRectangles = b.color (colorGreyRandomNumberRectangles, colorGreyRandomNumberRectangles, colorGreyRandomNumberRectangles );          b.fill (colorGreyRectangles);        }    // Bunt        if (panelLookColorRectangles.children[3].value  == true) {          var colorColorfullRectangles = b.color (b.random (0,255), b.random (0,255), b.random (0,255) ); b.fill (colorColorfullRectangles);        }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Rotation / Chaos / Rechtecke// Reaktionen auf die Drehung Radio Buttons    // Chaotische Drehung    if (panelPositionRotationRectangles.children[2].value  == true) {      var rotationRadiansRectangles = b.radians ( b.random (10,350) );      b.rotate ( rotationRadiansRectangles );    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline Schwarz-Weiß + Keine Füllung / Rechtecke    // Normale Kontur + keine Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillRectangles.children[0].value  == true && panelLookOutlineNoFillRectangles.children[1].value == true && panelOutlineColorRectangles.children[0].value == true) {          var colorOutlineGreyRandomNumberRectangles = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberRectangles, colorOutlineGreyRandomNumberRectangles, colorOutlineGreyRandomNumberRectangles);    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline Schwarz-Weiß + Füllung / Rechtecke    // Normale Kontur + keine Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillRectangles.children[0].value  == true && panelLookOutlineNoFillRectangles.children[1].value == false && panelOutlineColorRectangles.children[0].value == true) {          var colorOutlineGreyRandomNumberRectangles = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberRectangles, colorOutlineGreyRandomNumberRectangles, colorOutlineGreyRandomNumberRectangles);    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Keine Füllung / Rechtecke    // Kontur & Keine Füllung    if (panelLookOutlineNoFillRectangles.children[1].value  == true) {      b.noFill ();    }    // ##################################################################################################################################################################################### DIE RECHTECKE     var theObjektItSelfRectangles = b.rect (0, 0, theSizeWidthRectangles, theSizeHeightRectangles );     // Neupositionierung der Rechtecke für das Raster     b.itemX ( theObjektItSelfRectangles, cellWidthRasterRectangles * forXRectangles + cellWidthRasterRectangles / 2 - b.bounds(theObjektItSelfRectangles).width / 2 );     b.itemY ( theObjektItSelfRectangles, cellHeightRasterRectangles * forYRectangles + cellHeightRasterRectangles / 2 - b.bounds(theObjektItSelfRectangles).height / 2 );    // ##################################################################################################################################################################################### DIE RECHTECKE//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Effekt / BlendModes / Rechtecke// Reaktionen auf die Transparenz Radio Buttons// Negativ Multiplizieren    if (panelLookEffectsRectangles.children[2].value  == true) {      b.blendMode (theObjektItSelfRectangles, blendModeRadioOneRectangles);    }// Ineinanderkopieren    if (panelLookEffectsRectangles.children[3].value  == true) {      b.blendMode (theObjektItSelfRectangles, blendModeRadioTwoRectangles);    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Transparenz / Aussehen / Rechtecke// Reaktionen auf die Transparenz Radio Buttons// Keinen Effekt    if (panelLookEffectsRectangles.children[0].value  == true) {    // Nüscht passiert    }// Transparent    if (panelLookEffectsRectangles.children[1].value  == true) {      b.opacity (theObjektItSelfRectangles, b.random (minOpacityRectangles, maxOpacityRectangles) );    }// ##################################################################################################################################################################################### DIE FOR SCHLEIFEN ENDEN          }          }// ##################################################################################################################################################################################### DIE If Raster Funktion Endet}//--------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Position / Kein Raster / Rechtecke// Wenn kein Raster gewählt wird// ########################################################################################################################################################################## DIE If kein Raster Funktion beginnt if (panelPositionRasterRectangles.children[1].value == true) {// #################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT for (var forRectangles = 0; forRectangles < countSliderMagicVariableRectangles; forRectangles ++) {//------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Position / Immer unterschiedlich / Rechtecke    if (panelPositionRasterRectangles.children[1].value  == true) {      // Für eine Abwechslungsreichere Positionierung      xPositionRectangle = b.random (0 - theSizeWidthRectangles/1.5, b.width + theSizeWidthRectangles/1.5);      yPositionRectangle = b.random (0 - theSizeHeightRectangles/1.2, b.height  + theSizeHeightRectangles/1.5);      // xPositionRectangle = b.random (0, b.width);      // yPositionRectangle = b.random (0, b.height);    }//----------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Quadratisch + unterschiedlich Groß / Rechtecke    // Größe alle Quadratisch und unterschiedlich groß    if (panelPositionQuadratRectangles.children[1].value  == true && panelPositionSameSizeRectangles.children[0].value  == true) {      // Die Quadratgröße wird jedesmal neu ausgewürfelt      var generalSizeRectangles = b.random ( 5, maxSizeSliderMagicVariabelRectangles);      var theSizeWidthRectangles = generalSizeRectangles;      var theSizeHeightRectangles = generalSizeRectangles;    }//-------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Nicht Quadratisch + unterschiedlich Groß / Rechtecke    // Größe alle nicht Quadratisch und alle unterschiedlich groß    if (panelPositionQuadratRectangles.children[0].value  == true && panelPositionSameSizeRectangles.children[0].value  == true) {            var theSizeWidthRectangles = b.random ( 5, maxSizeSliderMagicVariabelRectangles );            var theSizeHeightRectangles = b.random ( 5, maxSizeSliderMagicVariabelRectangles );    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Alle unterschiedlich / Rechtecke    // Wenn die Option Outline geklickt wurde, und im nächsten Fenster die Option alle Konturen unterschiedlich groß     if (panelLookOutlineNoFillRectangles.children[0].value == true && panelOutlineSizeRectangles.children[0].value == true) {          b.strokeWeight (b.random (minStrokeWeightRectangles, maxStrokeWeightRectangles) );    }    //------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / Schwarz-Weiß + Bunt / Rechtecke    // Reaktionen auf die Farben Radio Buttons    // Schwarz-Weiß        if (panelLookColorRectangles.children[2].value  == true) {          var colorGreyRandomNumberRectangles = b.random (minColorGreyRectangles, maxColorGreyRectangles);          var colorGreyRectangles = b.color (colorGreyRandomNumberRectangles, colorGreyRandomNumberRectangles, colorGreyRandomNumberRectangles );          b.fill (colorGreyRectangles);        }    // Bunt        if (panelLookColorRectangles.children[3].value  == true) {          var colorColorfullRectangles = b.color (b.random (0,255), b.random (0,255), b.random (0,255) ); b.fill (colorColorfullRectangles);        }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Rotation / Chaos / Rechtecke// Reaktionen auf die Drehung Radio ButtonsE    // Chaotische Drehung    if (panelPositionRotationRectangles.children[2].value  == true) {      var rotationRadiansRectangles = b.radians ( b.random (10,350) );      b.rotate ( rotationRadiansRectangles );    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline Schwarz-Weiß + Keine Füllung / Rechtecke    // Normale Kontur + keine Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillRectangles.children[0].value  == true && panelLookOutlineNoFillRectangles.children[1].value == true && panelOutlineColorRectangles.children[0].value == true) {          var colorOutlineGreyRandomNumberRectangles = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberRectangles, colorOutlineGreyRandomNumberRectangles, colorOutlineGreyRandomNumberRectangles);    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline Schwarz-Weiß + Füllung / Rechtecke    // Normale Kontur + keine Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillRectangles.children[0].value  == true && panelLookOutlineNoFillRectangles.children[1].value == false && panelOutlineColorRectangles.children[0].value == true) {          var colorOutlineGreyRandomNumberRectangles = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberRectangles, colorOutlineGreyRandomNumberRectangles, colorOutlineGreyRandomNumberRectangles);    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Keine Füllung / Rechtecke    // Kontur & Keine Füllung    if (panelLookOutlineNoFillRectangles.children[1].value  == true) {      b.noFill ();    }// ##################################################################################################################################################################################### DIE RECHTECKE var theObjektItSelfRectangles = b.rect (b.random (0, b.width), b.random(0, b.height), theSizeWidthRectangles, theSizeHeightRectangles );// ##################################################################################################################################################################################### DIE RECHTECKE//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Effekt / BlendModes / Rechtecke// Reaktionen auf die Transparenz Radio Buttons// Negativ Multiplizieren    if (panelLookEffectsRectangles.children[2].value  == true) {      b.blendMode (theObjektItSelfRectangles, blendModeRadioOneRectangles);    }// Ineinanderkopieren    if (panelLookEffectsRectangles.children[3].value  == true) {      b.blendMode (theObjektItSelfRectangles, blendModeRadioTwoRectangles);    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Transparenz / Aussehen / Rechtecke// Reaktionen auf die Transparenz Radio Buttons// Keinen Effekt    if (panelLookEffectsRectangles.children[0].value  == true) {    // Nüscht passiert    }// Transparent    if (panelLookEffectsRectangles.children[1].value  == true) {      b.opacity (theObjektItSelfRectangles, b.random (minOpacityRectangles, maxOpacityRectangles) );    }// ##################################################################################################################################################################################### DIE FOR SCHLEIFE ENDET}// ##################################################################################################################################################################################### DIE If Kein Raster Funktion Endet}// Setzt alle Transformationseinstellungen wieder auf 0b.resetMatrix ();// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Die If Funktion endet / Rechtecke// Die If Funktion der Rechtecke endet hier}// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Die If Funktion beginnt / Kreise// Die If Funktion der Kreise beginnt hierif (panelForms.children[1].value == true) {b.doc().layoutWindows[0].transformReferencePoint = AnchorPoint.CENTER_ANCHOR;b.resetMatrix ();b.units (b.MM);var minOpacityEllipses =  2;var maxOpacityEllipses = 100;var minColorGreyEllipses = 20;var maxColorGreyEllipses = 240;// Variabeln für die Anzahl je nach dem wie die Größe eingestellt wirdvar maxCountSliderValueSizeIsBiggerThan350Ellipses = 10;var maxCountSliderValueSizeIsBiggerThan300Ellipses = 20;var maxCountSliderValueSizeIsBiggerThan250Ellipses = 40;var maxCountSliderValueSizeIsBiggerThan200Ellipses = 70;var maxCountSliderValueSizeIsBiggerThan150Ellipses = 100;var maxCountSliderValueSizeIsBiggerThan100Ellipses = 140;var maxCountSliderValueSizeIsBiggerThan50Ellipses  = 250;// Will man diese Größe verändern muss man dies auf im Max Wert des Sliders tunvar maxSizeRasterEllipses  = 80;var maxSizeNoRasterEllipses  = 400;// Die Anzahl Abstufungen abhängig von der Größevar maxCountRasterSizeIsBiggerThan60Ellipses  = 6;var maxCountRasterSizeIsBiggerThan50Ellipses  = 8;var maxCountRasterSizeIsBiggerThan40Ellipses  = 10;var maxCountRasterSizeIsBiggerThan30Ellipses  = 15;var maxCountRasterSizeIsBiggerThan15Ellipses  = 18;var maxCountRasterSizeIsBiggerThan0Ellipses  = 20;// Die Effektevar blendModeRadioOneEllipses = BlendMode.SCREEN;var blendModeRadioTwoEllipses = BlendMode.OVERLAY;//========================================================================================================================================================= Fenster / Wie sollen die Kreise aussehen / Kreise// Neues Fenster mit Statischem Textvar windowLookEllipses = new Window ("dialog", "", undefined, {closeButton: false} );windowLookEllipses.alignChildren = "left";windowLookEllipses.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Aussehen.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Farbe wählen / KreisewindowLookEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier die Farbe deiner Kreise');    // Farben Panel    var panelLookColorEllipses = windowLookEllipses.add ("panel");    panelLookColorEllipses.alignChildren = "left";        // Die Radio Buttons der Farben        panelLookColorEllipses.add ("radiobutton", undefined, "Eine Farbe");        panelLookColorEllipses.add ("radiobutton", undefined, "Ein Verlauf");        panelLookColorEllipses.add ("radiobutton", undefined, "Schwarz-Weiß");        panelLookColorEllipses.add ("radiobutton", [0,0,315,20], "Bunt");        // Setzt zufällig einen der panelLookColorEllipses Panels auf true damit etwas ausgewählt ist        var panelLookColorRandomGreyOreColorEllipses = b.round ( b.random (0, 1) );        if ( panelLookColorRandomGreyOreColorEllipses == 0) {          var panelLookColorRandomAktiveEllipses = b.round ( b.random (0, 2) );          panelLookColorEllipses.children[panelLookColorRandomAktiveEllipses].value = true;        }        if ( panelLookColorRandomGreyOreColorEllipses == 1) {          var panelLookColorRandomAktiveEllipses = b.round ( b.random (0, 1) );          panelLookColorEllipses.children[panelLookColorRandomAktiveEllipses].value = true;        }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Effekte wählen / KreisewindowLookEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier einen Effekt');    // Effekte Panel    var panelLookEffectsEllipses = windowLookEllipses.add ("panel");    panelLookEffectsEllipses.alignChildren = "left";        // Die Radio Buttons der Effekte        panelLookEffectsEllipses.add ("radiobutton", undefined, "Keinen Effekt");        panelLookEffectsEllipses.add ("radiobutton", undefined, "Transparenz");        panelLookEffectsEllipses.add ("radiobutton", undefined, "Negativ Multiplizieren");        panelLookEffectsEllipses.add ("radiobutton", [0,0,315,20], "Inneinanderkopieren");        // Setzt zufällig einen der panelLookEffectsEllipses Panels auf true damit etwas ausgewählt ist        var panelLookEffectsRandomAktiveEllipses = b.round ( b.random (0, 3) );        panelLookEffectsEllipses.children[panelLookEffectsRandomAktiveEllipses].value = true;//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Kontur keine Füllung / KreisewindowLookEllipses.add ('statictext', [0,-10,350,20], '->  Wähle hier zwischen Kontur und oder keine Füllung');    // Kontur / Füllung Panel    var panelLookOutlineNoFillEllipses = windowLookEllipses.add ("panel");    panelLookOutlineNoFillEllipses.alignChildren = "left";        panelLookOutlineNoFillEllipses.add ("checkbox", undefined, "Kontur");        panelLookOutlineNoFillEllipses.add ("checkbox", [0,0,315,20], "Keine Füllung");        // Setzt zufällig einen, beide oder keinen der panelLookEffectsEllipses Checkboxen auf true damit etwas ausgewählt ist        var panelLookOutlineNoFillRandomAktiveEllipses = b.round ( b.random (0, 6) );        b.println(panelLookOutlineNoFillRandomAktiveEllipses);        if (panelLookOutlineNoFillRandomAktiveEllipses == 0) {panelLookOutlineNoFillEllipses.children[0].value = true;}        if (panelLookOutlineNoFillRandomAktiveEllipses == 1) {panelLookOutlineNoFillEllipses.children[0].value = true && panelLookOutlineNoFillEllipses.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kontur keine Füllung / Kreise    // Das Verhalten der beiden Buttons Kontur & Fülliung zueinander    panelLookOutlineNoFillEllipses.children[1].onClick = function(){      panelLookOutlineNoFillEllipses.children[0].value = true;    }    panelLookOutlineNoFillEllipses.children[0].onClick = function(){      panelLookOutlineNoFillEllipses.children[1].value = false;    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Aussehen / Kreise    var buttonLookWeiterEllipses = windowLookEllipses.add ("button", [0,0,350,40], "Weiter", {name:"ok"} );    var buttonLookZufallEllipses = windowLookEllipses.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall + Panels / Aussehen / Kreise    // Reaktion auf Zufall Button klicken    with(windowLookEllipses)        buttonLookZufallEllipses.onClick = function(buttonLookZufallEllipsesFunction){             // Alle radio Boxen deaktivieren             for (var i = 0; i < 4; i++) {                panelLookColorEllipses.children[i].value = false;             }             // Zufallsgenerator für die Farben Radio Boxen                  var randomNumberColorRadioButtonsEllipses = b.floor (b.random (0,4) );                  panelLookColorEllipses.children[randomNumberColorRadioButtonsEllipses].value = true;             // Zufallsgenerator für die Kontur Checkboxen                // Zufalls Zahl ob es generell eine Outline gibt                 var randomNumberEffectsGeneralEllipses = (b.random (0,3) );                 if (randomNumberEffectsGeneralEllipses > 1.5) {                       // Zufalls Zahl was für eine Outline                       var randomNumberOutlineCheckboxesEllipses = b.floor (b.random (0,3) );                       if (randomNumberOutlineCheckboxesEllipses == 0) { panelLookOutlineNoFillEllipses.children[0].value = true; }                       if (randomNumberOutlineCheckboxesEllipses == 1) { panelLookOutlineNoFillEllipses.children[0].value = true; panelLookOutlineNoFillEllipses.children[1].value = true;  }                       if (randomNumberOutlineCheckboxesEllipses == 2) { panelLookOutlineNoFillEllipses.children[0].value = false; panelLookOutlineNoFillEllipses.children[1].value = false; }                  }                    else {                        panelLookOutlineNoFillEllipses.children[0].value = false;                        panelLookOutlineNoFillEllipses.children[1].value = false;                         }             // Zufallsgenerator für die Transparenz Radio Boxen                      // Zufall was für ein Transparenzeffekt entstehen soll                      var randomNumberTransparencyRadioButtonsEllipses = b.floor (b.random (0,4) );                      panelLookEffectsEllipses.children[randomNumberTransparencyRadioButtonsEllipses].value = true;         }windowLookEllipses.show();// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Kontur Aussehen / Kreise if (panelLookOutlineNoFillEllipses.children[0].value == true) {// Neues Fenster mit Statischem Textvar windowOutlineEllipses = new Window ("dialog", "", undefined, {closeButton: false} );windowOutlineEllipses.alignChildren = "left";windowOutlineEllipses.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Kontur.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Radiobuttons / Kontur Aussehen / KreisewindowOutlineEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier ob alle Konturen gleich groß sein sollen');var panelOutlineSizeEllipses = windowOutlineEllipses.add ("panel")panelOutlineSizeEllipses.alignChildren = "left";        panelOutlineSizeEllipses.add ("radiobutton", undefined, "Alle unterschiedlich groß");        panelOutlineSizeEllipses.add ("radiobutton", [0,0,315,20], "Alle gleich groß");        // Setzt zufällig einen der panelOutlineSizeEllipses Radiobuttons auf true damit etwas ausgewählt ist        var panelOutlineSizeRandomAktiveEllipses = b.round ( b.random (0, 1) );        if (panelOutlineSizeRandomAktiveEllipses == 0) {panelOutlineSizeEllipses.children[0].value = true;}        if (panelOutlineSizeRandomAktiveEllipses == 1) {panelOutlineSizeEllipses.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Radiobuttons / Kontur Aussehen / KreisewindowOutlineEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Konturen Farbe bekommen sollen');var panelOutlineColorEllipses = windowOutlineEllipses.add ("panel")panelOutlineColorEllipses.alignChildren = "left";        panelOutlineColorEllipses.add ("radiobutton", undefined, "Schwarz-Weiß");        panelOutlineColorEllipses.add ("radiobutton", [0,0,315,20], "Eine zufällige Farbe");        // Setzt zufällig einen der panelOutlineColorEllipses Radiobuttons auf true damit etwas ausgewählt ist        var panelOutlineColorRandomAktiveEllipses = b.round ( b.random (0, 2) );        if (panelOutlineColorRandomAktiveEllipses == 0 || panelOutlineColorRandomAktiveEllipses == 1) {panelOutlineColorEllipses.children[1].value = true;}        if (panelOutlineColorRandomAktiveEllipses == 2) {panelOutlineColorEllipses.children[0].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Kontur Aussehen / KreisewindowOutlineEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier die Stärke der Konturen');var panelOutlineSliderEllipses = windowOutlineEllipses.add ("panel")panelOutlineSliderEllipses.alignChildren = "left";// Das Textfeld des Slidersvar edittextOutlineSliderEllipses = panelOutlineSliderEllipses.add ('edittext {text: 10, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// Der Slider ansichvar sliderOutlineSliderEllipses = panelOutlineSliderEllipses.add ('slider {minvalue: 1, maxvalue: 100, value: 10 }',[0,0,315,20]);// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderOutlineRandomValueEllipses = b.round ( b.random (1,100));edittextOutlineSliderEllipses.text = sliderOutlineRandomValueEllipses;sliderOutlineSliderEllipses.value = sliderOutlineRandomValueEllipses;// Reaktionen auf die beiden Objekte, Slider & TextfeldsliderOutlineSliderEllipses.onChanging = function () {edittextOutlineSliderEllipses.text = b.round (sliderOutlineSliderEllipses.value) };edittextOutlineSliderEllipses.onChanging = function () {sliderOutlineSliderEllipses.value = Number (edittextOutlineSliderEllipses.text) };//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Kontur Aussehen / Kreisevar buttonOutlineWeiterEllipses = windowOutlineEllipses.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonOutlineZufallEllipses = windowOutlineEllipses.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Kontur Aussehen / Kreise    // Reaktion auf Zufall Button klicken    with(windowOutlineEllipses)        buttonOutlineZufallEllipses.onClick = function(buttonOutlineZufallEllipsesFunction){             for (var i = 0; i < 2; i++) {            panelOutlineSizeEllipses.children[i].value = false;            }             // Zufallsgenerator für die unterschiedliche Konturgröße Radio Buttons                  var randomNumberDifferentOutlineEllipses = b.floor (b.random (0,2) );                  panelOutlineSizeEllipses.children[randomNumberDifferentOutlineEllipses].value = true;             // Zufallsgenerator für die Farbe der Kontur Radio Buttons                  var randomNumberColorEllipses = b.floor (b.random (0,2) );                  panelOutlineColorEllipses.children[randomNumberColorEllipses].value = true;             // Zufallsgenerator für den Größe Slider                  var randomNumberCountHowBigOutlineEllipses = b.round (b.random (1,100) ) ;                  sliderOutlineSliderEllipses.value = randomNumberCountHowBigOutlineEllipses;                  edittextOutlineSliderEllipses.text = randomNumberCountHowBigOutlineEllipses;            }windowOutlineEllipses.show();// Variable die ich einbauen musste weil edittextOutlineSliderEllipses.text weiter unten irgendwie nicht ausgelesen werden konntevar outlineSliderMagicVariableEllipses =  edittextOutlineSliderEllipses.text ;}// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Position und Größe / Kreise// Neues Fenster mit Statischem Textvar windowPositionSizeEllipses = new Window ("dialog", "", undefined, {closeButton: false} );    windowPositionSizeEllipses.alignChildren = "left";windowPositionSizeEllipses.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Platzierung.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Drehung / KreisewindowPositionSizeEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Kreise gedreht werden sollen');var panelPositionRotationEllipses = windowPositionSizeEllipses.add ("panel")panelPositionRotationEllipses.alignChildren = "left";    // Radio Buttons Drehung    panelPositionRotationEllipses.add ("radiobutton", undefined, "Keine Drehung");    panelPositionRotationEllipses.add ("radiobutton", undefined, "Einheitliche Drehung");    panelPositionRotationEllipses.add ("radiobutton", [0,0,315,20], "Unterschiedliche Drehung");    // Setzt zufällig einen der panelPositionRotationEllipses Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionRotationRandomAktiveEllipses = b.round ( b.random (0, 2) );    if (panelPositionRotationRandomAktiveEllipses == 0) {panelPositionRotationEllipses.children[0].value = true;}    if (panelPositionRotationRandomAktiveEllipses == 1) {panelPositionRotationEllipses.children[1].value = true;}    if (panelPositionRotationRandomAktiveEllipses == 2) {panelPositionRotationEllipses.children[2].value = true;}//---------------------------------------------------------------------------------------------------------------------------------------------- Panel / Positionierung / Raster oder kein Raster / KreisewindowPositionSizeEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier die Positionierung deiner Kreise');var panelPositionRasterEllipses = windowPositionSizeEllipses.add ("panel")panelPositionRasterEllipses.alignChildren = "left";    // Radio Buttons Positionierung    panelPositionRasterEllipses.add ("radiobutton", undefined, "Raster");    panelPositionRasterEllipses.add ("radiobutton", [0,0,315,20], "Zufällige Position");    // Setzt zufällig einen der panelOutlineSizeEllipses Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionRasterRandomAktiveEllipses = b.round ( b.random (0, 1) );    if (panelPositionRasterRandomAktiveEllipses == 0) {panelPositionRasterEllipses.children[0].value = true;}    if (panelPositionRasterRandomAktiveEllipses == 1) {panelPositionRasterEllipses.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Alle gleich groß / KreisewindowPositionSizeEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Kreise alle gleich groß sein sollen');var panelPositionSameSizeEllipses = windowPositionSizeEllipses.add ("panel")panelPositionSameSizeEllipses.alignChildren = "left";    // Radio Buttons Alle gleich groß    panelPositionSameSizeEllipses.add ("radiobutton", undefined, "Alle unterschiedlich groß");    panelPositionSameSizeEllipses.add ("radiobutton", [0,0,315,20], "Alle gleich groß");    // Setzt zufällig einen der panelOutlineSizeEllipses Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionSameSizeRandomAktiveEllipses = b.round ( b.random (0, 1) );    if (panelPositionSameSizeRandomAktiveEllipses == 0) {panelPositionSameSizeEllipses.children[0].value = true;}    if (panelPositionSameSizeRandomAktiveEllipses == 1) {panelPositionSameSizeEllipses.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Kreisförmige Form / KreisewindowPositionSizeEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier die Grundform deiner Kreise');var panelPositionQuadratEllipses = windowPositionSizeEllipses.add ("panel")panelPositionQuadratEllipses.alignChildren = "left";    // Checkboxen Kreisförmige Form    panelPositionQuadratEllipses.add ("radiobutton", undefined, "Elliptisch");    panelPositionQuadratEllipses.add ("radiobutton", [0,0,315,20], "Kreisförmig");    // Setzt zufällig einen der panelOutlineSizeEllipses Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionQuadratRandomAktiveEllipses = b.round ( b.random (0, 1) );    if (panelPositionQuadratRandomAktiveEllipses == 0) {panelPositionQuadratEllipses.children[0].value = true;}    if (panelPositionQuadratRandomAktiveEllipses == 1) {panelPositionQuadratEllipses.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Plazierung / Kreise// Die beiden Buttonsvar buttonPositionWeiterEllipses = windowPositionSizeEllipses.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonPositionZufallEllipses = windowPositionSizeEllipses.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall + Panels / Plazierung / Kreise    // Reaktion auf Zufall Button klicken    with(windowPositionSizeEllipses)        buttonPositionZufallEllipses.onClick = function(buttonPositionZufallEllipsesFunction){             // Alle Radiobuttons und Checkboxen deaktivieren             for (var i = 0; i < 2; i++) {                panelPositionRotationEllipses.children[i].value = false;                panelPositionRasterEllipses.children[i].value = false;                panelPositionSameSizeEllipses.children[0].value = false;                panelPositionQuadratEllipses.children[i].value = false;             // Zufallsgenerator für die Rotation Radio Buttons                  var randomNumberPositionRotationEllipses = b.floor (b.random (0,3) );                  panelPositionRotationEllipses.children[randomNumberPositionRotationEllipses].value = true;             // Zufallsgenerator für die Position Radio Buttons                  var randomNumberPositionPositionEllipses = b.floor (b.random (0,2) );                  panelPositionRasterEllipses.children[randomNumberPositionPositionEllipses].value = true;             // Zufallsgenerator für die Alle gleich groß Checkbox                  var randomNumberPositionSameSizeEllipses = b.floor (b.random (0,2) );                  panelPositionSameSizeEllipses.children[randomNumberPositionSameSizeEllipses].value = true;             // Zufallsgenerator für die Grundform Radio Buttons                 var randomNumberPositionQuadratEllipses = b.floor (b.random (0,2) );                 panelPositionQuadratEllipses.children[randomNumberPositionQuadratEllipses].value = true;            }        }windowPositionSizeEllipses.show();// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Maximale Größe / Kreise// Neues Fenster mit Statischem Textvar windowMaxSizeEllipses = new Window ("dialog", "", undefined, {closeButton: false} );    windowMaxSizeEllipses.alignChildren = "left";windowMaxSizeEllipses.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Grösse.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Maximale Größe / KreisewindowMaxSizeEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier die maximale Größe deiner Kreise');var panelSliderMaxSizeEllipses = windowMaxSizeEllipses.add ("panel")panelSliderMaxSizeEllipses.alignChildren = "left";// Das Textfeld des Slidersvar sliderTextMaxSizeEllipses = panelSliderMaxSizeEllipses.add ('edittext {text: 20, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// Der Slider Größe für Raster Anordnungif (panelPositionRasterEllipses.children[0].value == true) {var sliderSliderMaxSizeEllipses = panelSliderMaxSizeEllipses.add ('slider {minvalue: 5, maxvalue: 80, value: 20}',[0,0,315,20]);// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderMaxSizeRandomValueEllipses = b.round ( b.random (5,maxSizeRasterEllipses));}// Der Slider Größe für keine Raster Anordnungif (panelPositionRasterEllipses.children[1].value == true) {var sliderSliderMaxSizeEllipses = panelSliderMaxSizeEllipses.add ('slider {minvalue: 5, maxvalue: 400, value: 20}',[0,0,315,20]);// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderMaxSizeRandomValueEllipses = b.round ( b.random (5,maxSizeNoRasterEllipses));}sliderTextMaxSizeEllipses.text = sliderMaxSizeRandomValueEllipses;sliderSliderMaxSizeEllipses.value = sliderMaxSizeRandomValueEllipses;// Reaktionen auf die beiden Objekte, Slider & TextfeldsliderSliderMaxSizeEllipses.onChanging = function () {sliderTextMaxSizeEllipses.text = b.round (sliderSliderMaxSizeEllipses.value) };sliderTextMaxSizeEllipses.onChanging = function () {sliderSliderMaxSizeEllipses.value = Number (sliderTextMaxSizeEllipses.text) };//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter / Maxiamale Größe / Kreise// Die beiden Buttonsvar buttonMaxSizeWeiterEllipses = windowMaxSizeEllipses.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonMaxSizeZufallEllipses = windowMaxSizeEllipses.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Maxiamale Größe / Kreise    // Reaktion auf Zufall Button klicken    with(windowMaxSizeEllipses)        buttonMaxSizeZufallEllipses.onClick = function(buttonMaxSizeZufallEllipsesFunction){// Wenn Raster ausgewählt wurdeif (panelPositionRasterEllipses.children[0].value == true) {             // Zufallsgenerator für den Größe Slider                  var randomNumberMaxSizeEllipses = b.round (b.random (5,maxSizeRasterEllipses) );                  sliderSliderMaxSizeEllipses.value = randomNumberMaxSizeEllipses;                  sliderTextMaxSizeEllipses.text = randomNumberMaxSizeEllipses;            }// Wenn kein Raster ausgewählt wurdeif (panelPositionRasterEllipses.children[1].value == true) {             // Zufallsgenerator für den Größe Slider                  var randomNumberMaxSizeEllipses = b.round (b.random (5,maxSizeNoRasterEllipses) );                  sliderSliderMaxSizeEllipses.value = randomNumberMaxSizeEllipses;                  sliderTextMaxSizeEllipses.text = randomNumberMaxSizeEllipses;            }}windowMaxSizeEllipses.show();// Variabel sicherheitshalber eingebaut, da es schoneinmal einen Fehler deswegen gabvar maxSizeSliderMagicVariabelEllipses = b.round (sliderTextMaxSizeEllipses.text);// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Anzahl / Kreise// Neues Fenster mit Statischem Textvar windowCountEllipses = new Window ("dialog", "", undefined, {closeButton: false} );//windowCountEllipses.alignChildren = "left";windowCountEllipses.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Anzahl.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Anzahl / Kreise// Wenn kein Raster erstellt wirdif (panelPositionRasterEllipses.children[1].value == true) {    windowCountEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier wie viele Kreise du plazieren möchtest');}// Wenn Raster erstellt wirdif (panelPositionRasterEllipses.children[0].value == true) {    windowCountEllipses.add ('statictext', [0,0,350,20], '->  Wähle hier die Anzahl der Zeilen und Spalten des Rasters');}var panelCountSliderEllipses = windowCountEllipses.add ("panel")panelCountSliderEllipses.alignChildren = "left";// Anzeige wenn ein Raster ausgewählt wurde// Das Textfeld des Slidersvar edittextCountSliderEllipses = panelCountSliderEllipses.add ('edittext {text: 10, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// Der Slider ansichvar sliderCountSliderEllipses = panelCountSliderEllipses.add ('slider {minvalue: 1, maxvalue: 300, value: 10}',[0,0,315,20]);// Anzahlanpassung bei einem Rasterif (panelPositionRasterEllipses.children[0].value == true) {// Variabel für die Anzahl die durch die Größe beeinflusst wird  if (maxSizeSliderMagicVariabelEllipses >60 ) {sliderCountSliderEllipses.maxvalue = maxCountRasterSizeIsBiggerThan60Ellipses};  if (maxSizeSliderMagicVariabelEllipses >50 && maxSizeSliderMagicVariabelEllipses <=60) {sliderCountSliderEllipses.maxvalue = maxCountRasterSizeIsBiggerThan50Ellipses};  if (maxSizeSliderMagicVariabelEllipses >40 && maxSizeSliderMagicVariabelEllipses <=50) {sliderCountSliderEllipses.maxvalue = maxCountRasterSizeIsBiggerThan40Ellipses};  if (maxSizeSliderMagicVariabelEllipses >30 && maxSizeSliderMagicVariabelEllipses <=40) {sliderCountSliderEllipses.maxvalue = maxCountRasterSizeIsBiggerThan30Ellipses};  if (maxSizeSliderMagicVariabelEllipses >15 && maxSizeSliderMagicVariabelEllipses <=30) {sliderCountSliderEllipses.maxvalue = maxCountRasterSizeIsBiggerThan15Ellipses};  if (maxSizeSliderMagicVariabelEllipses >0 && maxSizeSliderMagicVariabelEllipses  <=15)  {sliderCountSliderEllipses.maxvalue = maxCountRasterSizeIsBiggerThan0Ellipses};}// Anzahlanpassung bei keinem Rasterif (panelPositionRasterEllipses.children[1].value == true) {// Variabel für die Anzahl die durch die Größe beeinflusst wird  if (maxSizeSliderMagicVariabelEllipses >350 ) {sliderCountSliderEllipses.maxvalue = maxCountSliderValueSizeIsBiggerThan350Ellipses};  if (maxSizeSliderMagicVariabelEllipses >300 && maxSizeSliderMagicVariabelEllipses <=350) {sliderCountSliderEllipses.maxvalue = maxCountSliderValueSizeIsBiggerThan300Ellipses};  if (maxSizeSliderMagicVariabelEllipses >250 && maxSizeSliderMagicVariabelEllipses <=300) {sliderCountSliderEllipses.maxvalue = maxCountSliderValueSizeIsBiggerThan250Ellipses};  if (maxSizeSliderMagicVariabelEllipses >200 && maxSizeSliderMagicVariabelEllipses <=250) {sliderCountSliderEllipses.maxvalue = maxCountSliderValueSizeIsBiggerThan200Ellipses};  if (maxSizeSliderMagicVariabelEllipses >150 && maxSizeSliderMagicVariabelEllipses <=200) {sliderCountSliderEllipses.maxvalue = maxCountSliderValueSizeIsBiggerThan150Ellipses};  if (maxSizeSliderMagicVariabelEllipses >100 && maxSizeSliderMagicVariabelEllipses <=150) {sliderCountSliderEllipses.maxvalue = maxCountSliderValueSizeIsBiggerThan100Ellipses};  if (maxSizeSliderMagicVariabelEllipses >50 && maxSizeSliderMagicVariabelEllipses  <=100)  {sliderCountSliderEllipses.maxvalue = maxCountSliderValueSizeIsBiggerThan50Ellipses};}// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderCountRandomValueRectanles = b.round ( b.random (5,sliderCountSliderEllipses.maxvalue));edittextCountSliderEllipses.text = sliderCountRandomValueRectanles;sliderCountSliderEllipses.value = sliderCountRandomValueRectanles;// Reaktionen auf die beiden Objekte, Slider & TextfeldsliderCountSliderEllipses.onChanging = function () {edittextCountSliderEllipses.text = b.round (sliderCountSliderEllipses.value) };edittextCountSliderEllipses.onChanging = function () {sliderCountSliderEllipses.value = Number (edittextCountSliderEllipses.text) };//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Anzahl / Kreisevar buttonCountWeiterEllipses = windowCountEllipses.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonCountZufallEllipses = windowCountEllipses.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Anzahl / Kreise    // Reaktion auf Zufall Button klicken    with(windowCountEllipses)        buttonCountZufallEllipses.onClick = function(buttonCountZufallEllipsesFunction){             // Zufallsgenerator für den Größe Slider                  var randomNumberCountHowMuchEllipses = b.round (b.random (2,sliderCountSliderEllipses.maxvalue) );                  sliderCountSliderEllipses.value = randomNumberCountHowMuchEllipses;                  edittextCountSliderEllipses.text = randomNumberCountHowMuchEllipses;            }windowCountEllipses.show();// Der Wert des Textfeldes wird in eine Variabel umgewandeltcountSliderMagicVariableEllipses = edittextCountSliderEllipses.text;// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################b.noStroke ();//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / 1 Farbe + 1 Verlauf / Kreise// Reaktionen auf die Farben Radio Buttons// Eine Farbe    if (panelLookColorEllipses.children[0].value  == true) {      var colorNormalEllipses = b.color (b.random (0,255), b.random (0,255), b.random (0,255) );      b.fill (colorNormalEllipses);    }// Ein Verlauf// Die Zufallszahl für die Benennung des Verlaufs, andernfalls überschreiben die nachfolgenden Verläufe die alten und das Bild wird schwarz weißvar randomGradiantNumberEllipse = b.random (1000);    if (panelLookColorEllipses.children[1].value  == true) {      var colorCreateGradiantColorOneEllipses = b.color ( b.random (0,255), b.random (0,255), b.random (0,255) );      var colorCreateGradiantColorTwoEllipses = b.color ( b.random (0,255), b.random (0,255), b.random (0,255) );      b.fill( b.gradient(colorCreateGradiantColorOneEllipses, colorCreateGradiantColorTwoEllipses, "GradiantEllipses" + randomGradiantNumberEllipse) );    }//---------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Rotation / Keine + gleiche Drehung / Kreise// Reaktionen auf die Drehung Radio Buttons    // Keine Drehung    if (panelPositionRotationEllipses.children[0].value  == true) {      // Zufallszahl die entscheidet ob 0, oder 90 Grad gedret wird      var rotationRadiansRandomNumberEllipses = b.random (1,3);      if (rotationRadiansRandomNumberEllipses > 1.5) {        var rotationRadiansEllipses = b.radians ( 90 );        b.rotate ( rotationRadiansEllipses );      }    }    // Einheitliche Drehung    if (panelPositionRotationEllipses.children[1].value  == true) {      var rotationRadiansEllipses = b.radians ( b.random (10,350) );      b.rotate ( rotationRadiansEllipses );    }//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kontur / Kreise// Eine minimale Konturenstärke + der Wert der im Slider eingestellt wurdevar minStrokeWeightEllipses = 0.5;var maxStrokeWeightEllipses = outlineSliderMagicVariableEllipses;// Reaktionen auf die Outline Checkboxen    // Normale Kontur + normale Füllung + zufällige Farbe    if (panelLookOutlineNoFillEllipses.children[0].value  == true && panelLookOutlineNoFillEllipses.children[1].value == false && panelOutlineColorEllipses.children[1].value == true) {         b.stroke (b.random (255), b.random (255), b.random (255) );    }    // NormaleKontur + Keine Füllung + Eine zufällige Farbe    if (panelLookOutlineNoFillEllipses.children[0].value  == true && panelLookOutlineNoFillEllipses.children[1].value == true && panelOutlineColorEllipses.children[1].value == true) {      b.stroke (b.random (255), b.random (255), b.random (255) );    }//-------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kontur / Alle Konturen gleich groß / Kreise// Wenn die Option Outline geklickt wurde, treten diese If Funktionen in Kraft if (panelLookOutlineNoFillEllipses.children[0].value == true) {    // Alle Konturen gleich groß    if (panelOutlineSizeEllipses.children[1].value == true) {      b.strokeWeight ( maxStrokeWeightEllipses );    }}//----------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kreisförmig + Gleiche Größe / Kreise    // Größe Kreise alle nicht Kreisförmig und gleich groß    if (panelPositionQuadratEllipses.children[0].value  == true && panelPositionSameSizeEllipses.children[1].value  == true) {        // Zufallszahl welche Seite größer ist als die andere, je nach dem wird die eine zufällig und die andere mit maxSizeSliderMagicVariabelEllipses ausgestattet oder umgekehrt        var noSquereRandomNumberEllipses = b.random (0,3);        if (noSquereRandomNumberEllipses < 1.5) {            var theSizeWidthEllipses = maxSizeSliderMagicVariabelEllipses;            var theSizeHeightEllipses = b.random ( 5, maxSizeSliderMagicVariabelEllipses );        }             else {               var theSizeWidthEllipses = b.random ( 5, maxSizeSliderMagicVariabelEllipses );               var theSizeHeightEllipses = maxSizeSliderMagicVariabelEllipses;            }        }    // Größe Kreisförmig und alle gleich groß    if (panelPositionQuadratEllipses.children[1].value  == true && panelPositionSameSizeEllipses.children[1].value  == true) {      var theSizeWidthEllipses = maxSizeSliderMagicVariabelEllipses;      var theSizeHeightEllipses = maxSizeSliderMagicVariabelEllipses;    }//--------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Position / Raster / Kreise// Wenn ein Raster gewählt wurde// ################################################################################################################################################################################ DIE If ein Raster Funktion beginnt if (panelPositionRasterEllipses.children[0].value == true) {// ######################################################################################################################################################################### DIE If ein Raster Funktion beginnt // Damit ist das Raster zentriert          var center = true;          // Das rundet das Slider Ergebniss auf eine gerade Zahl          if (countSliderMagicVariableEllipses&2 != 0) {            countSliderMagicVariableEllipses++          }          // Falls 1 Objekt ausgegeben wird, damit mindestens 2 Dinge erscheinen            if (countSliderMagicVariableEllipses == 1) {              var xCellsEllipses = 1;              var yCellsRectanlges = 1;              }                  else {                  var xCellsEllipses = countSliderMagicVariableEllipses;                  var yCellsRectanlges = countSliderMagicVariableEllipses;                  }            // Teilung der Zellen            var cellWidthRasterEllipses = b.width / xCellsEllipses;            var cellHeightRasterEllipses = b.height / yCellsRectanlges;// ##################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT            for( var forYEllipses = 0; forYEllipses < yCellsRectanlges; forYEllipses++) {               for( var forXEllipses = 0; forXEllipses < xCellsEllipses; forXEllipses++) {// ##################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT//----------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kreisförmig + unterschiedlich Groß / Kreise    // Größe alle Kreisförmig und unterschiedlich groß    if (panelPositionQuadratEllipses.children[1].value  == true && panelPositionSameSizeEllipses.children[0].value  == true) {      // Die Quadratgröße wird jedesmal neu ausgewürfelt      var generalSizeEllipses = b.random ( 5, maxSizeSliderMagicVariabelEllipses);      var theSizeWidthEllipses = generalSizeEllipses;      var theSizeHeightEllipses = generalSizeEllipses;    }//-------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Nicht Kreisförmig + unterschiedlich Groß / Kreise    // Größe alle nicht Kreisförmig und alle unterschiedlich groß    if (panelPositionQuadratEllipses.children[0].value  == true && panelPositionSameSizeEllipses.children[0].value  == true) {            var theSizeWidthEllipses = b.random ( 5, maxSizeSliderMagicVariabelEllipses );            var theSizeHeightEllipses = b.random ( 5, maxSizeSliderMagicVariabelEllipses );    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Alle unterschiedlich / Kreise    // Wenn die Option Outline geklickt wurde, und im nächsten Fenster die Option alle Konturen unterschiedlich groß     if (panelLookOutlineNoFillEllipses.children[0].value == true && panelOutlineSizeEllipses.children[0].value == true) {          b.strokeWeight (b.random (minStrokeWeightEllipses, maxStrokeWeightEllipses) );    }    //------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / Schwarz-Weiß + Bunt / Kreise    // Reaktionen auf die Farben Radio Buttons    // Schwarz-Weiß        if (panelLookColorEllipses.children[2].value  == true) {          var colorGreyRandomNumberEllipses = b.random (minColorGreyEllipses, maxColorGreyEllipses);          var colorGreyEllipses = b.color (colorGreyRandomNumberEllipses, colorGreyRandomNumberEllipses, colorGreyRandomNumberEllipses );          b.fill (colorGreyEllipses);        }    // Bunt        if (panelLookColorEllipses.children[3].value  == true) {          var colorColorfullEllipses = b.color (b.random (0,255), b.random (0,255), b.random (0,255) ); b.fill (colorColorfullEllipses);        }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Rotation / Chaos / Kreise// Reaktionen auf die Drehung Radio Buttons    // Chaotische Drehung    if (panelPositionRotationEllipses.children[2].value  == true) {      var rotationRadiansEllipses = b.radians ( b.random (10,350) );      b.rotate ( rotationRadiansEllipses );    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline Schwarz-Weiß + Keine Füllung / Kreise    // Normale Kontur + keine Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillEllipses.children[0].value  == true && panelLookOutlineNoFillEllipses.children[1].value == true && panelOutlineColorEllipses.children[0].value == true) {          var colorOutlineGreyRandomNumberEllipses = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberEllipses, colorOutlineGreyRandomNumberEllipses, colorOutlineGreyRandomNumberEllipses);    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline Schwarz-Weiß + Füllung / Kreise    // Normale Kontur + keine Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillEllipses.children[0].value  == true && panelLookOutlineNoFillEllipses.children[1].value == false && panelOutlineColorEllipses.children[0].value == true) {          var colorOutlineGreyRandomNumberEllipses = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberEllipses, colorOutlineGreyRandomNumberEllipses, colorOutlineGreyRandomNumberEllipses);    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Keine Füllung / Kreise    // Kontur & Keine Füllung    if (panelLookOutlineNoFillEllipses.children[1].value  == true) {      b.noFill ();    }    // ##################################################################################################################################################################################### DIE Kreise     var theObjektItSelfEllipses = b.ellipse (0, 0, theSizeWidthEllipses, theSizeHeightEllipses );     // Neupositionierung der Kreise für das Raster     b.itemX ( theObjektItSelfEllipses, cellWidthRasterEllipses * forXEllipses + cellWidthRasterEllipses / 2 - b.bounds(theObjektItSelfEllipses).width / 2 );     b.itemY ( theObjektItSelfEllipses, cellHeightRasterEllipses * forYEllipses + cellHeightRasterEllipses / 2 - b.bounds(theObjektItSelfEllipses).height / 2 );    // ##################################################################################################################################################################################### DIE Kreise//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Effekt / BlendModes / Kreise// Reaktionen auf die Transparenz Radio Buttons// Negativ Multiplizieren    if (panelLookEffectsEllipses.children[2].value  == true) {      b.blendMode (theObjektItSelfEllipses, blendModeRadioOneEllipses);    }// Ineinanderkopieren    if (panelLookEffectsEllipses.children[3].value  == true) {      b.blendMode (theObjektItSelfEllipses, blendModeRadioTwoEllipses);    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Transparenz / Aussehen / Kreise// Reaktionen auf die Transparenz Radio Buttons// Keinen Effekt    if (panelLookEffectsEllipses.children[0].value  == true) {    // Nüscht passiert    }// Transparent    if (panelLookEffectsEllipses.children[1].value  == true) {      b.opacity (theObjektItSelfEllipses, b.random (minOpacityEllipses, maxOpacityEllipses) );    }// ##################################################################################################################################################################################### DIE FOR SCHLEIFEN ENDEN          }          }// ##################################################################################################################################################################################### DIE If Raster Funktion Endet}//----------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Position / Kein Raster / Kreise// Wenn kein Raster gewählt wird// ##################################################################################################################################################################################### DIE If kein Raster Funktion beginnt if (panelPositionRasterEllipses.children[1].value == true) {// ##################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT for (var forEllipses = 0; forEllipses < countSliderMagicVariableEllipses; forEllipses ++) {//------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Position / Immer unterschiedlich / Kreise    if (panelPositionRasterEllipses.children[1].value  == true) {      // Für eine Abwechslungsreichere Positionierung      xPositionRectangle = b.random (0 - theSizeWidthEllipses/1.5, b.width + theSizeWidthEllipses/1.5);      yPositionRectangle = b.random (0 - theSizeHeightEllipses/1.2, b.height  + theSizeHeightEllipses/1.5);      // xPositionRectangle = b.random (0, b.width);      // yPositionRectangle = b.random (0, b.height);    }//----------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kreisförmig + unterschiedlich Groß / Kreise    // Größe alle Kreisförmig und unterschiedlich groß    if (panelPositionQuadratEllipses.children[1].value  == true && panelPositionSameSizeEllipses.children[0].value  == true) {      // Die Quadratgröße wird jedesmal neu ausgewürfelt      var generalSizeEllipses = b.random ( 5, maxSizeSliderMagicVariabelEllipses);      var theSizeWidthEllipses = generalSizeEllipses;      var theSizeHeightEllipses = generalSizeEllipses;    }//-------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Nicht Kreisförmig + unterschiedlich Groß / Kreise    // Größe alle nicht Kreisförmig und alle unterschiedlich groß    if (panelPositionQuadratEllipses.children[0].value  == true && panelPositionSameSizeEllipses.children[0].value  == true) {            var theSizeWidthEllipses = b.random ( 5, maxSizeSliderMagicVariabelEllipses );            var theSizeHeightEllipses = b.random ( 5, maxSizeSliderMagicVariabelEllipses );    }//------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Alle unterschiedlich / Kreise    // Wenn die Option Outline geklickt wurde, und im nächsten Fenster die Option alle Konturen unterschiedlich groß     if (panelLookOutlineNoFillEllipses.children[0].value == true && panelOutlineSizeEllipses.children[0].value == true) {          b.strokeWeight (b.random (minStrokeWeightEllipses, maxStrokeWeightEllipses) );    }    //------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / Schwarz-Weiß + Bunt / Kreise    // Reaktionen auf die Farben Radio Buttons    // Schwarz-Weiß        if (panelLookColorEllipses.children[2].value  == true) {          var colorGreyRandomNumberEllipses = b.random (minColorGreyEllipses, maxColorGreyEllipses);          var colorGreyEllipses = b.color (colorGreyRandomNumberEllipses, colorGreyRandomNumberEllipses, colorGreyRandomNumberEllipses );          b.fill (colorGreyEllipses);        }    // Bunt        if (panelLookColorEllipses.children[3].value  == true) {          var colorColorfullEllipses = b.color (b.random (0,255), b.random (0,255), b.random (0,255) ); b.fill (colorColorfullEllipses);        }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Rotation / Chaos / Kreise// Reaktionen auf die Drehung Radio Buttons    // Chaotische Drehung    if (panelPositionRotationEllipses.children[2].value  == true) {      var rotationRadiansEllipses = b.radians ( b.random (10,350) );      b.rotate ( rotationRadiansEllipses );    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline Schwarz-Weiß + Keine Füllung / Kreise    // Normale Kontur + keine Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillEllipses.children[0].value  == true && panelLookOutlineNoFillEllipses.children[1].value == true && panelOutlineColorEllipses.children[0].value == true) {          var colorOutlineGreyRandomNumberEllipses = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberEllipses, colorOutlineGreyRandomNumberEllipses, colorOutlineGreyRandomNumberEllipses);    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline Schwarz-Weiß + Füllung / Kreise    // Normale Kontur + keine Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillEllipses.children[0].value  == true && panelLookOutlineNoFillEllipses.children[1].value == false && panelOutlineColorEllipses.children[0].value == true) {          var colorOutlineGreyRandomNumberEllipses = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberEllipses, colorOutlineGreyRandomNumberEllipses, colorOutlineGreyRandomNumberEllipses);    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Keine Füllung / Kreise    // Kontur & Keine Füllung    if (panelLookOutlineNoFillEllipses.children[1].value  == true) {      b.noFill ();    }    // ##################################################################################################################################################################################### DIE Kreise     var theObjektItSelfEllipses = b.ellipse (b.random (0, b.width), b.random(0, b.height), theSizeWidthEllipses, theSizeHeightEllipses );    // ##################################################################################################################################################################################### DIE Kreise//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Effekt / BlendModes / Kreise// Reaktionen auf die Transparenz Radio Buttons// Negativ Multiplizieren    if (panelLookEffectsEllipses.children[2].value  == true) {      b.blendMode (theObjektItSelfEllipses, blendModeRadioOneEllipses);    }// Ineinanderkopieren    if (panelLookEffectsEllipses.children[3].value  == true) {      b.blendMode (theObjektItSelfEllipses, blendModeRadioTwoEllipses);    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Transparenz / Aussehen / Kreise// Reaktionen auf die Transparenz Radio Buttons// Keinen Effekt    if (panelLookEffectsEllipses.children[0].value  == true) {    // Nüscht passiert    }// Transparent    if (panelLookEffectsEllipses.children[1].value  == true) {      b.opacity (theObjektItSelfEllipses, b.random (minOpacityEllipses, maxOpacityEllipses) );    }// ##################################################################################################################################################################################### DIE FOR SCHLEIFE ENDET}// ########################################################################################################################################################################### DIE If Kein Raster Funktion Endet}// Setzt alle Transformationseinstellungen wieder auf 0b.resetMatrix ();// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Die If Funktion beginnt / Kreise// Die if Funktion der Kreise Endet hier}// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Die If Funktion beginnt / Dreiecke// Die If Funktion der Dreiecke beginnt hierif (panelForms.children[2].value == true) {b.doc().layoutWindows[0].transformReferencePoint = AnchorPoint.CENTER_ANCHOR;b.resetMatrix ();// Units werden auf Pixel gesetzt, da ich lange Zeit damit gearbeitet habe ohne es zu merken.b.units (b.PX);var minOpacityTriangles =  2;var maxOpacityTriangles = 100;var minColorGreyTriangles = 20;var maxColorGreyTriangles = 240;// Variabeln für die Anzahl je nach dem wie die Größe eingestellt wirdvar maxCountSliderValueSizeIsBiggerThan350Triangles = 10;var maxCountSliderValueSizeIsBiggerThan300Triangles = 20;var maxCountSliderValueSizeIsBiggerThan250Triangles = 30;var maxCountSliderValueSizeIsBiggerThan200Triangles = 50;var maxCountSliderValueSizeIsBiggerThan150Triangles = 90;var maxCountSliderValueSizeIsBiggerThan100Triangles = 110;var maxCountSliderValueSizeIsBiggerThan50Triangles  = 300;// Will man diese Größe verändern muss man dies auf im Max Wert des Sliders tunvar maxSizeRasterTriangles  = 70;var maxSizeNoRasterTriangles  = 400;// Die Anzahl Abstufungen abhängig von der Größevar maxCountRasterSizeIsBiggerThan60Triangles  = 8;var maxCountRasterSizeIsBiggerThan50Triangles  = 10;var maxCountRasterSizeIsBiggerThan40Triangles  = 15;var maxCountRasterSizeIsBiggerThan30Triangles  = 20;var maxCountRasterSizeIsBiggerThan15Triangles  = 25;var maxCountRasterSizeIsBiggerThan0Triangles  = 30;// Die Effektevar blendModeRadioOneTriangles = BlendMode.SCREEN;var blendModeRadioTwoTriangles = BlendMode.OVERLAY;//========================================================================================================================================================= Fenster / Wie sollen die Dreiecke aussehen / Dreiecke// Neues Fenster mit Statischem Textvar windowLookTriangles = new Window ("dialog", "", undefined, {closeButton: false} );windowLookTriangles.alignChildren = "left";windowLookTriangles.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Aussehen.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Farbe wählen / DreieckewindowLookTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier die Farbe deiner Dreiecke');    // Farben Panel    var panelLookColorTriangles = windowLookTriangles.add ("panel");    panelLookColorTriangles.alignChildren = "left";        // Die Radio Buttons der Farben        panelLookColorTriangles.add ("radiobutton", undefined, "Eine Farbe");        panelLookColorTriangles.add ("radiobutton", undefined, "Ein Verlauf");        panelLookColorTriangles.add ("radiobutton", undefined, "Schwarz-Weiß");        panelLookColorTriangles.add ("radiobutton", [0,0,315,20], "Bunt");        // Setzt zufällig einen der panelLookColorTriangles Panels auf true damit etwas ausgewählt ist          var panelLookColorRandomAktiveTriangles = b.round ( b.random (0, 2) );          panelLookColorTriangles.children[panelLookColorRandomAktiveTriangles].value = true;//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Effekte wählen / DreieckewindowLookTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier einen Effekt');    // Effekte Panel    var panelLookEffectsTriangles = windowLookTriangles.add ("panel");    panelLookEffectsTriangles.alignChildren = "left";        // Die Radio Buttons der Effekte        panelLookEffectsTriangles.add ("radiobutton", undefined, "Keinen Effekt");        panelLookEffectsTriangles.add ("radiobutton", undefined, "Transparenz");        panelLookEffectsTriangles.add ("radiobutton", undefined, "Negativ Multiplizieren");        panelLookEffectsTriangles.add ("radiobutton", [0,0,315,20], "Inneinanderkopieren");        // Setzt zufällig einen der panelLookEffectsTriangles Panels auf true damit etwas ausgewählt ist        var panelLookEffectsRandomAktiveTriangles = b.round ( b.random (0, 3) );        panelLookEffectsTriangles.children[panelLookEffectsRandomAktiveTriangles].value = true;//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Kontur keine Füllung / DreieckewindowLookTriangles.add ('statictext', [0,-10,350,20], '->  Wähle hier zwischen Kontur und oder keine Füllung');    // Kontur / Füllung Panel    var panelLookOutlineNoFillTriangles = windowLookTriangles.add ("panel");    panelLookOutlineNoFillTriangles.alignChildren = "left";        panelLookOutlineNoFillTriangles.add ("checkbox", undefined, "Kontur");        panelLookOutlineNoFillTriangles.add ("checkbox", [0,0,315,20], "Keine Füllung");        // Setzt zufällig einen, beide oder keinen der panelLookEffectsTriangles Checkboxen auf true damit etwas ausgewählt ist        var panelLookOutlineNoFillRandomAktiveTriangles = b.round ( b.random (0, 6) );        if (panelLookOutlineNoFillRandomAktiveTriangles == 0) {panelLookOutlineNoFillTriangles.children[0].value = true;}        if (panelLookOutlineNoFillRandomAktiveTriangles == 1) {panelLookOutlineNoFillTriangles.children[0].value = true && panelLookOutlineNoFillTriangles.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kontur keine Füllung / Dreiecke    // Das Verhalten der beiden Buttons Kontur & Fülliung zueinander    panelLookOutlineNoFillTriangles.children[1].onClick = function(){      panelLookOutlineNoFillTriangles.children[0].value = true;    }    panelLookOutlineNoFillTriangles.children[0].onClick = function(){      panelLookOutlineNoFillTriangles.children[1].value = false;    }//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Aussehen / Dreiecke    var buttonLookWeiterTriangles = windowLookTriangles.add ("button", [0,0,350,40], "Weiter", {name:"ok"} );    var buttonLookZufallTriangles = windowLookTriangles.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall + Panels / Aussehen / Dreiecke    // Reaktion auf Zufall Button klicken    with(windowLookTriangles)        buttonLookZufallTriangles.onClick = function(buttonLookZufallTrianglesFunction){             // Alle radio Boxen deaktivieren             for (var i = 0; i < 4; i++) {                panelLookColorTriangles.children[i].value = false;             }             // Zufallsgenerator für die Farben Radio Boxen                  var randomNumberColorRadioButtonsTriangles = b.floor (b.random (0,3) );                  panelLookColorTriangles.children[randomNumberColorRadioButtonsTriangles].value = true;             // Zufallsgenerator für die Kontur Checkboxen                // Zufalls Zahl ob es generell eine Outline gibt                 var randomNumberEffectsGeneralTriangles = (b.random (0,3) );                 if (randomNumberEffectsGeneralTriangles > 1.5) {                       // Zufalls Zahl was für eine Outline                       var randomNumberOutlineCheckboxesTriangles = b.floor (b.random (0,3) );                       if (randomNumberOutlineCheckboxesTriangles == 0) { panelLookOutlineNoFillTriangles.children[0].value = true; }                       if (randomNumberOutlineCheckboxesTriangles == 1) { panelLookOutlineNoFillTriangles.children[0].value = true; panelLookOutlineNoFillTriangles.children[1].value = true;  }                       if (randomNumberOutlineCheckboxesTriangles == 2) { panelLookOutlineNoFillTriangles.children[0].value = false; panelLookOutlineNoFillTriangles.children[1].value = false; }                  }                    else {                        panelLookOutlineNoFillTriangles.children[0].value = false;                        panelLookOutlineNoFillTriangles.children[1].value = false;                         }             // Zufallsgenerator für die Transparenz Radio Boxen                      // Zufall was für ein Transparenzeffekt entstehen soll                      var randomNumberTransparencyRadioButtonsTriangles = b.floor (b.random (0,4) );                      panelLookEffectsTriangles.children[randomNumberTransparencyRadioButtonsTriangles].value = true;         }windowLookTriangles.show();// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Kontur Aussehen / Dreiecke if (panelLookOutlineNoFillTriangles.children[0].value == true) {// Neues Fenster mit Statischem Textvar windowOutlineTriangles = new Window ("dialog", "", undefined, {closeButton: false} );windowOutlineTriangles.alignChildren = "left";windowOutlineTriangles.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Kontur.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Radiobuttons / Kontur Aussehen / DreieckewindowOutlineTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier ob alle Konturen gleich groß sein sollen');var panelOutlineSizeTriangles = windowOutlineTriangles.add ("panel")panelOutlineSizeTriangles.alignChildren = "left";        panelOutlineSizeTriangles.add ("radiobutton", undefined, "Alle unterschiedlich groß");        panelOutlineSizeTriangles.add ("radiobutton", [0,0,315,20], "Alle gleich groß");        // Setzt zufällig einen der panelOutlineSizeTriangles Radiobuttons auf true damit etwas ausgewählt ist        var panelOutlineSizeRandomAktiveTriangles = b.round ( b.random (0, 1) );        if (panelOutlineSizeRandomAktiveTriangles == 0) {panelOutlineSizeTriangles.children[0].value = true;}        if (panelOutlineSizeRandomAktiveTriangles == 1) {panelOutlineSizeTriangles.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Radiobuttons / Kontur Aussehen / DreieckewindowOutlineTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Konturen Farbe bekommen sollen');var panelOutlineColorTriangles = windowOutlineTriangles.add ("panel")panelOutlineColorTriangles.alignChildren = "left";        panelOutlineColorTriangles.add ("radiobutton", undefined, "Schwarz-Weiß");        panelOutlineColorTriangles.add ("radiobutton", [0,0,315,20], "Eine zufällige Farbe");        // Setzt zufällig einen der panelOutlineColorTriangles Radiobuttons auf true damit etwas ausgewählt ist        var panelOutlineColorRandomAktiveTriangles = b.round ( b.random (0, 2) );        if (panelOutlineColorRandomAktiveTriangles == 0 || panelOutlineColorRandomAktiveTriangles == 1) {panelOutlineColorTriangles.children[1].value = true;}        if (panelOutlineColorRandomAktiveTriangles == 2) {panelOutlineColorTriangles.children[0].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Kontur Aussehen / DreieckewindowOutlineTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier die Stärke der Konturen');var panelOutlineSliderTriangles = windowOutlineTriangles.add ("panel")panelOutlineSliderTriangles.alignChildren = "left";// Das Textfeld des Slidersvar edittextOutlineSliderTriangles = panelOutlineSliderTriangles.add ('edittext {text: 10, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// Der Slider ansichvar sliderOutlineSliderTriangles = panelOutlineSliderTriangles.add ('slider {minvalue: 1, maxvalue: 100, value: 10 }',[0,0,315,20]);// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderOutlineRandomValueTriangles = b.round ( b.random (1,100));edittextOutlineSliderTriangles.text = sliderOutlineRandomValueTriangles;sliderOutlineSliderTriangles.value = sliderOutlineRandomValueTriangles;// Reaktionen auf die beiden Objekte, Slider & TextfeldsliderOutlineSliderTriangles.onChanging = function () {edittextOutlineSliderTriangles.text = b.round (sliderOutlineSliderTriangles.value) };edittextOutlineSliderTriangles.onChanging = function () {sliderOutlineSliderTriangles.value = Number (edittextOutlineSliderTriangles.text) };//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Kontur Aussehen / Dreieckevar buttonOutlineWeiterTriangles = windowOutlineTriangles.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonOutlineZufallTriangles = windowOutlineTriangles.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Kontur Aussehen / Dreiecke    // Reaktion auf Zufall Button klicken    with(windowOutlineTriangles)        buttonOutlineZufallTriangles.onClick = function(buttonOutlineZufallTrianglesFunction){             for (var i = 0; i < 2; i++) {            panelOutlineSizeTriangles.children[i].value = false;            }             // Zufallsgenerator für die unterschiedliche Konturgröße Radio Buttons                  var randomNumberDifferentOutlineTriangles = b.floor (b.random (0,2) );                  panelOutlineSizeTriangles.children[randomNumberDifferentOutlineTriangles].value = true;             // Zufallsgenerator für die Farbe der Kontur Radio Buttons                  var randomNumberColorTriangles = b.floor (b.random (0,2) );                  panelOutlineColorTriangles.children[randomNumberColorTriangles].value = true;             // Zufallsgenerator für den Größe Slider                  var randomNumberCountHowBigOutlineTriangles = b.round (b.random (1,100) ) ;                  sliderOutlineSliderTriangles.value = randomNumberCountHowBigOutlineTriangles;                  edittextOutlineSliderTriangles.text = randomNumberCountHowBigOutlineTriangles;            }windowOutlineTriangles.show();// Variable die ich einbauen musste weil edittextOutlineSliderTriangles.text weiter unten irgendwie nicht ausgelesen werden konntevar outlineSliderMagicVariableTriangles =  edittextOutlineSliderTriangles.text ;}// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Position und Größe / Dreiecke// Neues Fenster mit Statischem Textvar windowPositionSizeTriangles = new Window ("dialog", "Wo und wie sollen deine Dreiecke plaziert werden?", undefined, {closeButton: false} );    windowPositionSizeTriangles.alignChildren = "left";windowPositionSizeTriangles.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Platzierung.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Drehung / DreieckewindowPositionSizeTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Dreiecke gedreht werden sollen');var panelPositionRotationTriangles = windowPositionSizeTriangles.add ("panel")panelPositionRotationTriangles.alignChildren = "left";    // Radio Buttons Drehung    panelPositionRotationTriangles.add ("radiobutton", undefined, "Keine Drehung");    panelPositionRotationTriangles.add ("radiobutton", undefined, "Einheitliche Drehung");    panelPositionRotationTriangles.add ("radiobutton", [0,0,315,20], "Unterschiedliche Drehung");    // Setzt zufällig einen der panelPositionRotationTriangles Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionRotationRandomAktiveTriangles = b.round ( b.random (0, 2) );    if (panelPositionRotationRandomAktiveTriangles == 0) {panelPositionRotationTriangles.children[0].value = true;}    if (panelPositionRotationRandomAktiveTriangles == 1) {panelPositionRotationTriangles.children[1].value = true;}    if (panelPositionRotationRandomAktiveTriangles == 2) {panelPositionRotationTriangles.children[2].value = true;}//---------------------------------------------------------------------------------------------------------------------------------------------- Panel / Positionierung / Raster oder kein Raster / DreieckewindowPositionSizeTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier die Positionierung deiner Dreiecke');var panelPositionRasterTriangles = windowPositionSizeTriangles.add ("panel")panelPositionRasterTriangles.alignChildren = "left";    // Radio Buttons Positionierung    panelPositionRasterTriangles.add ("radiobutton", undefined, "Raster");    panelPositionRasterTriangles.add ("radiobutton", [0,0,315,20], "Zufällige Position");    // Setzt zufällig einen der panelOutlineSizeTriangles Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionRasterRandomAktiveTriangles = b.round ( b.random (0, 1) );    if (panelPositionRasterRandomAktiveTriangles == 0) {panelPositionRasterTriangles.children[0].value = true;}    if (panelPositionRasterRandomAktiveTriangles == 1) {panelPositionRasterTriangles.children[1].value = true;}//----------------------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Alle gleich groß / DreieckewindowPositionSizeTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Dreiecke alle gleich groß sein sollen');var panelPositionSameSizeTriangles = windowPositionSizeTriangles.add ("panel")panelPositionSameSizeTriangles.alignChildren = "left";    // Radio Buttons Alle gleich groß    panelPositionSameSizeTriangles.add ("radiobutton", undefined, "Alle unterschiedlich groß");    panelPositionSameSizeTriangles.add ("radiobutton", [0,0,315,20], "Alle gleich groß");    // Setzt zufällig einen der panelOutlineSizeTriangles Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionSameSizeRandomAktiveTriangles = b.round ( b.random (0, 1) );    if (panelPositionSameSizeRandomAktiveTriangles == 0) {panelPositionSameSizeTriangles.children[0].value = true;}    if (panelPositionSameSizeRandomAktiveTriangles == 1) {panelPositionSameSizeTriangles.children[1].value = true;}//-------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Spitzwinkelig oder gleichseitige Form / DreieckewindowPositionSizeTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier die Grundform deiner Dreiecke');var panelPositionQuadratTriangles = windowPositionSizeTriangles.add ("panel")panelPositionQuadratTriangles.alignChildren = "left";    // Checkboxen Spitzwinkelig oder Gleichseitige Form    panelPositionQuadratTriangles.add ("radiobutton", undefined, "Spitzwinkelig");    panelPositionQuadratTriangles.add ("radiobutton", [0,0,315,20], "Gleichseitig");    // Setzt zufällig einen der panelOutlineSizeTriangles Radiobuttons auf true damit etwas ausgewählt ist    var panelPositionQuadratRandomAktiveTriangles = b.round ( b.random (0, 1) );    if (panelPositionQuadratRandomAktiveTriangles == 0) {panelPositionQuadratTriangles.children[0].value = true;}    if (panelPositionQuadratRandomAktiveTriangles == 1) {panelPositionQuadratTriangles.children[1].value = true;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Plazierung / Dreiecke// Die beiden Buttonsvar buttonPositionWeiterTriangles = windowPositionSizeTriangles.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonPositionZufallTriangles = windowPositionSizeTriangles.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall + Panels / Plazierung / Dreiecke    // Reaktion auf Zufall Button klicken    with(windowPositionSizeTriangles)        buttonPositionZufallTriangles.onClick = function(buttonPositionZufallTrianglesFunction){             // Alle Radiobuttons und Checkboxen deaktivieren             for (var i = 0; i < 2; i++) {                panelPositionRotationTriangles.children[i].value = false;                panelPositionRasterTriangles.children[i].value = false;                panelPositionSameSizeTriangles.children[0].value = false;                panelPositionQuadratTriangles.children[i].value = false;             // Zufallsgenerator für die Rotation Radio Buttons                  var randomNumberPositionRotationTriangles = b.floor (b.random (0,3) );                  panelPositionRotationTriangles.children[randomNumberPositionRotationTriangles].value = true;             // Zufallsgenerator für die Position Radio Buttons                  var randomNumberPositionPositionTriangles = b.floor (b.random (0,2) );                  panelPositionRasterTriangles.children[randomNumberPositionPositionTriangles].value = true;             // Zufallsgenerator für die Alle gleich groß Checkbox                  var randomNumberPositionSameSizeTriangles = b.floor (b.random (0,2) );                  panelPositionSameSizeTriangles.children[randomNumberPositionSameSizeTriangles].value = true;             // Zufallsgenerator für die Grundform Radio Buttons                 var randomNumberPositionQuadratTriangles = b.floor (b.random (0,2) );                 panelPositionQuadratTriangles.children[randomNumberPositionQuadratTriangles].value = true;            }        }windowPositionSizeTriangles.show();// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Maximale Größe / Dreiecke// Neues Fenster mit Statischem Textvar windowMaxSizeTriangles = new Window ("dialog", "", undefined, {closeButton: false} );    windowMaxSizeTriangles.alignChildren = "left";windowMaxSizeTriangles.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Grösse.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Maximale Größe / DreieckewindowMaxSizeTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier die maximale Größe deiner Dreiecke');var panelSliderMaxSizeTriangles = windowMaxSizeTriangles.add ("panel")panelSliderMaxSizeTriangles.alignChildren = "left";// Das Textfeld des Slidersvar sliderTextMaxSizeTriangles = panelSliderMaxSizeTriangles.add ('edittext {text: 20, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// Der Slider Größe für Raster Anordnungif (panelPositionRasterTriangles.children[0].value == true) {var sliderSliderMaxSizeTriangles = panelSliderMaxSizeTriangles.add ('slider {minvalue: 5, maxvalue: 70, value: 20}',[0,0,315,20]);// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderMaxSizeRandomValueTriangles = b.round ( b.random (5,maxSizeRasterTriangles));}// Der Slider Größe für keine Raster Anordnungif (panelPositionRasterTriangles.children[1].value == true) {var sliderSliderMaxSizeTriangles = panelSliderMaxSizeTriangles.add ('slider {minvalue: 5, maxvalue: 400, value: 20}',[0,0,315,20]);// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderMaxSizeRandomValueTriangles = b.round ( b.random (5,maxSizeNoRasterTriangles));}sliderTextMaxSizeTriangles.text = sliderMaxSizeRandomValueTriangles;sliderSliderMaxSizeTriangles.value = sliderMaxSizeRandomValueTriangles;// Reaktionen auf die beiden Objekte, Slider & TextfeldsliderSliderMaxSizeTriangles.onChanging = function () {sliderTextMaxSizeTriangles.text = b.round (sliderSliderMaxSizeTriangles.value) };sliderTextMaxSizeTriangles.onChanging = function () {sliderSliderMaxSizeTriangles.value = Number (sliderTextMaxSizeTriangles.text) };//--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter / Maxiamale Größe / Dreiecke// Die beiden Buttonsvar buttonMaxSizeWeiterTriangles = windowMaxSizeTriangles.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonMaxSizeZufallTriangles = windowMaxSizeTriangles.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Maxiamale Größe / Dreiecke    // Reaktion auf Zufall Button klicken    with(windowMaxSizeTriangles)        buttonMaxSizeZufallTriangles.onClick = function(buttonMaxSizeZufallTrianglesFunction){// Wenn Raster ausgewählt wurdeif (panelPositionRasterTriangles.children[0].value == true) {             // Zufallsgenerator für den Größe Slider                  var randomNumberMaxSizeTriangles = b.round (b.random (5,maxSizeRasterTriangles) );                  sliderSliderMaxSizeTriangles.value = randomNumberMaxSizeTriangles;                  sliderTextMaxSizeTriangles.text = randomNumberMaxSizeTriangles;            }// Wenn kein Raster ausgewählt wurdeif (panelPositionRasterTriangles.children[1].value == true) {             // Zufallsgenerator für den Größe Slider                  var randomNumberMaxSizeTriangles = b.round (b.random (5,maxSizeNoRasterTriangles) );                  sliderSliderMaxSizeTriangles.value = randomNumberMaxSizeTriangles;                  sliderTextMaxSizeTriangles.text = randomNumberMaxSizeTriangles;            }}windowMaxSizeTriangles.show();// Variabel sicherheitshalber eingebaut, da es schoneinmal einen Fehler deswegen gabvar maxSizeSliderMagicVariabelTriangles = b.round (sliderTextMaxSizeTriangles.text);// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Anzahl / Dreiecke// Neues Fenster mit Statischem Textvar windowCountTriangles = new Window ("dialog", "", undefined, {closeButton: false} );//windowCountTriangles.alignChildren = "left";windowCountTriangles.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Anzahl.png"));//--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Anzahl / Dreiecke// Wenn kein Raster erstellt wirdif (panelPositionRasterTriangles.children[1].value == true) {    windowCountTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier wie viele Dreiecke du plazieren möchtest');}// Wenn Raster erstellt wirdif (panelPositionRasterTriangles.children[0].value == true) {    windowCountTriangles.add ('statictext', [0,0,350,20], '->  Wähle hier die Anzahl der Zeilen und Spalten des Rasters');}var panelCountSliderTriangles = windowCountTriangles.add ("panel")panelCountSliderTriangles.alignChildren = "left";// Anzeige wenn ein Raster ausgewählt wurde// Das Textfeld des Slidersvar edittextCountSliderTriangles = panelCountSliderTriangles.add ('edittext {text: 10, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// Der Slider ansichvar sliderCountSliderTriangles = panelCountSliderTriangles.add ('slider {minvalue: 1, maxvalue: 300, value: 10}',[0,0,315,20]);// Anzahlanpassung bei einem Rasterif (panelPositionRasterTriangles.children[0].value == true) {// Variabel für die Anzahl die durch die Größe beeinflusst wird  if (maxSizeSliderMagicVariabelTriangles >60 ) {sliderCountSliderTriangles.maxvalue = maxCountRasterSizeIsBiggerThan60Triangles};  if (maxSizeSliderMagicVariabelTriangles >50 && maxSizeSliderMagicVariabelTriangles <=60) {sliderCountSliderTriangles.maxvalue = maxCountRasterSizeIsBiggerThan50Triangles};  if (maxSizeSliderMagicVariabelTriangles >40 && maxSizeSliderMagicVariabelTriangles <=50) {sliderCountSliderTriangles.maxvalue = maxCountRasterSizeIsBiggerThan40Triangles};  if (maxSizeSliderMagicVariabelTriangles >30 && maxSizeSliderMagicVariabelTriangles <=40) {sliderCountSliderTriangles.maxvalue = maxCountRasterSizeIsBiggerThan30Triangles};  if (maxSizeSliderMagicVariabelTriangles >15 && maxSizeSliderMagicVariabelTriangles <=30) {sliderCountSliderTriangles.maxvalue = maxCountRasterSizeIsBiggerThan15Triangles};  if (maxSizeSliderMagicVariabelTriangles >0 && maxSizeSliderMagicVariabelTriangles  <=15)  {sliderCountSliderTriangles.maxvalue = maxCountRasterSizeIsBiggerThan0Triangles};}// Anzahlanpassung bei keinem Rasterif (panelPositionRasterTriangles.children[1].value == true) {// Variabel für die Anzahl die durch die Größe beeinflusst wird  if (maxSizeSliderMagicVariabelTriangles >350 ) {sliderCountSliderTriangles.maxvalue = maxCountSliderValueSizeIsBiggerThan350Triangles};  if (maxSizeSliderMagicVariabelTriangles >300 && maxSizeSliderMagicVariabelTriangles <=350) {sliderCountSliderTriangles.maxvalue = maxCountSliderValueSizeIsBiggerThan300Triangles};  if (maxSizeSliderMagicVariabelTriangles >250 && maxSizeSliderMagicVariabelTriangles <=300) {sliderCountSliderTriangles.maxvalue = maxCountSliderValueSizeIsBiggerThan250Triangles};  if (maxSizeSliderMagicVariabelTriangles >200 && maxSizeSliderMagicVariabelTriangles <=250) {sliderCountSliderTriangles.maxvalue = maxCountSliderValueSizeIsBiggerThan200Triangles};  if (maxSizeSliderMagicVariabelTriangles >150 && maxSizeSliderMagicVariabelTriangles <=200) {sliderCountSliderTriangles.maxvalue = maxCountSliderValueSizeIsBiggerThan150Triangles};  if (maxSizeSliderMagicVariabelTriangles >100 && maxSizeSliderMagicVariabelTriangles <=150) {sliderCountSliderTriangles.maxvalue = maxCountSliderValueSizeIsBiggerThan100Triangles};  if (maxSizeSliderMagicVariabelTriangles >50 && maxSizeSliderMagicVariabelTriangles  <=100)  {sliderCountSliderTriangles.maxvalue = maxCountSliderValueSizeIsBiggerThan50Triangles};}// Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.var sliderCountRandomValueRectanles = b.round ( b.random (5,sliderCountSliderTriangles.maxvalue));edittextCountSliderTriangles.text = sliderCountRandomValueRectanles;sliderCountSliderTriangles.value = sliderCountRandomValueRectanles;// Reaktionen auf die beiden Objekte, Slider & TextfeldsliderCountSliderTriangles.onChanging = function () {edittextCountSliderTriangles.text = b.round (sliderCountSliderTriangles.value) };edittextCountSliderTriangles.onChanging = function () {sliderCountSliderTriangles.value = Number (edittextCountSliderTriangles.text) };//------------------------------------------------------------------------------------------------------------------------------------------------------ Buttons / Weiter Zufall / Anzahl / Dreieckevar buttonCountWeiterTriangles = windowCountTriangles.add ("button", [0,0,350,40], "Weiter", {name:"ok"});var buttonCountZufallTriangles = windowCountTriangles.add ("button", [0,0,350,40], "Zufall");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Anzahl / Dreiecke    // Reaktion auf Zufall Button klicken    with(windowCountTriangles)        buttonCountZufallTriangles.onClick = function(buttonCountZufallTrianglesFunction){             // Zufallsgenerator für den Größe Slider                  var randomNumberCountHowMuchTriangles = b.round (b.random (2,sliderCountSliderTriangles.maxvalue) );                  sliderCountSliderTriangles.value = randomNumberCountHowMuchTriangles;                  edittextCountSliderTriangles.text = randomNumberCountHowMuchTriangles;            }windowCountTriangles.show();// Der Wert des Textfeldes des Sliders wird in eine Variabel umgewandeltcountSliderMagicVariableTriangles = edittextCountSliderTriangles.text;// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################b.noStroke ();//------------------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Position / Raster / Dreiecke// Wenn ein Raster gewählt wurde// ########################################################################################################################################################################## DIE If ein Raster Funktion beginnt if (panelPositionRasterTriangles.children[0].value == true) {// ########################################################################################################################################################################## DIE If ein Raster Funktion beginnt // Damit ist das Raster zentriert          var center = true;          // Das rundet das Slider Ergebniss auf eine gerade Zahl          if (countSliderMagicVariableTriangles&2 != 0) {            countSliderMagicVariableTriangles++          }          // Falls 1 Objekt ausgegeben wird, damit mindestens 2 Dinge erscheinen            if (countSliderMagicVariableTriangles == 1) {              var xCellsTriangles = 1;              var yCellsRectanlges = 1;              }                  else {                  var xCellsTriangles = countSliderMagicVariableTriangles;                  var yCellsRectanlges = countSliderMagicVariableTriangles;                  }            // Teilung der Zellen            var cellWidthRasterTriangles = b.width / xCellsTriangles;            var cellHeightRasterTriangles = b.height / yCellsRectanlges;  // Zufallszahl in welche Seite später mit triangleSizeNoRotation ersetzt wird  var randomNumberSpitzRotate = b.round (b.random (1) )  //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / 1 Farbe + 1 Verlauf / Dreiecke  // Reaktionen auf die Farben Radio Buttons  // Eine Farbe      if (panelLookColorTriangles.children[0].value  == true) {        var colorNormalTriangles = b.color (b.random (0,255), b.random (0,255), b.random (0,255) );        b.fill (colorNormalTriangles);      }  // Ein Verlauf  // Die Zufallszahl für die Benennung des Verlaufs, andernfalls überschreiben die nachfolgenden Verläufe die alten und das Bild wird schwarz weiß  var randomGradiantNumberTriangles = b.random (1000);      if (panelLookColorTriangles.children[1].value  == true) {        var colorCreateGradiantColorOneTriangles = b.color ( b.random (0,255), b.random (0,255), b.random (0,255) );        var colorCreateGradiantColorTwoTriangles = b.color ( b.random (0,255), b.random (0,255), b.random (0,255) );        b.fill( b.gradient(colorCreateGradiantColorOneTriangles, colorCreateGradiantColorTwoTriangles, "GradientTriangles" + randomGradiantNumberTriangles) );        // Random was für ein Verlauf        var randomNumberGradientRectangles = b.round (b.random (1));        if (randomNumberGradientRectangles==0){            b.gradientMode( b.LINEAR );        }        if (randomNumberGradientRectangles==1){            b.gradientMode( b.RADIAL );        }  }  //----------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Gleichseitig + Geich groß / Dreiecke  if (panelPositionQuadratTriangles.children[1].value == true && panelPositionSameSizeTriangles.children[1].value == true ) {  // Anpassung der Größe da die Dreiecke sonst zu klein wärenn  var triangleSize = maxSizeSliderMagicVariabelTriangles*4;  }  //------------------------------------------------------------------------------------------------------ Reaktionen / Spitzwinkelig + gleich groß + einheitliche oder unterschiedliche Drehung / Dreiecke  if ( (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[1].value == true) ||       (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[2].value == true)  ) {            // Anpassung der Größe da die Dreiecke sonst zu klein wären            var triangleSize = maxSizeSliderMagicVariabelTriangles*4;            // Die Koordinaten der Dreiecke            var xPos1Triangles = b.width;            var yPos1Triangles = b.height;            var xPos2Triangles = b.random (xPos1Triangles+triangleSize/2, xPos1Triangles+triangleSize);            var yPos2Triangles = b.random (yPos1Triangles+triangleSize/2, yPos1Triangles+triangleSize/2+triangleSize);            var xPos3Triangles = b.random (xPos2Triangles, xPos2Triangles - triangleSize);            var yPos3Triangles = yPos2Triangles - triangleSize;  }  //------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Spitzwinkelig + gleich groß + keine Drehung / Dreiecke  if (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[0].value == true) {      // Anpassung der Größe da die Dreiecke sonst zu klein wärenn      var triangleSize = maxSizeSliderMagicVariabelTriangles*4;      // Wert zum nachträglichen verändern der Dreiecke, ist notwendig damit sie spitzwinkelig bleiben und trotzdem die angegebene Größe haben      var triangleSizeNoRotation = b.random (0, triangleSize/2);      // Die Koordinaten der Dreiecke      var xPos1Triangles = b.random (b.width);      var yPos1Triangles = b.random (b.height);      var xPos2Triangles = b.random (xPos1Triangles +triangleSize/2, xPos1Triangles+triangleSize);      var yPos2Triangles = yPos1Triangles;      var xPos3Triangles = xPos2Triangles;      var yPos3Triangles = b.random (yPos2Triangles+triangleSize, yPos2Triangles+triangleSize);  }  //---------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / einheitliche Drehung / Dreiecke  if (panelPositionRotationTriangles.children[1].value == true) {      var rotationRadiansTriangles = b.radians ( b.random (10,350) );      b.rotate (rotationRadiansTriangles );  }  //-------------------------------------------------------------------------------------------------------------- Reaktionen / Gleichseitig gleich groß oder unterschiedlich groß + keine Drehung / Dreiecke  if ( (panelPositionQuadratTriangles.children[1].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[0].value == true) ||       (panelPositionQuadratTriangles.children[1].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[0].value == true) ) {      // Zufallszahl ob 180 oder 0 Grad Drehun      var randomNumberNoRotationTriangles = b.round (b.random (0,1) );      if (randomNumberNoRotationTriangles == 0) {        var rotationRadiansTriangles = b.radians ( 180 );        b.rotate (rotationRadiansTriangles ) ;      }      else {        var rotationRadiansTriangles = b.radians ( 0 );        b.rotate (rotationRadiansTriangles ) ;      }  }  //----------------------------------------------------------------------------------------------------------------------------- Reaktionen / Spitzwinklig + unterschiedlich groß + keine Drehung / Dreiecke  if (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[0].value == true) {      // Zufallszahl ob 180 oder 0 Grad Drehun      var randomNumberNoRotationTriangles = b.round (b.random (0,3) );      if (randomNumberNoRotationTriangles == 0) {        var rotationRadiansTriangles = b.radians ( 45 );        b.rotate (rotationRadiansTriangles ) ;      }      if (randomNumberNoRotationTriangles == 1) {          var rotationRadiansTriangles = b.radians ( 135 );          b.rotate (rotationRadiansTriangles ) ;        }      if (randomNumberNoRotationTriangles == 2) {          var rotationRadiansTriangles = b.radians ( 225 );          b.rotate (rotationRadiansTriangles ) ;        }      if (randomNumberNoRotationTriangles == 3) {          var rotationRadiansTriangles = b.radians ( 315 );          b.rotate (rotationRadiansTriangles ) ;        }  }  //--------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Spitzwinkelig + gleich groß + Keine Drehung / Dreiecke  if (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[0].value == true) {      // Zufallszahl ob 180 oder 0 Grad Drehun      var randomNumberNoRotationTriangles = b.round (b.random (0,3) );      if (randomNumberNoRotationTriangles == 0) {        var rotationRadiansTriangles = b.radians ( 0 );        b.rotate (rotationRadiansTriangles ) ;      }      if (randomNumberNoRotationTriangles == 1) {        var rotationRadiansTriangles = b.radians ( 90 );        b.rotate (rotationRadiansTriangles ) ;      }      if (randomNumberNoRotationTriangles == 2) {        var rotationRadiansTriangles = b.radians ( 180 );        b.rotate (rotationRadiansTriangles ) ;      }      if (randomNumberNoRotationTriangles == 3) {        var rotationRadiansTriangles = b.radians ( 270 );        b.rotate (rotationRadiansTriangles ) ;      }  }  //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kontur / Dreiecke  // Eine minimale Konturenstärke + der Wert der im Slider eingestellt wurde  var minStrokeWeightTriangles = 0.5;  var maxStrokeWeightTriangles = outlineSliderMagicVariableTriangles;  // Reaktionen auf die Outline Checkboxen      // Normale Kontur + normale Füllung + zufällige Farbe      if (panelLookOutlineNoFillTriangles.children[0].value  == true && panelLookOutlineNoFillTriangles.children[1].value == false && panelOutlineColorTriangles.children[1].value == true) {           b.stroke (b.random (255), b.random (255), b.random (255) );      }      // NormaleKontur + Keine Füllung + Eine zufällige Farbe      if (panelLookOutlineNoFillTriangles.children[0].value  == true && panelLookOutlineNoFillTriangles.children[1].value == true && panelOutlineColorTriangles.children[1].value == true) {        b.stroke (b.random (255), b.random (255), b.random (255) );      }  //------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Kontur / Alle Konturen gleich groß / Dreiecke  // Wenn die Option Outline geklickt wurde, treten diese If Funktionen in Kraft   if (panelLookOutlineNoFillTriangles.children[0].value == true) {      // Alle Konturen gleich groß      if (panelOutlineSizeTriangles.children[1].value == true) {        b.strokeWeight ( maxStrokeWeightTriangles );      }  }// ##################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT            for( var forYTriangles = 0; forYTriangles < yCellsRectanlges; forYTriangles++) {               for( var forXTriangles = 0; forXTriangles < xCellsTriangles; forXTriangles++) {// ##################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT//------------------------------------------------------------------------------------------------------------------------- Reaktionen / Spitzwinkelig + unterschiedlich groß + einheitliche drehung / Dreieckif (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[1].value == true) {    // Anpassung der Größe da die Dreiecke sonst zu klein wären    var triangleSize = b.random (maxSizeSliderMagicVariabelTriangles*4);}//------------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Unterschiedlich Drehung / Dreieckeif (panelPositionRotationTriangles.children[2].value == true) {    var rotationRadiansTriangles = b.random (0,360) ;    b.rotate( b.radians (rotationRadiansTriangles ) );}//-------------------------------------------------------------------------------------- Reaktionen / Spitzwinkelig + unterschiedlkich groß + keine oder unterschiedliche oder einheitliche Drehung / Dreieckeif ( (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[0].value == true) ||     (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[1].value == true) ||     (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[2].value == true) ) {    // Zufallsgröße und zusätzliche Anpassung der Größe da die Dreiecke sonst zu klein wärenn    var triangleSize = b.random (10, maxSizeSliderMagicVariabelTriangles*4);    // Die Koordinaten der Dreiecke    var xPos1Triangles = b.width;    var yPos1Triangles = b.height;    var xPos2Triangles = b.random (xPos1Triangles+triangleSize/3, xPos1Triangles+triangleSize);    var yPos2Triangles = b.random (yPos1Triangles+triangleSize/3, yPos1Triangles+triangleSize);    var xPos3Triangles = xPos2Triangles - triangleSize;    var yPos3Triangles = yPos2Triangles - triangleSize;}//------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Gleichseitig + unterschiedlich groß / Dreieckeif (panelPositionQuadratTriangles.children[1].value == true && panelPositionSameSizeTriangles.children[0].value == true) {    // Zufallsgröße und zusätzliche Anpassung der Größe da die Dreiecke sonst zu klein wärenn    var triangleSize = b.random (5, maxSizeSliderMagicVariabelTriangles*4);    // Die Koordinaten der Dreiecke    var xPos1Triangles = b.random (b.width);    var yPos1Triangles = b.random (b.height);    var xPos2Triangles = xPos1Triangles+triangleSize;    var yPos2Triangles = yPos1Triangles;    var xPos3Triangles = xPos2Triangles - triangleSize/2;    var yPos3Triangles = yPos1Triangles +triangleSize/1.15;}//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Gleichseitig + gleich groß / Dreieckeif (panelPositionQuadratTriangles.children[1].value == true && panelPositionSameSizeTriangles.children[1].value == true) {    // Die Koordinaten der Dreiecke    var xPos1Triangles = b.random (b.width);    var yPos1Triangles = b.random (b.height);    var xPos2Triangles = xPos1Triangles+triangleSize;    var yPos2Triangles = yPos1Triangles;    var xPos3Triangles = xPos2Triangles - triangleSize/2;    var yPos3Triangles = yPos1Triangles +triangleSize/1.15;}//------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline / Alle unterschiedlich / Dreiecke    // Wenn die Option Outline geklickt wurde, und im nächsten Fenster die Option alle Konturen unterschiedlich groß     if (panelLookOutlineNoFillTriangles.children[0].value == true && panelOutlineSizeTriangles.children[0].value == true) {          b.strokeWeight (b.random (minStrokeWeightTriangles, maxStrokeWeightTriangles) );    }    //---------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / Schwarz-Weiß + Bunt / Dreiecke    // Reaktionen auf die Farben Radio Buttons    // Schwarz-Weiß        if (panelLookColorTriangles.children[2].value  == true) {          var colorGreyRandomNumberTriangles = b.random (minColorGreyTriangles, maxColorGreyTriangles);          var colorGreyTriangles = b.color (colorGreyRandomNumberTriangles, colorGreyRandomNumberTriangles, colorGreyRandomNumberTriangles );          b.fill (colorGreyTriangles);        }    // Bunt        if (panelLookColorTriangles.children[3].value  == true) {          var colorColorfullTriangles = b.color (b.random (0,255), b.random (0,255), b.random (0,255) ); b.fill (colorColorfullTriangles);        }//----------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline Schwarz-Weiß + Keine Füllung / Dreiecke    // Normale Kontur + keine Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillTriangles.children[0].value  == true && panelLookOutlineNoFillTriangles.children[1].value == true && panelOutlineColorTriangles.children[0].value == true) {          var colorOutlineGreyRandomNumberTriangles = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberTriangles, colorOutlineGreyRandomNumberTriangles, colorOutlineGreyRandomNumberTriangles);    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline Schwarz-Weiß + Füllung / Dreiecke    // Normale Kontur + Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillTriangles.children[0].value  == true && panelLookOutlineNoFillTriangles.children[1].value == false && panelOutlineColorTriangles.children[0].value == true) {          var colorOutlineGreyRandomNumberTriangles = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberTriangles, colorOutlineGreyRandomNumberTriangles, colorOutlineGreyRandomNumberTriangles);    }//------------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline / Keine Füllung / Dreiecke    // Kontur & Keine Füllung    if (panelLookOutlineNoFillTriangles.children[1].value  == true) {      b.noFill ();    }    // ######################################################################################################################################################################################### DIE Dreiecke    // Die Dreiecke werden Plaziert    b.beginShape(b.CLOSE);      b.vertex(xPos1Triangles, yPos1Triangles );      b.vertex(xPos2Triangles, yPos2Triangles );      b.vertex(xPos3Triangles, yPos3Triangles );    var theObjektItSelfTriangles =  b.endShape();     // Neupositionierung der Dreiecke für das Raster     b.itemX ( theObjektItSelfTriangles, cellWidthRasterTriangles * forXTriangles + cellWidthRasterTriangles / 2 - b.bounds(theObjektItSelfTriangles).width / 2 );     b.itemY ( theObjektItSelfTriangles, cellHeightRasterTriangles * forYTriangles + cellHeightRasterTriangles / 2 - b.bounds(theObjektItSelfTriangles).height / 2 );    // ######################################################################################################################################################################################### DIE Dreiecke    //-------------------------------------------------------------------------------------------------------------------------------------------------------- Festlegung / Kontur / Gehrungsgrenze / Dreiecke    // Korrigiert die Gehrungsgrenze / Miter Limit der Outline    theObjektItSelfTriangles.miterLimit = 100;    //------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Spitzwinkelig + gleich groß + keine Drehung / Dreiecke    if (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[0].value == true) {        // Hier wird die Größe an die eingestellte Größe angepasst        if (randomNumberSpitzRotate == 0) {          b.itemSize (theObjektItSelfTriangles, triangleSize, triangleSizeNoRotation);        }          else {            b.itemSize (theObjektItSelfTriangles, triangleSizeNoRotation, triangleSize);          }    }    //--------------------------------------------------------------------------------------------------- Reaktionen / Spitzwinkelig + gleich groß oder unterschiedlich groß + einheitliche Drehung / Dreiecke    if ( (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[1].value == true) ||         (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[1].value == true) ) {        // Hier wird die Größe an die eingestellte Größe angepasst        b.itemSize (theObjektItSelfTriangles,triangleSize, triangleSize);    }    //------------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Effekt / BlendModes / Dreiecke    // Reaktionen auf die Transparenz Radio Buttons    // Negativ Multiplizieren        if (panelLookEffectsTriangles.children[2].value  == true) {          b.blendMode (theObjektItSelfTriangles, blendModeRadioOneTriangles);        }    // Ineinanderkopieren        if (panelLookEffectsTriangles.children[3].value  == true) {          b.blendMode (theObjektItSelfTriangles, blendModeRadioTwoTriangles);        }    //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Transparenz / Aussehen / Dreiecke    // Reaktionen auf die Transparenz Radio Buttons    // Keinen Effekt        if (panelLookEffectsTriangles.children[0].value  == true) {        // Nüscht passiert        }    // Transparent        if (panelLookEffectsTriangles.children[1].value  == true) {          b.opacity (theObjektItSelfTriangles, b.random (minOpacityTriangles, maxOpacityTriangles) );        }    //----------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Farbverlauf / Gradiant nachdefinieren / Dreiecke    if (panelLookColorTriangles.children[1].value == true) {        // Neues Farbfeld wird zugewiesen, das ist komischerweise notwendig, sonst wird der Verlauf nicht zugewiesen         var yellow = b.color(0,0,100,"yellow");        theObjektItSelfTriangles.fillColor = "yellow";        // Der Verlauf wird zugewiesen        theObjektItSelfTriangles.fillColor = "GradientTriangles" + randomGradiantNumberTriangles;    }// #################################################################################################################################################################################### DIE FOR SCHLEIFEN ENDEN          }          }// ################################################################################################################################################################################ DIE If Raster Funktion Endet}//--------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Position / Kein Raster / Dreiecke// Wenn kein Raster gewählt wird// ######################################################################################################################################################################### DIE If kein Raster Funktion beginnt if (panelPositionRasterTriangles.children[1].value == true) {// Zufallszahl in welche Seite später mit triangleSizeNoRotation ersetzt wirdvar randomNumberSpitzRotate = b.round (b.random (1) )//---------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / 1 Farbe + 1 Verlauf / Dreiecke// Reaktionen auf die Farben Radio Buttons// Eine Farbe    if (panelLookColorTriangles.children[0].value  == true) {      var colorNormalTriangles = b.color (b.random (0,255), b.random (0,255), b.random (0,255) );      b.fill (colorNormalTriangles);    }// Ein Verlauf// Die Zufallszahl für die Benennung des Verlaufs, andernfalls überschreiben die nachfolgenden Verläufe die alten und das Bild wird schwarz weißvar randomGradiantNumberTriangles = b.random (1000);    if (panelLookColorTriangles.children[1].value  == true) {      var colorCreateGradiantColorOneTriangles = b.color ( b.random (0,255), b.random (0,255), b.random (0,255) );      var colorCreateGradiantColorTwoTriangles = b.color ( b.random (0,255), b.random (0,255), b.random (0,255) );      b.fill( b.gradient(colorCreateGradiantColorOneTriangles, colorCreateGradiantColorTwoTriangles, "GradientTriangles" + randomGradiantNumberTriangles) );      var randomNumberGradientRectangles = b.round (b.random (1));      if (randomNumberGradientRectangles==0){          b.gradientMode( b.LINEAR );      }      if (randomNumberGradientRectangles==1){          b.gradientMode( b.RADIAL );      }}//-------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Gleichseitig + Geich groß / Dreieckeif (panelPositionQuadratTriangles.children[1].value == true && panelPositionSameSizeTriangles.children[1].value == true ) {// Anpassung der Größe da die Dreiecke sonst zu klein wärennvar triangleSize = maxSizeSliderMagicVariabelTriangles*4;}//------------------------------------------------------------------------------------------------------------ Reaktionen / Spitzwinkelig + gleich groß + einheitliche oder unterschiedliche Drehung / Dreieckeif ( (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[1].value == true) ||     (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[2].value == true)  ) {          // Anpassung der Größe da die Dreiecke sonst zu klein wären          var triangleSize = maxSizeSliderMagicVariabelTriangles*4;          // Die Koordinaten der Dreiecke          var xPos1Triangles = b.width;          var yPos1Triangles = b.height;          var xPos2Triangles = b.random (xPos1Triangles+triangleSize/2, xPos1Triangles+triangleSize);          var yPos2Triangles = b.random (yPos1Triangles+triangleSize/2, yPos1Triangles+triangleSize/2+triangleSize);          var xPos3Triangles = b.random (xPos2Triangles, xPos2Triangles - triangleSize);          var yPos3Triangles = yPos2Triangles - triangleSize;}//----------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Spitzwinkelig + gleich groß + keine Drehung / Dreieckeif (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[0].value == true) {    // Anpassung der Größe da die Dreiecke sonst zu klein wärenn    var triangleSize = maxSizeSliderMagicVariabelTriangles*4;    // Wert zum nachträglichen verändern der Dreiecke, ist notwendig damit sie spitzwinkelig bleiben und trotzdem die angegebene Größe haben    var triangleSizeNoRotation = b.random (0, triangleSize/2);    // Die Koordinaten der Dreiecke    var xPos1Triangles = b.random (b.width);    var yPos1Triangles = b.random (b.height);    var xPos2Triangles = b.random (xPos1Triangles +triangleSize/2, xPos1Triangles+triangleSize);    var yPos2Triangles = yPos1Triangles;    var xPos3Triangles = xPos2Triangles;    var yPos3Triangles = b.random (yPos2Triangles+triangleSize, yPos2Triangles+triangleSize);}//--------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / einheitliche Drehung / Dreieckeif (panelPositionRotationTriangles.children[1].value == true) {    var rotationRadiansTriangles = b.radians ( b.random (10,350) );    b.rotate (rotationRadiansTriangles );}//------------------------------------------------------------------------------------------------------------------ Reaktionen / Gleichseitig gleich groß oder unterschiedlich groß + keine Drehung / Dreieckeif ( (panelPositionQuadratTriangles.children[1].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[0].value == true) ||     (panelPositionQuadratTriangles.children[1].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[0].value == true) ) {    // Zufallszahl ob 180 oder 0 Grad Drehun    var randomNumberNoRotationTriangles = b.round (b.random (0,1) );    if (randomNumberNoRotationTriangles == 0) {      var rotationRadiansTriangles = b.radians ( 180 );      b.rotate (rotationRadiansTriangles ) ;    }    else {      var rotationRadiansTriangles = b.radians ( 0 );      b.rotate (rotationRadiansTriangles ) ;    }}//------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Spitzwinklig + unterschiedlich groß + keine Drehung / Dreieckeif (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[0].value == true) {    // Zufallszahl ob 180 oder 0 Grad Drehun    var randomNumberNoRotationTriangles = b.round (b.random (0,3) );    if (randomNumberNoRotationTriangles == 0) {      var rotationRadiansTriangles = b.radians ( 45 );      b.rotate (rotationRadiansTriangles ) ;    }    if (randomNumberNoRotationTriangles == 1) {        var rotationRadiansTriangles = b.radians ( 135 );        b.rotate (rotationRadiansTriangles ) ;      }    if (randomNumberNoRotationTriangles == 2) {        var rotationRadiansTriangles = b.radians ( 225 );        b.rotate (rotationRadiansTriangles ) ;      }    if (randomNumberNoRotationTriangles == 3) {        var rotationRadiansTriangles = b.radians ( 315 );        b.rotate (rotationRadiansTriangles ) ;      }}//-------------------------------------------------------------------------------------------------------------------------------------------Reaktionen / Spitzwinkelig + gleich groß + Keine Drehung / Dreieckeif (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[0].value == true) {    // Zufallszahl ob 180 oder 0 Grad Drehun    var randomNumberNoRotationTriangles = b.round (b.random (0,3) );    if (randomNumberNoRotationTriangles == 0) {      var rotationRadiansTriangles = b.radians ( 0 );      b.rotate (rotationRadiansTriangles ) ;    }    if (randomNumberNoRotationTriangles == 1) {      var rotationRadiansTriangles = b.radians ( 90 );      b.rotate (rotationRadiansTriangles ) ;    }    if (randomNumberNoRotationTriangles == 2) {      var rotationRadiansTriangles = b.radians ( 180 );      b.rotate (rotationRadiansTriangles ) ;    }    if (randomNumberNoRotationTriangles == 3) {      var rotationRadiansTriangles = b.radians ( 270 );      b.rotate (rotationRadiansTriangles ) ;    }}//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kontur / Dreiecke// Eine minimale Konturenstärke + der Wert der im Slider eingestellt wurdevar minStrokeWeightTriangles = 0.5;var maxStrokeWeightTriangles = outlineSliderMagicVariableTriangles;// Reaktionen auf die Outline Checkboxen    // Normale Kontur + normale Füllung + zufällige Farbe    if (panelLookOutlineNoFillTriangles.children[0].value  == true && panelLookOutlineNoFillTriangles.children[1].value == false && panelOutlineColorTriangles.children[1].value == true) {         b.stroke (b.random (255), b.random (255), b.random (255) );    }    // NormaleKontur + Keine Füllung + Eine zufällige Farbe    if (panelLookOutlineNoFillTriangles.children[0].value  == true && panelLookOutlineNoFillTriangles.children[1].value == true && panelOutlineColorTriangles.children[1].value == true) {      b.stroke (b.random (255), b.random (255), b.random (255) );    }//---------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Kontur / Alle Konturen gleich groß / Dreiecke// Wenn die Option Outline geklickt wurde, treten diese If Funktionen in Kraft if (panelLookOutlineNoFillTriangles.children[0].value == true) {    // Alle Konturen gleich groß    if (panelOutlineSizeTriangles.children[1].value == true) {      b.strokeWeight ( maxStrokeWeightTriangles );    }}// ##################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT for (var forTriangles = 0; forTriangles < countSliderMagicVariableTriangles; forTriangles ++) {// ##################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT//----------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Spitzwinkelig + unterschiedlich groß + einheitliche drehung / Dreieckif (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[1].value == true) {    // Anpassung der Größe da die Dreiecke sonst zu klein wären    var triangleSize = b.random (maxSizeSliderMagicVariabelTriangles*4);}//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Unterschiedlich Drehung / Dreieckeif (panelPositionRotationTriangles.children[2].value == true) {    var rotationRadiansTriangles = b.random (0,360) ;    b.rotate( b.radians (rotationRadiansTriangles ) );}//---------------------------------------------------------------------------------------------------------------- Reaktionen / Spitzwinkelig + unterschiedlkich groß + keine oder unterschiedliche oder einheitliche Drehung / Dreieckeif ( (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[0].value == true) ||     (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[1].value == true) ||     (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[2].value == true) ) {    // Zufallsgröße und zusätzliche Anpassung der Größe da die Dreiecke sonst zu klein wärenn    var triangleSize = b.random (10, maxSizeSliderMagicVariabelTriangles*4);    // Die Koordinaten der Dreiecke    var xPos1Triangles = b.width;    var yPos1Triangles = b.height;    var xPos2Triangles = b.random (xPos1Triangles+triangleSize/3, xPos1Triangles+triangleSize);    var yPos2Triangles = b.random (yPos1Triangles+triangleSize/3, yPos1Triangles+triangleSize);    var xPos3Triangles = xPos2Triangles - triangleSize;    var yPos3Triangles = yPos2Triangles - triangleSize;}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Gleichseitig + unterschiedlich groß / Dreieckeif (panelPositionQuadratTriangles.children[1].value == true && panelPositionSameSizeTriangles.children[0].value == true) {    // Zufallsgröße und zusätzliche Anpassung der Größe da die Dreiecke sonst zu klein wärenn    var triangleSize = b.random (5, maxSizeSliderMagicVariabelTriangles*4);    // Die Koordinaten der Dreiecke    var xPos1Triangles = b.random (b.width);    var yPos1Triangles = b.random (b.height);    var xPos2Triangles = xPos1Triangles+triangleSize;    var yPos2Triangles = yPos1Triangles;    var xPos3Triangles = xPos2Triangles - triangleSize/2;    var yPos3Triangles = yPos1Triangles +triangleSize/1.15;}//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Gleichseitig + gleich groß / Dreieckeif (panelPositionQuadratTriangles.children[1].value == true && panelPositionSameSizeTriangles.children[1].value == true) {    // Die Koordinaten der Dreiecke    var xPos1Triangles = b.random (b.width);    var yPos1Triangles = b.random (b.height);    var xPos2Triangles = xPos1Triangles+triangleSize;    var yPos2Triangles = yPos1Triangles;    var xPos3Triangles = xPos2Triangles - triangleSize/2;    var yPos3Triangles = yPos1Triangles +triangleSize/1.15;}//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Alle unterschiedlich / Dreiecke    // Wenn die Option Outline geklickt wurde, und im nächsten Fenster die Option alle Konturen unterschiedlich groß     if (panelLookOutlineNoFillTriangles.children[0].value == true && panelOutlineSizeTriangles.children[0].value == true) {          b.strokeWeight (b.random (minStrokeWeightTriangles, maxStrokeWeightTriangles) );    }    //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / Schwarz-Weiß + Bunt / Dreiecke    // Reaktionen auf die Farben Radio Buttons    // Schwarz-Weiß        if (panelLookColorTriangles.children[2].value  == true) {          var colorGreyRandomNumberTriangles = b.random (minColorGreyTriangles, maxColorGreyTriangles);          var colorGreyTriangles = b.color (colorGreyRandomNumberTriangles, colorGreyRandomNumberTriangles, colorGreyRandomNumberTriangles );          b.fill (colorGreyTriangles);        }    // Bunt        if (panelLookColorTriangles.children[3].value  == true) {          var colorColorfullTriangles = b.color (b.random (0,255), b.random (0,255), b.random (0,255) ); b.fill (colorColorfullTriangles);        }//------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline Schwarz-Weiß + Keine Füllung / Dreiecke    // Normale Kontur + keine Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillTriangles.children[0].value  == true && panelLookOutlineNoFillTriangles.children[1].value == true && panelOutlineColorTriangles.children[0].value == true) {          var colorOutlineGreyRandomNumberTriangles = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberTriangles, colorOutlineGreyRandomNumberTriangles, colorOutlineGreyRandomNumberTriangles);    }//------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Outline Schwarz-Weiß + Füllung / Dreiecke    // Normale Kontur + Füllung + Schwarz-Weiß    if (panelLookOutlineNoFillTriangles.children[0].value  == true && panelLookOutlineNoFillTriangles.children[1].value == false && panelOutlineColorTriangles.children[0].value == true) {          var colorOutlineGreyRandomNumberTriangles = b.random (10, 245);          b.stroke (colorOutlineGreyRandomNumberTriangles, colorOutlineGreyRandomNumberTriangles, colorOutlineGreyRandomNumberTriangles);    }//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Keine Füllung / Dreiecke    // Kontur & Keine Füllung    if (panelLookOutlineNoFillTriangles.children[1].value  == true) {      b.noFill ();    }// ##################################################################################################################################################################################### DIE Dreieckeb.beginShape(b.CLOSE);  b.vertex(xPos1Triangles, yPos1Triangles );  b.vertex(xPos2Triangles, yPos2Triangles );  b.vertex(xPos3Triangles, yPos3Triangles );var theObjektItSelfTriangles =  b.endShape();// ##################################################################################################################################################################################### DIE Dreiecke//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Festlegung / Kontur / Gehrungsgrenze / Dreiecke// Korrigiert die Gehrungsgrenze / Miter Limit der OutlinetheObjektItSelfTriangles.miterLimit = 100;//------------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Spitzwinkelig + gleich groß + keine Drehung / Dreieckeif (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[0].value == true) {    // Hier wird die Größe an die eingestellte Größe angepasst    if (randomNumberSpitzRotate == 0) {      b.itemSize (theObjektItSelfTriangles, triangleSize, triangleSizeNoRotation);    }      else {        b.itemSize (theObjektItSelfTriangles, triangleSizeNoRotation, triangleSize);      }}//------------------------------------------------------------------------------------------------------ Reaktionen / Spitzwinkelig + gleich groß oder unterschiedlich groß + einheitliche Drehung / Dreieckeif ( (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[1].value == true && panelPositionRotationTriangles.children[1].value == true) ||     (panelPositionQuadratTriangles.children[0].value == true && panelPositionSameSizeTriangles.children[0].value == true && panelPositionRotationTriangles.children[1].value == true) ) {    // Hier wird die Größe an die eingestellte Größe angepasst    b.itemSize (theObjektItSelfTriangles,triangleSize, triangleSize);}//---------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Effekt / BlendModes / Dreiecke// Reaktionen auf die Transparenz Radio Buttons// Negativ Multiplizieren    if (panelLookEffectsTriangles.children[2].value  == true) {      b.blendMode (theObjektItSelfTriangles, blendModeRadioOneTriangles);    }// Ineinanderkopieren    if (panelLookEffectsTriangles.children[3].value  == true) {      b.blendMode (theObjektItSelfTriangles, blendModeRadioTwoTriangles);    }//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Transparenz / Aussehen / Dreiecke// Reaktionen auf die Transparenz Radio Buttons// Keinen Effekt    if (panelLookEffectsTriangles.children[0].value  == true) {    // Nüscht passiert    }// Transparent    if (panelLookEffectsTriangles.children[1].value  == true) {      b.opacity (theObjektItSelfTriangles, b.random (minOpacityTriangles, maxOpacityTriangles) );    }//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Farbverlauf / Gradiant nachdefinieren / Dreieckeif (panelLookColorTriangles.children[1].value == true) {    // Neues Farbfeld wird zugewiesen, das ist komischerweise notwendig, sonst wird der Verlauf nicht zugewiesen     var yellow = b.color(0,0,100,"yellow");    theObjektItSelfTriangles.fillColor = "yellow";    // Der Verlauf wird zugewiesen    theObjektItSelfTriangles.fillColor = "GradientTriangles" + randomGradiantNumberTriangles;} b.itemPosition (theObjektItSelfTriangles, b.random (0-triangleSize/2 , b.width-triangleSize/3) , b.random (0-triangleSize/3.5, b.height-triangleSize/2.5 ) );// ##################################################################################################################################################################################### DIE FOR SCHLEIFE ENDET}// ########################################################################################################################################################################### DIE If Kein Raster Funktion Endet}// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Die If Funktion endet / Dreiecke// Die if Funktion der Dreiecke endet hier}// // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Die If Funktion beginnt / Linien// // Die If Funktion der Linien beginnt hier// if (panelForms.children[3].value == true) {// b.doc().layoutWindows[0].transformReferencePoint = AnchorPoint.CENTER_ANCHOR;// b.resetMatrix ();// b.units (b.MM);// var minOpacityLines =  2;// var maxOpacityLines = 100;// var minColorGreyLines = 20;// var maxColorGreyLines = 240;// // Variabeln für die Anzahl je nach dem wie die Breite eingestellt wird// var maxCountSliderValueSizeIsBiggerThan180Lines = 60;// var maxCountSliderValueSizeIsBiggerThan150Lines = 90;// var maxCountSliderValueSizeIsBiggerThan120Lines = 110;// var maxCountSliderValueSizeIsBiggerThan90Lines  = 130;// var maxCountSliderValueSizeIsBiggerThan60Lines  = 150;// var maxCountSliderValueSizeIsBiggerThan30Lines  = 170;// var maxCountSliderValueSizeIsBiggerThan0Lines   = 200;// // Will man diese Länge verändern muss man dies auf im Max Wert des Sliders tun// var maxSizeRasterLines  = 80;// var maxSizeNoRasterLines  = 500;// // Die Anzahl Abstufungen abhängig von der Breite// var maxCountRasterSizeIsBiggerThan70Lines  = 6;// var maxCountRasterSizeIsBiggerThan60Lines  = 8;// var maxCountRasterSizeIsBiggerThan50Lines  = 10;// var maxCountRasterSizeIsBiggerThan40Lines  = 12;// var maxCountRasterSizeIsBiggerThan30Lines  = 14;// var maxCountRasterSizeIsBiggerThan20Lines  = 16;// var maxCountRasterSizeIsBiggerThan10Lines  = 18;// var maxCountRasterSizeIsBiggerThan0Lines   = 20;// // Die Effekte// var blendModeRadioOneLines = BlendMode.SCREEN;// var blendModeRadioTwoLines = BlendMode.OVERLAY;// //========================================================================================================================================================= Fenster / Wie sollen die Linien aussehen / Linien// // Neues Fenster mit Statischem Text// var windowLookLines = new Window ("dialog", "", undefined, {closeButton: false} );// windowLookLines.alignChildren = "left";// windowLookLines.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Aussehen.png"));// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Farbe wählen / Linien// windowLookLines.add ('statictext', [0,0,350,20], '->  Wähle hier die Farbe deiner Linien');//     // Farben Panel//     var panelLookColorLines = windowLookLines.add ("panel");//     panelLookColorLines.alignChildren = "left";//         // Die Radio Buttons der Farben//         panelLookColorLines.add ("radiobutton", undefined, "Eine Farbe");//         panelLookColorLines.add ("radiobutton", undefined, "Ein Verlauf");//         panelLookColorLines.add ("radiobutton", undefined, "Schwarz-Weiß");//         panelLookColorLines.add ("radiobutton", [0,0,315,20], "Bunt");//         // Setzt zufällig einen der panelLookColorLines Panels auf true damit etwas ausgewählt ist//         var panelLookColorRandomGreyOreColorLines = b.round ( b.random (0, 1) );//         if ( panelLookColorRandomGreyOreColorLines == 0) {//           var panelLookColorRandomAktiveLines = b.round ( b.random (0, 2) );//           panelLookColorLines.children[panelLookColorRandomAktiveLines].value = true;//         }//         if ( panelLookColorRandomGreyOreColorLines == 1) {//           var panelLookColorRandomAktiveLines = b.round ( b.random (0, 1) );//           panelLookColorLines.children[panelLookColorRandomAktiveLines].value = true;//         }// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Effekte wählen / Linien// windowLookLines.add ('statictext', [0,0,350,20], '->  Wähle hier einen Effekt');//     // Effekte Panel//     var panelLookEffectsLines = windowLookLines.add ("panel");//     panelLookEffectsLines.alignChildren = "left";//         // Die Radio Buttons der Effekte//         panelLookEffectsLines.add ("radiobutton", undefined, "Keinen Effekt");//         panelLookEffectsLines.add ("radiobutton", undefined, "Transparenz");//         panelLookEffectsLines.add ("radiobutton", undefined, "Negativ Multiplizieren");//         panelLookEffectsLines.add ("radiobutton", [0,0,315,20], "Inneinanderkopieren");//         // Setzt zufällig einen der panelLookEffectsLines Panels auf true damit etwas ausgewählt ist//         var panelLookEffectsRandomAktiveLines = b.round ( b.random (0, 3) );//         panelLookEffectsLines.children[panelLookEffectsRandomAktiveLines].value = true;// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Aussehen / Linien//     var buttonLookWeiterLines = windowLookLines.add ("button", [0,0,350,40], "Weiter", {name:"ok"} );//     var buttonLookZufallLines = windowLookLines.add ("button", [0,0,350,40], "Zufall");// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall + Panels / Aussehen / Linien//     // Reaktion auf Zufall Button klicken//     with(windowLookLines)//         buttonLookZufallLines.onClick = function(buttonLookZufallLinesFunction){//              // Alle radio Boxen deaktivieren//              for (var i = 0; i < 4; i++) {//                 panelLookColorLines.children[i].value = false;//              }//              // Zufallsgenerator für die Farben Radio Boxen//                   var randomNumberColorRadioButtonsLines = b.floor (b.random (0,4) );//                   panelLookColorLines.children[randomNumberColorRadioButtonsLines].value = true;//              // Zufallsgenerator für die Transparenz Radio Boxen//                       // Zufall was für ein Transparenzeffekt entstehen soll//                       var randomNumberTransparencyRadioButtonsLines = b.floor (b.random (0,4) );//                       panelLookEffectsLines.children[randomNumberTransparencyRadioButtonsLines].value = true;//          }// windowLookLines.show();// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// //========================================================================================================================================================= Fenster / Breite / Linien// // Neues Fenster mit Statischem Text// var windowOutlineLines = new Window ("dialog", "", undefined, {closeButton: false} );// windowOutlineLines.alignChildren = "left";// windowOutlineLines.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Breite.png"));// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Radiobuttons / Breite / Gleich Breit / Linien// windowOutlineLines.add ('statictext', [0,0,350,20], '->  Wähle hier ob alle Linien gleich breit sein sollen');// var panelOutlineSizeLines = windowOutlineLines.add ("panel")// panelOutlineSizeLines.alignChildren = "left";//         panelOutlineSizeLines.add ("radiobutton", undefined, "Alle unterschiedlich breit");//         panelOutlineSizeLines.add ("radiobutton", [0,0,315,20], "Alle gleich breit");//         // Setzt zufällig einen der panelOutlineSizeLines Radiobuttons auf true damit etwas ausgewählt ist//         var panelOutlineSizeRandomAktiveLines = b.round ( b.random (0, 1) );//         if (panelOutlineSizeRandomAktiveLines == 0) {panelOutlineSizeLines.children[0].value = true;}//         if (panelOutlineSizeRandomAktiveLines == 1) {panelOutlineSizeLines.children[1].value = true;}// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Breite Slider / Linien// windowOutlineLines.add ('statictext', [0,0,350,20], '->  Wähle hier die Breite der Linien');// var panelOutlineSliderLines = windowOutlineLines.add ("panel")// panelOutlineSliderLines.alignChildren = "left";// // Das Textfeld des Sliders// var edittextOutlineSliderLines = panelOutlineSliderLines.add ('edittext {text: 10, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// // Der Slider ansich// var sliderOutlineSliderLines = panelOutlineSliderLines.add ('slider {minvalue: 1, maxvalue: 150, value: 10 }',[0,0,315,20]);// // Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.// var sliderOutlineRandomValueLines = b.round ( b.random (1,150));// edittextOutlineSliderLines.text = sliderOutlineRandomValueLines;// sliderOutlineSliderLines.value = sliderOutlineRandomValueLines;// // Reaktionen auf die beiden Objekte, Slider & Textfeld// sliderOutlineSliderLines.onChanging = function () {edittextOutlineSliderLines.text = b.round (sliderOutlineSliderLines.value) };// edittextOutlineSliderLines.onChanging = function () {sliderOutlineSliderLines.value = Number (edittextOutlineSliderLines.text) };// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Breite / Linien// var buttonOutlineWeiterLines = windowOutlineLines.add ("button", [0,0,350,40], "Weiter", {name:"ok"});// var buttonOutlineZufallLines = windowOutlineLines.add ("button", [0,0,350,40], "Zufall");// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Breite / Linien//     // Reaktion auf Zufall Button klicken//     with(windowOutlineLines)//         buttonOutlineZufallLines.onClick = function(buttonOutlineZufallLinesFunction){//              for (var i = 0; i < 2; i++) {//             panelOutlineSizeLines.children[i].value = false;//             }//              // Zufallsgenerator für die unterschiedliche Konturgröße Radio Buttons//                   var randomNumberDifferentOutlineLines = b.floor (b.random (0,2) );//                   panelOutlineSizeLines.children[randomNumberDifferentOutlineLines].value = true;//              // Zufallsgenerator für den Größe Slider//                   var randomNumberCountHowBigOutlineLines = b.round (b.random (1,200) ) ;//                   sliderOutlineSliderLines.value = randomNumberCountHowBigOutlineLines;//                   edittextOutlineSliderLines.text = randomNumberCountHowBigOutlineLines;//             }// windowOutlineLines.show();// // Variable die ich einbauen musste weil edittextOutlineSliderLines.text weiter unten irgendwie nicht ausgelesen werden konnte// var outlineSliderMagicVariableLines =  edittextOutlineSliderLines.text ;// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// //========================================================================================================================================================= Fenster / Position und Größe / Linien// // Neues Fenster mit Statischem Text// var windowPositionSizeLines = new Window ("dialog", "", undefined, {closeButton: false} );//     windowPositionSizeLines.alignChildren = "left";// windowPositionSizeLines.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Platzierung.png"));// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Gerade oder Gebogen / Linien// windowPositionSizeLines.add ('statictext', [0,0,350,20], '->  Wähle hier die Grundform deiner Linien');// var panelPositionQuadratLines = windowPositionSizeLines.add ("panel")// panelPositionQuadratLines.alignChildren = "left";//     // Checkboxen Kreisförmige Form//     panelPositionQuadratLines.add ("radiobutton", undefined, "Gerade Linen");//     panelPositionQuadratLines.add ("radiobutton", [0,0,315,20], "Gebogene Linen");//     // Setzt zufällig einen der panelOutlineSizeLines Radiobuttons auf true damit etwas ausgewählt ist//     var panelPositionQuadratRandomAktiveLines = b.round ( b.random (0, 1) );//     if (panelPositionQuadratRandomAktiveLines == 0) {panelPositionQuadratLines.children[0].value = true;}//     if (panelPositionQuadratRandomAktiveLines == 1) {panelPositionQuadratLines.children[1].value = true;}// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Raster oder kein Raster / Linien// windowPositionSizeLines.add ('statictext', [0,0,350,20], '->  Wähle hier die Positionierung deiner Linien');// var panelPositionRasterLines = windowPositionSizeLines.add ("panel")// panelPositionRasterLines.alignChildren = "left";//     // Radio Buttons Positionierung//     panelPositionRasterLines.add ("radiobutton", undefined, "Raster");//     panelPositionRasterLines.add ("radiobutton", [0,0,315,20], "Zufällige Position");//     // Setzt zufällig einen der panelOutlineSizeLines Radiobuttons auf true damit etwas ausgewählt ist//     var panelPositionRasterRandomAktiveLines = b.round ( b.random (0, 1) );//     if (panelPositionRasterRandomAktiveLines == 0) {panelPositionRasterLines.children[0].value = true;}//     if (panelPositionRasterRandomAktiveLines == 1) {panelPositionRasterLines.children[1].value = true;}// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Alle gleich lang / Linien// windowPositionSizeLines.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Linien alle gleich lang sein sollen');// var panelPositionSameSizeLines = windowPositionSizeLines.add ("panel")// panelPositionSameSizeLines.alignChildren = "left";//     // Radio Buttons Alle gleich lang//     panelPositionSameSizeLines.add ("radiobutton", undefined, "Alle unterschiedlich lang");//     panelPositionSameSizeLines.add ("radiobutton", [0,0,315,20], "Alle gleich lang");//     // Setzt zufällig einen der panelOutlineSizeLines Radiobuttons auf true damit etwas ausgewählt ist//     var panelPositionSameSizeRandomAktiveLines = b.round ( b.random (0, 1) );//     if (panelPositionSameSizeRandomAktiveLines == 0) {panelPositionSameSizeLines.children[0].value = true;}//     if (panelPositionSameSizeRandomAktiveLines == 1) {panelPositionSameSizeLines.children[1].value = true;}// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Panel / Drehung / Linien// windowPositionSizeLines.add ('statictext', [0,0,350,20], '->  Wähle hier ob deine Linien gedreht werden sollen');// var panelPositionRotationLines = windowPositionSizeLines.add ("panel")// panelPositionRotationLines.alignChildren = "left";//     // Radio Buttons Drehung//     panelPositionRotationLines.add ("radiobutton", undefined, "Keine Drehung");//     panelPositionRotationLines.add ("radiobutton", undefined, "Einheitliche Drehung");//     panelPositionRotationLines.add ("radiobutton", [0,0,315,20], "Unterschiedliche Drehung");//     // Setzt zufällig einen der panelPositionRotationLines Radiobuttons auf true damit etwas ausgewählt ist//     var panelPositionRotationRandomAktiveLines = b.round ( b.random (0, 2) );//     if (panelPositionRotationRandomAktiveLines == 0) {panelPositionRotationLines.children[0].value = true;}//     if (panelPositionRotationRandomAktiveLines == 1) {panelPositionRotationLines.children[1].value = true;}//     if (panelPositionRotationRandomAktiveLines == 2) {panelPositionRotationLines.children[2].value = true;}// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Plazierung / Linien// // Die beiden Buttons// var buttonPositionWeiterLines = windowPositionSizeLines.add ("button", [0,0,350,40], "Weiter", {name:"ok"});// var buttonPositionZufallLines = windowPositionSizeLines.add ("button", [0,0,350,40], "Zufall");// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall + Panels / Plazierung / Linien//     // Reaktion auf Zufall Button klicken//     with(windowPositionSizeLines)//         buttonPositionZufallLines.onClick = function(buttonPositionZufallLinesFunction){//              // Alle Radiobuttons und Checkboxen deaktivieren//              for (var i = 0; i < 2; i++) {//                 panelPositionRotationLines.children[i].value = false;//                 panelPositionRasterLines.children[i].value = false;//                 panelPositionSameSizeLines.children[0].value = false;//                 panelPositionQuadratLines.children[i].value = false;//              // Zufallsgenerator für die Rotation Radio Buttons//                   var randomNumberPositionRotationLines = b.floor (b.random (0,3) );//                   panelPositionRotationLines.children[randomNumberPositionRotationLines].value = true;//              // Zufallsgenerator für die Position Radio Buttons//                   var randomNumberPositionPositionLines = b.floor (b.random (0,2) );//                   panelPositionRasterLines.children[randomNumberPositionPositionLines].value = true;//              // Zufallsgenerator für die Alle gleich groß Checkbox//                   var randomNumberPositionSameSizeLines = b.floor (b.random (0,2) );//                   panelPositionSameSizeLines.children[randomNumberPositionSameSizeLines].value = true;//              // Zufallsgenerator für die Grundform Radio Buttons//                  var randomNumberPositionQuadratLines = b.floor (b.random (0,2) );//                  panelPositionQuadratLines.children[randomNumberPositionQuadratLines].value = true;//             }//         }// windowPositionSizeLines.show();// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// //========================================================================================================================================================= Fenster / Maximale Länge / Linien// // Neues Fenster mit Statischem Text// var windowMaxSizeLines = new Window ("dialog", "", undefined, {closeButton: false} );//     windowMaxSizeLines.alignChildren = "left";// windowMaxSizeLines.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Länge.png"));// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Maximale Länge / Linien// windowMaxSizeLines.add ('statictext', [0,0,350,20], '->  Wähle hier die maximale Länge deiner Linien');// var panelSliderMaxSizeLines = windowMaxSizeLines.add ("panel")// panelSliderMaxSizeLines.alignChildren = "left";// // Das Textfeld des Sliders// var sliderTextMaxSizeLines = panelSliderMaxSizeLines.add ('edittext {text: 20, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// // Der Slider Länge für Raster Anordnung// if (panelPositionRasterLines.children[0].value == true) {// var sliderSliderMaxSizeLines = panelSliderMaxSizeLines.add ('slider {minvalue: 5, maxvalue: 80, value: 20}',[0,0,315,20]);// // Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.// var sliderMaxSizeRandomValueLines = b.round ( b.random (5,maxSizeRasterLines));// }// // Der Slider Länge für keine Raster Anordnung// if (panelPositionRasterLines.children[1].value == true) {// var sliderSliderMaxSizeLines = panelSliderMaxSizeLines.add ('slider {minvalue: 5, maxvalue: 450, value: 20}',[0,0,315,20]);// // Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.// var sliderMaxSizeRandomValueLines = b.round ( b.random (5,maxSizeNoRasterLines));// }// sliderTextMaxSizeLines.text = sliderMaxSizeRandomValueLines;// sliderSliderMaxSizeLines.value = sliderMaxSizeRandomValueLines;// // Reaktionen auf die beiden Objekte, Slider & Textfeld// sliderSliderMaxSizeLines.onChanging = function () {sliderTextMaxSizeLines.text = b.round (sliderSliderMaxSizeLines.value) };// sliderTextMaxSizeLines.onChanging = function () {sliderSliderMaxSizeLines.value = Number (sliderTextMaxSizeLines.text) };// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter / Maxiamale Länge / Linien// // Die beiden Buttons// var buttonMaxSizeWeiterLines = windowMaxSizeLines.add ("button", [0,0,350,40], "Weiter", {name:"ok"});// var buttonMaxSizeZufallLines = windowMaxSizeLines.add ("button", [0,0,350,40], "Zufall");// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Maxiamale Länge / Linien//     // Reaktion auf Zufall Button klicken//     with(windowMaxSizeLines)//         buttonMaxSizeZufallLines.onClick = function(buttonMaxSizeZufallLinesFunction){// // Wenn Raster ausgewählt wurde// if (panelPositionRasterLines.children[0].value == true) {//              // Zufallsgenerator für den Länge Slider//                   var randomNumberMaxSizeLines = b.round (b.random (5,maxSizeRasterLines) );//                   sliderSliderMaxSizeLines.value = randomNumberMaxSizeLines;//                   sliderTextMaxSizeLines.text = randomNumberMaxSizeLines;//             }// // Wenn kein Raster ausgewählt wurde// if (panelPositionRasterLines.children[1].value == true) {//              // Zufallsgenerator für den Länge Slider//                   var randomNumberMaxSizeLines = b.round (b.random (5,maxSizeNoRasterLines) );//                   sliderSliderMaxSizeLines.value = randomNumberMaxSizeLines;//                   sliderTextMaxSizeLines.text = randomNumberMaxSizeLines;//             }// }// windowMaxSizeLines.show();// // Variabel sicherheitshalber eingebaut, da es schoneinmal einen Fehler deswegen gab// var maxSizeSliderMagicVariabelLines = b.round (sliderTextMaxSizeLines.text);// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// //========================================================================================================================================================= Fenster / Anzahl / Linien// // Neues Fenster mit Statischem Text// var windowCountLines = new Window ("dialog", "", undefined, {closeButton: false} );// //windowCountLines.alignChildren = "left";// windowCountLines.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Anzahl.png"));// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Slider / Anzahl / Linien// // Wenn kein Raster erstellt wird// if (panelPositionRasterLines.children[1].value == true) {//     windowCountLines.add ('statictext', [0,0,350,20], '->  Wähle hier wie viele Linien du plazieren möchtest');// }// // Wenn Raster erstellt wird// if (panelPositionRasterLines.children[0].value == true) {//     windowCountLines.add ('statictext', [0,0,350,20], '->  Wähle hier die Anzahl der Zeilen und Spalten des Rasters');// }// var panelCountSliderLines = windowCountLines.add ("panel")// panelCountSliderLines.alignChildren = "left";// // Anzeige wenn ein Raster ausgewählt wurde// // Das Textfeld des Sliders// var edittextCountSliderLines = panelCountSliderLines.add ('edittext {text: 10, characters: 3, justify: "center", enabled: false}',[0,0,315,20]);// // Der Slider ansich// var sliderCountSliderLines = panelCountSliderLines.add ('slider {minvalue: 1, maxvalue: 300, value: 10}',[0,0,315,20]);// //------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Anzahlbeeinflussung durch Breite / Linien// // Anzahlanpassung bei einem Raster// if (panelPositionRasterLines.children[0].value == true) {// // Variabel für die Anzahl die durch die Breite beeinflusst wird//   if (outlineSliderMagicVariableLines >70 ) {sliderCountSliderLines.maxvalue = maxCountRasterSizeIsBiggerThan70Lines};//   if (outlineSliderMagicVariableLines >60 && outlineSliderMagicVariableLines <=70) {sliderCountSliderLines.maxvalue = maxCountRasterSizeIsBiggerThan60Lines};//   if (outlineSliderMagicVariableLines >50 && outlineSliderMagicVariableLines <=60) {sliderCountSliderLines.maxvalue = maxCountRasterSizeIsBiggerThan50Lines};//   if (outlineSliderMagicVariableLines >40 && outlineSliderMagicVariableLines <=50) {sliderCountSliderLines.maxvalue = maxCountRasterSizeIsBiggerThan40Lines};//   if (outlineSliderMagicVariableLines >30 && outlineSliderMagicVariableLines <=40) {sliderCountSliderLines.maxvalue = maxCountRasterSizeIsBiggerThan30Lines};//   if (outlineSliderMagicVariableLines >20 && outlineSliderMagicVariableLines <=30) {sliderCountSliderLines.maxvalue = maxCountRasterSizeIsBiggerThan20Lines};//   if (outlineSliderMagicVariableLines >10 && outlineSliderMagicVariableLines <=20) {sliderCountSliderLines.maxvalue = maxCountRasterSizeIsBiggerThan10Lines};//   if (outlineSliderMagicVariableLines >0  && outlineSliderMagicVariableLines <=10) {sliderCountSliderLines.maxvalue = maxCountRasterSizeIsBiggerThan0Lines};// }// // Anzahlanpassung bei zufälliger Positionierung// if (panelPositionRasterLines.children[1].value == true) {// // Variabel für die Anzahl die durch die Breite beeinflusst wird//   if (outlineSliderMagicVariableLines >180 ) {sliderCountSliderLines.maxvalue = maxCountSliderValueSizeIsBiggerThan180Lines};//   if (outlineSliderMagicVariableLines >150 && outlineSliderMagicVariableLines <=180) {sliderCountSliderLines.maxvalue = maxCountSliderValueSizeIsBiggerThan150Lines};//   if (outlineSliderMagicVariableLines >120 && outlineSliderMagicVariableLines <=150) {sliderCountSliderLines.maxvalue = maxCountSliderValueSizeIsBiggerThan120Lines};//   if (outlineSliderMagicVariableLines >90  && outlineSliderMagicVariableLines <=120) {sliderCountSliderLines.maxvalue = maxCountSliderValueSizeIsBiggerThan90Lines};//   if (outlineSliderMagicVariableLines >60  && outlineSliderMagicVariableLines <=90)  {sliderCountSliderLines.maxvalue = maxCountSliderValueSizeIsBiggerThan60Lines};//   if (outlineSliderMagicVariableLines >30  && outlineSliderMagicVariableLines <=60)  {sliderCountSliderLines.maxvalue = maxCountSliderValueSizeIsBiggerThan30Lines};//   if (outlineSliderMagicVariableLines >0   && outlineSliderMagicVariableLines <=30)  {sliderCountSliderLines.maxvalue = maxCountSliderValueSizeIsBiggerThan0Lines};// }// // Zufallsgenerator für den Slider damit am Anfang immer ein anderer Wert eingestellt ist.// var sliderCountRandomValueRectanles = b.round ( b.random (5,sliderCountSliderLines.maxvalue));// edittextCountSliderLines.text = sliderCountRandomValueRectanles;// sliderCountSliderLines.value = sliderCountRandomValueRectanles;// // Reaktionen auf die beiden Objekte, Slider & Textfeld// sliderCountSliderLines.onChanging = function () {edittextCountSliderLines.text = b.round (sliderCountSliderLines.value) };// edittextCountSliderLines.onChanging = function () {sliderCountSliderLines.value = Number (edittextCountSliderLines.text) };// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Buttons / Weiter Zufall / Anzahl / Linien// var buttonCountWeiterLines = windowCountLines.add ("button", [0,0,350,40], "Weiter", {name:"ok"} );// var buttonCountZufallLines = windowCountLines.add ("button", [0,0,350,40], "Zufall");// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zufall / Anzahl / Linien//     // Reaktion auf Zufall Button klicken//     with(windowCountLines)//         buttonCountZufallLines.onClick = function(buttonCountZufallLinesFunction){//              // Zufallsgenerator für den Größe Slider//                   var randomNumberCountHowMuchLines = b.round (b.random (2,sliderCountSliderLines.maxvalue) );//                   sliderCountSliderLines.value = randomNumberCountHowMuchLines;//                   edittextCountSliderLines.text = randomNumberCountHowMuchLines;//             }// windowCountLines.show();// countSliderMagicVariableLines = edittextCountSliderLines.text;// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / 1 Farbe + 1 Verlauf / Linien// // Eine Farbe//     if (panelLookColorLines.children[0].value  == true) {//       var colorNormalLines = b.color (b.random (0,255), b.random (0,255), b.random (0,255) );//       b.stroke(colorNormalLines)//     }// // Ein Verlauf// // Die Zufallszahl für die Benennung des Verlaufs, andernfalls überschreiben die nachfolgenden Verläufe die alten und das Bild wird schwarz weiß// var randomGradiantNumberLines = b.random (1000);//     if (panelLookColorLines.children[1].value  == true) {//       var colorCreateGradiantColorOneLines = b.color ( b.random (0,255), b.random (0,255), b.random (0,255) );//       var colorCreateGradiantColorTwoLines = b.color ( b.random (0,255), b.random (0,255), b.random (0,255) );//       b.gradient(colorCreateGradiantColorOneLines, colorCreateGradiantColorTwoLines, "GradiantLines" + randomGradiantNumberLines);//       // Farbfeld wird erstellt. Notwendig, sonst funktioniert der Verlauf später nicht//        var yellow = b.color(0,0,100,"yellow");//     }// //---------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Rotation / Keine + einheitliche Drehung / Linien// // Reaktionen auf die Drehung Radio Buttons//     // Keine Drehung//     if (panelPositionRotationLines.children[0].value  == true) {//       // Zufallszahl die entscheidet ob 0, oder 90 Grad gedret wird//       var rotationRadiansRandomNumberLines = b.random (1,3);//       if (rotationRadiansRandomNumberLines > 1.5) {//         var rotationRadiansLines = b.radians ( 90 );//         b.rotate ( rotationRadiansLines );//       }//         else  {//           var rotationRadiansLines = b.radians ( 175 );//           b.rotate ( rotationRadiansLines );//         }//     }//     // Einheitliche Drehung//     if (panelPositionRotationLines.children[1].value  == true) {//       var rotationRadiansLines = b.radians ( b.random (10,350) );//       b.rotate ( rotationRadiansLines );//     }// //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Breite / Linien// // Eine minimale Breite + der Wert der im Slider eingestellt wurde// var minStrokeWeightLines = 0.5;// var maxStrokeWeightLines = outlineSliderMagicVariableLines;// //------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Breite / Alle Linene gleich breit / Linien//     // Alle Linien gleich breit//     if (panelOutlineSizeLines.children[1].value == true) {//       b.strokeWeight ( maxStrokeWeightLines );//     }// //------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Größe / Immer gleich lang / gerade Linien// //  Koordinaten werden Anhand der Maximallänge errechnet undspäter verändert// if (panelPositionSameSizeLines.children[1].value == true && panelPositionQuadratLines.children[0].value == true) {// var xPosLines1 = 0;// var yPosLines1 = 0;// var xPosLines2 = maxSizeSliderMagicVariabelLines;// var yPosLines2 = maxSizeSliderMagicVariabelLines;// }// //------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Größe / Immer gleich lang / gebogene Linien// //  Koordinaten werden Anhand der Maximallänge errechnet undspäter verändert// if (panelPositionSameSizeLines.children[1].value == true && panelPositionQuadratLines.children[1].value == true) {// var xPosLines1 = 0;// var yPosLines1 = b.height/2;// var xPosLines2 = b.random(maxSizeSliderMagicVariabelLines);// var yPosLines2 = b.height/2;//         var xPosLines21 = b.random (maxSizeSliderMagicVariabelLines);//         var yPosLines21 = b.random (maxSizeSliderMagicVariabelLines);//         var xPosLines22 = b.random (maxSizeSliderMagicVariabelLines);//         var yPosLines22 = b.random (maxSizeSliderMagicVariabelLines);// }// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// //----------------------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Position / Raster / Linien// // Wenn ein Raster gewählt wurde// // ######################################################################################################################################################################## DIE If ein Raster Funktion beginnt//  if (panelPositionRasterLines.children[0].value == true) {// // ######################################################################################################################################################################## DIE If ein Raster Funktion beginnt//  // Damit ist das Raster zentriert//           var center = true;//           // Das rundet das Slider Ergebniss auf eine gerade Zahl//           if (countSliderMagicVariableLines&2 != 0) {//             countSliderMagicVariableLines++//           }//           // Falls 1 Objekt ausgegeben wird, damit mindestens 2 Dinge erscheinen//             if (countSliderMagicVariableLines == 1) {//               var xCellsLines = 1;//               var yCellsRectanlges = 1;//               }//                   else {//                   var xCellsLines = countSliderMagicVariableLines;//                   var yCellsRectanlges = countSliderMagicVariableLines;//                   }//             // Teilung der Zellen//             var cellWidthRasterLines = b.width / xCellsLines;//             var cellHeightRasterLines = b.height / yCellsRectanlges;// // ################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT//             for( var forYLines = 0; forYLines < yCellsRectanlges; forYLines++) {//                for( var forXLines = 0; forXLines < xCellsLines; forXLines++) {// // ################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT//       //---------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Größe / Alle unterschiedlich lang / gebogene Linien//       //  Koordinaten werden Anhand der Maximallänge errechnet undspäter verändert//       if (panelPositionSameSizeLines.children[0].value == true && panelPositionQuadratLines.children[1].value == true) {//           var xPosLines1 = 0;//           var yPosLines1 = b.height/2;//           var xPosLines2 = b.random(maxSizeSliderMagicVariabelLines);//           var yPosLines2 = b.height/2;//                   var xPosLines21 = b.random (maxSizeSliderMagicVariabelLines);//                   var yPosLines21 = b.random (maxSizeSliderMagicVariabelLines);//                   var xPosLines22 = b.random (maxSizeSliderMagicVariabelLines);//                   var yPosLines22 = b.random (maxSizeSliderMagicVariabelLines);//       }//       //------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Größe / Alle unterschiedlich lang / Gerade Linien//       // Koordinaten werden zufällig errechnet//       if (panelPositionSameSizeLines.children[0].value == true && panelPositionQuadratLines.children[0].value == true) {//           var xY2PositionVariabel = b.random (5, maxSizeSliderMagicVariabelLines);//           var xPosLines1 =  0;//           var yPosLines1 =  0;//           var xPosLines2 = xY2PositionVariabel;//           var yPosLines2 = xY2PositionVariabel;//       }//       //---------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Alle unterschiedlich / Linien//       //Berechnung der Breite der Outline alle unterschiedlich Breit//        if (panelOutlineSizeLines.children[0].value == true) {//             b.strokeWeight (b.random (minStrokeWeightLines, maxStrokeWeightLines) );//       }//       //------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / Schwarz-Weiß + Bunt / Linien//       // Reaktionen auf die Farben Radio Buttons//       // Schwarz-Weiß//           if (panelLookColorLines.children[2].value  == true) {//             var colorGreyRandomNumberLines = b.random (minColorGreyLines, maxColorGreyLines);//             var colorGreyLines = b.color (colorGreyRandomNumberLines, colorGreyRandomNumberLines, colorGreyRandomNumberLines );//             b.stroke (colorGreyLines);//           }//       // Bunt//           if (panelLookColorLines.children[3].value  == true) {//             var colorColorfullLines = b.color (b.random (0,255), b.random (0,255), b.random (0,255) );//             b.stroke (colorColorfullLines);//           }//       //------------------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Rotation / Chaos / Linien//       // Reaktionen auf die Drehung Radio Buttons//           // Chaotische Drehung//           if (panelPositionRotationLines.children[2].value  == true) {//             var rotationRadiansLines = b.radians ( b.random (10,350) );//             b.rotate ( rotationRadiansLines );//           }//     // ##################################################################################################################################################################################### DIE geraden Linien//       //--------------------------------------------------------------------------------------------------------------------------------------------------------- Plazierung / Rotation / Chaos / Gerade Linien//       // Gerade Linien werden plaziert//       if (panelPositionQuadratLines.children[0].value == true) {//           var theObjektItSelfLines = b.line (xPosLines1, yPosLines1, xPosLines2, yPosLines2);//       }//       //--------------------------------------------------------------------------------------------------------------------------------------------------------- Plazierung / Rotation / Chaos / Gebogene Linien//       // Gebogene Linien werden plaziert//       if (panelPositionQuadratLines.children[1].value == true) {//           b.noFill();//           var randomNumberGebogeneLines = b.round (b.random (1) );//       if ( randomNumberGebogeneLines == 0 ) {//               b.beginShape();//               b.vertex( xPosLines2, yPosLines2, xPosLines21, yPosLines21, xPosLines22, yPosLines22);//               b.vertex( xPosLines1, yPosLines1);//               }//           else {//                   b.beginShape();//                   b.vertex( xPosLines1, yPosLines1);//                   b.vertex( xPosLines2, yPosLines2, xPosLines21, yPosLines21, xPosLines22, yPosLines22);//                 }//                   var theObjektItSelfLines = b.endShape()//       }//      // Neupositionierung der Linien für das Raster//      b.itemX ( theObjektItSelfLines, cellWidthRasterLines * forXLines + cellWidthRasterLines / 2 - b.bounds(theObjektItSelfLines).width / 2 );//      b.itemY ( theObjektItSelfLines, cellHeightRasterLines * forYLines + cellHeightRasterLines / 2 - b.bounds(theObjektItSelfLines).height / 2 );//     // ##################################################################################################################################################################################### DIE geraden Linien//     //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Verlauf neu zuweisen / Linien//     // Der Verlauf wird zugewiesen, aus irgend einem Grund ist es notwendig vorher eine Farbe zu zu weisen//     // Eine Farbe//         if (panelLookColorLines.children[1].value  == true) {//     theObjektItSelfLines.strokeColor = "yellow";//     theObjektItSelfLines.strokeColor = "GradiantLines" + randomGradiantNumberLines;//         }//     //---------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Effekt / BlendModes / Linien//     // Reaktionen auf die Transparenz Radio Buttons//     // Negativ Multiplizieren//         if (panelLookEffectsLines.children[2].value  == true) {//           b.blendMode (theObjektItSelfLines, blendModeRadioOneLines);//         }//     // Ineinanderkopieren//         if (panelLookEffectsLines.children[3].value  == true) {//           b.blendMode (theObjektItSelfLines, blendModeRadioTwoLines);//         }//     //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Transparenz / Aussehen / Linien//     // Reaktionen auf die Transparenz Radio Buttons//     // Transparent//         if (panelLookEffectsLines.children[1].value  == true) {//           b.opacity (theObjektItSelfLines, b.random (minOpacityLines, maxOpacityLines) );//         }// // ##################################################################################################################################################################################### DIE FOR SCHLEIFEN ENDEN//           }//           }// // ################################################################################################################################################################################# DIE If Raster Funktion Endet// }// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// // #####################################################################################################################################################################################// //------------------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / Position / Kein Raster / Linien// // Wenn kein Raster gewählt wird// // ################################################################################################################################################################################## DIE If kein Raster Funktion beginnt//  if (panelPositionRasterLines.children[1].value == true) {// // ##################################################################################################################################################################################### DIE FOR SCHLEIFE BEGINNT//  for (var forLines = 0; forLines < countSliderMagicVariableLines; forLines ++) {// //----------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Größe / Alle unterschiedlich lang / gebogene Linien// //  Koordinaten werden Anhand der Maximallänge errechnet undspäter verändert// if (panelPositionSameSizeLines.children[0].value == true && panelPositionQuadratLines.children[1].value == true) {//     var xPosLines1 = 0;//     var yPosLines1 = b.height/2;//     var xPosLines2 = b.random(maxSizeSliderMagicVariabelLines);//     var yPosLines2 = b.height/2;//             var xPosLines21 = b.random (maxSizeSliderMagicVariabelLines);//             var yPosLines21 = b.random (maxSizeSliderMagicVariabelLines);//             var xPosLines22 = b.random (maxSizeSliderMagicVariabelLines);//             var yPosLines22 = b.random (maxSizeSliderMagicVariabelLines);// }// //------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Größe / Alle unterschiedlich lang / Gerade Linien// // Koordinaten werden zufällig errechnet// if (panelPositionSameSizeLines.children[0].value == true && panelPositionQuadratLines.children[0].value == true) {//     var xY2PositionVariabel = b.random (5, maxSizeSliderMagicVariabelLines);//     var xPosLines1 =  0;//     var yPosLines1 =  0;//     var xPosLines2 = xY2PositionVariabel;//     var yPosLines2 = xY2PositionVariabel;// }// //-------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Outline / Alle unterschiedlich / Linien// //Berechnung der Breite der Outline alle unterschiedlich Breit//  if (panelOutlineSizeLines.children[0].value == true) {//       b.strokeWeight (b.random (minStrokeWeightLines, maxStrokeWeightLines) );// }// //----------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Color / Schwarz-Weiß + Bunt / Linien// // Reaktionen auf die Farben Radio Buttons// // Schwarz-Weiß//     if (panelLookColorLines.children[2].value  == true) {//       var colorGreyRandomNumberLines = b.random (minColorGreyLines, maxColorGreyLines);//       var colorGreyLines = b.color (colorGreyRandomNumberLines, colorGreyRandomNumberLines, colorGreyRandomNumberLines );//       b.stroke (colorGreyLines);//     }// // Bunt//     if (panelLookColorLines.children[3].value  == true) {//       var colorColorfullLines = b.color (b.random (0,255), b.random (0,255), b.random (0,255) );//       b.stroke (colorColorfullLines);//     }// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Rotation / Chaos / Linien// // Reaktionen auf die Drehung Radio Buttons//     // Chaotische Drehung//     if (panelPositionRotationLines.children[2].value  == true) {//       var rotationRadiansLines = b.radians ( b.random (10,350) );//       b.rotate ( rotationRadiansLines );//     }// // ##################################################################################################################################################################################### DIE Linien// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Plazierung / Rotation / Chaos / Gerade Linien// // Gerade Linien werden plaziert// if (panelPositionQuadratLines.children[0].value == true) {//     var theObjektItSelfLines = b.line (xPosLines1, yPosLines1, xPosLines2, yPosLines2);// }// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Plazierung / Rotation / Chaos / Gebogene Linien// // Gebogene Linien werden plaziert// if (panelPositionQuadratLines.children[1].value == true) {//     b.noFill();//     var randomNumberGebogeneLines = b.round (b.random (1) );// if ( randomNumberGebogeneLines == 0 ) {//         b.beginShape();//         b.vertex( xPosLines2, yPosLines2, xPosLines21, yPosLines21, xPosLines22, yPosLines22);//         b.vertex( xPosLines1, yPosLines1);//         }// else {//         b.beginShape();//         b.vertex( xPosLines1, yPosLines1);//         b.vertex( xPosLines2, yPosLines2, xPosLines21, yPosLines21, xPosLines22, yPosLines22);// }//         var theObjektItSelfLines = b.endShape()// }// // ##################################################################################################################################################################################### DIE Linien// //-------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Neupositionierung der Linien / Linien//     b.itemPosition (theObjektItSelfLines, b.random (0-maxSizeSliderMagicVariabelLines/4, b.width-maxSizeSliderMagicVariabelLines/8) , b.random (0-maxSizeSliderMagicVariabelLines/4, b.height-maxSizeSliderMagicVariabelLines/3.5) )//     // Alt, zur Sicherheit//     // b.itemPosition (theObjektItSelfLines, b.random (0-maxSizeSliderMagicVariabelLines/5, b.width) , b.random (0-maxSizeSliderMagicVariabelLines/4, b.height-maxSizeSliderMagicVariabelLines/4) )// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Verlauf neu zuweisen / Linien// // Der Verlauf wird zugewiesen, aus irgend einem Grund ist es notwendig vorher eine Farbe zu zu weisen//     if (panelLookColorLines.children[1].value  == true) {// theObjektItSelfLines.strokeColor = "yellow";// theObjektItSelfLines.strokeColor = "GradiantLines" + randomGradiantNumberLines;//     }// //---------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Effekt / BlendModes / Linien// // Reaktionen auf die Transparenz Radio Buttons// // Negativ Multiplizieren//     if (panelLookEffectsLines.children[2].value  == true) {//       b.blendMode (theObjektItSelfLines, blendModeRadioOneLines);//     }// // Ineinanderkopieren//     if (panelLookEffectsLines.children[3].value  == true) {//       b.blendMode (theObjektItSelfLines, blendModeRadioTwoLines);//     }// //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Transparenz / Aussehen / Linien// // Reaktionen auf die Transparenz Radio Buttons// // Transparent//     if (panelLookEffectsLines.children[1].value  == true) {//       b.opacity (theObjektItSelfLines, b.random (minOpacityLines, maxOpacityLines) );//     }// // ############################################################################################################################################################################## DIE FOR SCHLEIFE ENDET// }// // ################################################################################################################################################################### DIE If Kein Raster Funktion Endet// }// // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX// // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Die If Funktion endet / Linien// // Die if Funktion der linien Endet hier// }//========================================================================================================================================================= Fenster / Noch mehr Formen / Linien  var moreFormsLines = new Window ("dialog", " ", undefined, {closeButton: false} );  // moreFormsLines.orientation = "row";  moreFormsLines.alignChildren = ['fill', 'fill'];moreFormsLines.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Mehr.png"));  var messageExitPrintLines = moreFormsLines.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,350,40],);  messageExitPrintLines.text = "Soweit so gut, möchtest du noch eine Form?";var anotherFormLines = moreFormsLines.add ("button", [0,0,350,40], "Noch eine Form", {name:"ok"});var enoughFormsLines = moreFormsLines.add ("button", [0,0,350,40], "Das genügt");//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Drucken Buttons / Mehr Formen / Linien    with(moreFormsLines)        anotherFormLines.onClick = function(buttonNoPrintFunctionLines){           // Der Schließen Befehl           close (1);         }    with(moreFormsLines)        enoughFormsLines.onClick = function(buttonPrintFunctionLines){           // Der Schließen Befehl           close(1);           enoughForms = 200;         }moreFormsLines.show ();// Setzt alle Transformationseinstellungen wieder auf 0b.resetMatrix ();// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// Die while Schleife endet hier !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}b.units (b.MM);//========================================================================================================================================================= Fenster / Willst du Text / Textvar windowTextMessage = new Window ("dialog", " ", undefined, {closeButton: false} );// windowTextMessage.orientation = "row";windowTextMessage.alignChildren = ['fill', 'fill'];windowTextMessage.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Text.png"));var messageTextGeneral = windowTextMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,80],);;// Falls jemand ESC bei der Namenseingabe gedrückt haben sollte und nichts eingegeben hatif (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {  messageTextGeneral.text = "Möchtest du Text auf deinem Plakat, " +  noName + "?";}// Ganz normaler Textif (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {  messageTextGeneral.text = "Möchtest du Text auf deinem Plakat, " + edittextYourName.text + "?";}// Falls jemand ESC bei der Namenseingabe gedrückt haben sollte und der Name zu lange istif (edittextYourName.text.length > 30) {  messageTextGeneral.text = "Möchtest du Text auf deinem Plakat, " + tooLong + "?";}var buttonPrint = windowTextMessage.add ("button", [0,0,350,60], "Ja");var buttonNoPrint = windowTextMessage.add ("button", [0,0,350,60], "Nein");var textGeneral = 0;//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Willst du Text Buttons / Text    with(windowTextMessage)        buttonNoPrint.onClick = function(buttonNoPrintFunctionExit){           // Der Schließen Befehl           close(1);         }    with(windowTextMessage)        buttonPrint.onClick = function(buttonPrintFunctionExit){           // Der Schließen Befehl           textGeneral++;           close(1);         }windowTextMessage.show ();// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################if (textGeneral == 1) {    //========================================================================================================================================================= Fenster / Was für ein Text / Text    var windowWichTextMessage = new Window ("dialog", " ", undefined, {closeButton: false} );    // windowWichTextMessage.orientation = "row";    windowWichTextMessage.alignChildren = ['fill', 'fill'];    windowWichTextMessage.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Selbst.png"));      var messageWichTextText = windowWichTextMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,80],);      messageWichTextText.text = "Möchtest du deinen Text selbst schreiben?";    var buttonJaWichText = windowWichTextMessage.add ("button", [0,0,350,60], "Ich möchte ihn selbst schreiben");    var buttonNeinWichText = windowWichTextMessage.add ("button", [0,0,350,60], "Der Plakatgenerator soll ihn für mich schreiben");    // Variabel die entweder hochgezählt wird (selber schreiben, oder auf null bleibt (generieren lassen))    var wichText = 0;    //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Was für ein Text Buttons / Text        with(windowWichTextMessage)            buttonJaWichText.onClick = function(buttonWichTextQuestionSelf){               // Der Schließen Befehl               close(1);               wichText++;             }        with(windowWichTextMessage)            buttonNeinWichText.onClick = function(buttonWichTextQuestionNotSelf){               // Der Schließen Befehl               close(1);             }    windowWichTextMessage.show ();    // #####################################################################################################################################################################################    // #####################################################################################################################################################################################    // #####################################################################################################################################################################################    // #####################################################################################################################################################################################    // #####################################################################################################################################################################################        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Text selber schreiben / Text        // Den Text selber schreiben    if (wichText == 1) {                //====================================================================================================================================================== Fenster / Gib hier deinen Text ein / Text                var windowWriteYourOwnText = new Window ("dialog", "", undefined, {closeButton: false} );                // Dinge in dem Fenster sind volle Breite                windowWriteYourOwnText.alignChildren = ['fill', 'fill'];                windowWriteYourOwnText.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Schreib.png"));                var staticWriteYourOwnText = windowWriteYourOwnText.add ('statictext  {text: "Center", characters: 43, justify: "center"} ', [0,0,300,80]);                staticWriteYourOwnText.text = "Gib hier deinen Text ein";                // Das Texteingabefeld                var editTextWriteYourOwnText = windowWriteYourOwnText.add ("edittext", undefined);                editTextWriteYourOwnText.characters = 43;                // Setzt das Textfeld auf Eingabe wenn es erscheint.                editTextWriteYourOwnText.active = true;                var buttonWriteYourOwnText = windowWriteYourOwnText.add ("button", [0,0,280,60], "Weiter", {name:"OK"});                buttonWriteYourOwnText.enabled = false;                // Die Funktion die Veränderungen im Textfeld misst                editTextWriteYourOwnText.onChanging = function () {                // Misst ob die Länge des Textes im Textfeld ungleich 0 ist (Wenn nichts eingegeben ist wird gesperrt)                var controlTextLength =  editTextWriteYourOwnText.text.length != 0;                // Färbt das Textfeld Rot falls nichts eingegeben (controlTextLength) ist.                this.graphics.backgroundColor = this.graphics.newBrush (this.graphics.BrushType.SOLID_COLOR, controlTextLength ? [1, 1, 1, 1] : [1, 0.5, 0.5, 1]);                // Wenn controlTextLength ungleich 0 ist wird der Weiter Button enabled                buttonWriteYourOwnText.enabled = controlTextLength;                var controlNameTextLenght =  editTextWriteYourOwnText.text.length < 65 && editTextWriteYourOwnText.text.length != 0;                // Färbt das Textfeld Rot falls der Text zu lange ist.                this.graphics.backgroundColor = this.graphics.newBrush (this.graphics.BrushType.SOLID_COLOR, controlNameTextLenght ? [1, 1, 1, 1] : [1, 0.5, 0.5, 1]);                // Wenn controlNameLengthLenght kurz genug ist wird der Weiter Button enabled                buttonWriteYourOwnText.enabled = controlNameTextLenght;                }            var wichTextSave = 0;            //---------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Was für ein Text Buttons / Text                with(windowWriteYourOwnText)                    buttonWriteYourOwnText.onClick = function(buttonWriteYourOwnText){                       // Der Schließen Befehl                       // Text wurde korrekt eingegeben                       wichTextSave++;                       close(1);                     }            windowWriteYourOwnText.show ();                // #####################################################################################################################################################################################                // #####################################################################################################################################################################################                // #####################################################################################################################################################################################                // #####################################################################################################################################################################################                // #####################################################################################################################################################################################             // Wenn kein Text eingegeben wurde             if (editTextWriteYourOwnText.text.length == 0) {                  //====================================================================================================================================================== Fenster / kein Text eingegeben / Text                  var windowWichTextNoTextMessage = new Window ("dialog", " ", undefined, {closeButton: false} );                  // windowWichTextNoTextMessage.orientation = "row";                  windowWichTextNoTextMessage.alignChildren = ['fill', 'fill'];                  windowWichTextNoTextMessage.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Nope.png"));                    var messageWichTextNoTextText = windowWichTextNoTextMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,80],);                    messageWichTextNoTextText.text = "Du willst doch keinen Text? Dann eben nicht. ";                  var buttonOkWichTextNoText = windowWichTextNoTextMessage.add ("button", [0,0,350,60], "Weiter", {name:"ok"});                  windowWichTextNoTextMessage.show ();              }             // Wenn zuviel Text eingegeben wurde             if (editTextWriteYourOwnText.text.length > 65 && editTextWriteYourOwnText.text.length != 0) {                  //=================================================================================================================================================== Fenster / zu viel Text eingegeben / Text                  var windowWichTextTooMuchTextMessage = new Window ("dialog", " ", undefined, {closeButton: false} );                  // windowWichTextTooMuchTextMessage.orientation = "row";                  windowWichTextTooMuchTextMessage.alignChildren = ['fill', 'fill'];                  windowWichTextTooMuchTextMessage.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Nope.png"));                    var messageWichTextTooMuchText = windowWichTextTooMuchTextMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,80],);                    messageWichTextTooMuchText.text = "Das war leider etwas zu viel, du bekommst einen Zufallstext von mir. ";                  var buttonOkWichTextTooMuch = windowWichTextTooMuchTextMessage.add ("button", [0,0,350,60], "Nagut", {name:"ok"});                  //--------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Zu viel Text eingegeben / Text                      with(windowWichTextTooMuchTextMessage)                          buttonOkWichTextTooMuch.onClick = function(buttonOkWichTextTooMuch){                            // Text wurde nicht korrekt eingegeben                            wichTextSave++;                            wichTextSave++;                             // Der Schließen Befehl                             close(1);                           }                  windowWichTextTooMuchTextMessage.show ();              }        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################            //-------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Text schreiben lassen / Text            // Text von Plkatgenerator schreiben lassen                var headlineList = [                "Bäume träumen von Palmen", "Jaguars sind auch nur Menschen", "Ein Bein kommt selten allein", "Werde ich mich noch wundern?", "Vertrauen ist besser als Kontrolle!", "Ich poste, also like mich", "Schmeckt die Zukunft nach Salz?", "Du wirst wohl niemals erwachsen?",  "Stell dir vor es ist es und keiner isst es.", "Stell dir vor es ist Montag und keiner geht hin", "Die Karriere meiner Ehre", "Die Nacht schmeckt nach Sand", "Auch du findest einmal ein Korn", "Die Gedanken sind drei", "Das Klingt nach Stille", "Frue dich früh!", "Sternenstaub im Müsli", "Rauch und Gedanken", "Woher willst du das wissen?", "Wer wenn nicht wo?", "Faultiere im Nebel", "Wollkneule am Firmament", "Das Haar im Meer", "Ist mein Geist nachts auf Reise?", "Verändere deine Form", "Mutation! Um jeden Preis!", "Der Wald ruft nach dir!", "Das Zentrum aller Dinge", "Der Zirkel bist du", "Jeder Schritt ein Treffer", "Bist du denn du?", "Knallerbsen im Schnee", "Nordlichter ringen um Fassung", "Die Wand steht dir offen", "Kein Geld, kein Zelt", "Die Gestalt aus Senf", "Heute wird mal nichts gedacht!", "Tu es auf jeden Fall!", "Ist da jemand?", "Der Wurm im Sturm", "Der Winter sieht mich nicht"                ];                // Würfelt eine Zufallszahl aus                var randomHeadlineNumber = b.floor (b.random (0, headlineList.length) );                // Wählt mit der Zufallszahl eine Stelle des Arrays aus                var randomHeadline = headlineList[randomHeadlineNumber];                // splice sortiert die Nummern aus die schon ausgewählt wurden                headlineList.splice (randomHeadlineNumber, 1);        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        for (var k = 0; k < 5; k++) {                 //--------------------------------------------------------------------------------------------------------------------------------------------------------- Schriftart und Farbe / Typo                b.textFont ('Haettenschweiler', 'Regular');                b.textSize(170);                  // // Verändert die Zeilenhöhe                  // b.typo(headline, 'leading', b.height/3);                //--------------------------------------------------------------------------------------------------------------------------------------------------------- Die Grau Töne für den Text / Typo                var color1 = 40;                var color2 = 90;                var color3 = 150;                var color4 = 200;                var color5 = 255;                var c1 = b.color (color1, color1, color1);                var c2 = b.color (color2, color2, color2);                var c3 = b.color (color3, color3, color3);                var c4 = b.color (color4, color4, color4);                var c5 = b.color (color5, color5, color5);                var randomTypoColorNumber = b.round (b.random (1));                //-------------------------------------------------------------------------------------------------------------------------------------  Reaktionen auf die For Schleife und Einfärbung / Typo                  if ( k == 0 ) {b.fill (c1);  }                  if ( k == 1 ) {b.fill (c2);  }                  if ( k == 2 ) {b.fill (c3);  }                  if ( k == 3 ) {b.fill (c4);  }                  if ( k == 4 ) {b.fill (c5);  }                  if (wichTextSave == 1 || wichTextSave == 2 ) {                    //--------------------------------------------------------------------------------------------------------------------------------------------------------- Textplazierung ansich / Typo                      // Auswahl welcher Text genommen wird                      if (wichTextSave == 1) {                          var headline = b.text (editTextWriteYourOwnText.text,40 + k*1.2 ,26 + k*1.2,190,350);                      }                      if (wichTextSave == 2) {                          var headline = b.text (randomHeadline,40 + k*1.2 ,26 + k*1.2,190,350);                      }                      // Zeilenabstand                      b.typo ( headline, 'leading', 140 );                    //----------------------------------------------------------------------------------------------------------------------------------------------------- Großschreibung und Ebenen Effekte / Typo                      // Alles Wird GROSS geschrieben                      //b.typo(headline, 'capitalization', Capitalization.ALL_CAPS);                      // Ebenen Effekte                      if ( k == 0 ) { headline.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY ; b.opacity (headline, 100); }                      if ( k == 1 ) { headline.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY ; b.opacity (headline, 100); }                      if ( k == 2 ) { headline.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY ; b.opacity (headline, 100); }                      if ( k == 3 ) { headline.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY ; b.opacity (headline, 100); }                      if ( k == 4 ) { headline.transparencySettings.blendingSettings.blendMode = BlendMode.NORMAL ; b.opacity (headline, 100); }                    //--------------------------------------------------------------------------------------------------------------------------------------------------------- Der Hypinator von Timo / Typo                      // Der Hyphinator von Timo                      var wordsCounting = b.words(headline);                      var hyphCounter = 0;                      // check for each word if there is more than one (parent) line, if so, it's hyphenated                        for (var y = 0; y < 10; y++) {                          for (var x = 0; x < wordsCounting.length; x++) {                            if(wordsCounting[x].lines.length > 1) {                              hyphCounter++;                              b.println("The word " + wordsCounting[x].contents + " is hyphenated.");                              // search the last insertion point of each hyphenated line and insert a discretionary line break                              wordsCounting[x].lines[0].insertionPoints[-1].contents = SpecialCharacters.DISCRETIONARY_LINE_BREAK;                            }                          }                        }                    //-----------------------------------------------------------------------------------------------------------------------------------------------------Typo Textrahmen vergrößern bis passend                    // Nimme die Textrahmengröße in eine Variable                    var headlineWidth = b.itemWidth (headline);                    while ( headline.overflows == true) {                      // Verändert die Textrahmengröße +1 bis der Overflow true ist                      b.itemWidth (headline, headlineWidth++)                    }                    // Check this out!                    // //-----------------------------------------------------------------------------------------------------------------------------------------------------Typo Textrahmen vergrößern bis passend                    // // Nimme die Textrahmengröße in eine Variable                    // while ( headline.overflows == true) {                    //   // Verändert die Textrahmengröße +1 bis der Overflow true ist                    //     app.activeDocument.stories.headline.pointSize--;                    // }                   // Ende if (wichTextSave == 1 || wichTextSave == 2 )                   }            // Ende For Schleife k<5             }                    // #####################################################################################################################################################################################                    // #####################################################################################################################################################################################                    // #####################################################################################################################################################################################                    // #####################################################################################################################################################################################                    // #####################################################################################################################################################################################                    //-------------------------------------------------------------------------------------------------------------------------------------------------- Informationstext unten klein / Typo klein                      // Zeit die das Script lief                      var scriptTime = b.round (b.millis()/1000);          for (var typoKlein1 = 0; typoKlein1 < 3; typoKlein1++) {                        b.textSize(20);                        // Drehung um 90 Grad                        b.rotate (b.radians(90));                        // Die Ausrichtung des Sidetext                        b.textAlign(Justification.LEFT_ALIGN );                        // Die Färbung des Sidetext                          if ( typoKlein1 == 0 ) {b.fill (c2);  }                          if ( typoKlein1 == 1 ) {b.fill (c3);  }                          if ( typoKlein1 == 2 ) {b.fill (c5);  }                        // gant leichte neu Positionierung des Sidetext                        var xPosSidetext = 15+typoKlein1*0.4;                        var yPosSidetext = 10+typoKlein1*0.4;                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Kein Name / Typo klein1                        if (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Der Generator wurde von " + noName + " bedient.", xPosSidetext,  yPosSidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Normaler Name / Typo klein1                        if (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Der Generator wurde von " + edittextYourName.text + " bedient.", xPosSidetext,  yPosSidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Zu langer Name / Typo klein1                        if (edittextYourName.text.length > 30) {                            var sidetext = b.text ("Der Generator wurde von " + tooLong + " bedient.", xPosSidetext,  yPosSidetext, 180,40);                        }                        // Der Zeilenabstand des Sidetext                          b.typo(sidetext, 'leading', 17);                          sidetext.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY;                          b.opacity (sidetext, 100);                          // Drehung um 90 Grad zurück                          b.rotate (b.radians(-90));                      // Ende For Schleife typoKlein1<3 (kleine Schrift)                      }                    //-------------------------------------------------------------------------------------------------------------------------------------------------- Informationstext unten klein / Typo klein2                          for (var typoKlein2 = 0; typoKlein2 < 3; typoKlein2++) {                        b.textSize(20);                        // Drehung um 90 Grad                        b.rotate (b.radians(90));                        // Die Ausrichtung des Sidetext                        b.textAlign(Justification.LEFT_ALIGN );                        // Die Färbung des Sidetext                          if ( typoKlein2 == 0 ) {b.fill (c2);  }                          if ( typoKlein2 == 1 ) {b.fill (c3);  }                          if ( typoKlein2 == 2 ) {b.fill (c5);  }                        // gant leichte neu Positionierung des Sidetext                        var xPos2Sidetext = b.width - 10+typoKlein2*0.4;                        var yPos2Sidetext = 10+typoKlein2*0.4;                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Kein Name / Typo klein2                        if (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Das Plakat wurde am " + b.nf (+b.day(),2) +"." + b.nf (+b.month(),2) +"." + b.nf (b.year(),2) + " erstellt.", xPos2Sidetext,  yPos2Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Normaler Name / Typo klein2                        if (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Das Plakat wurde am " + b.nf (+b.day(),2) +"." + b.nf (+b.month(),2) +"." + b.nf (b.year(),2) + " erstellt." , xPos2Sidetext,  yPos2Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Zu langer Name / Typo klein2                        if (edittextYourName.text.length > 30) {                            var sidetext = b.text ("Das Plakat wurde am " + b.nf (+b.day(),2) +"." + b.nf (+b.month(),2) +"." + b.nf (b.year(),2) + " erstellt." , xPos2Sidetext,  yPos2Sidetext, 180,40);                        }                        // Der Zeilenabstand des Sidetext                          b.typo(sidetext, 'leading', 17);                          sidetext.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY;                          b.opacity (sidetext, 100);                          // Drehung um 90 Grad zurück                          b.rotate (b.radians(-90));                      // Ende For Schleife typoKlein2<3 (kleine Schrift)                      }              //----------------------------------------------------------------------------------------------------------------------------------------------- Informationstext unten klein / Typo klein3                          for (var typoKlein3 = 0; typoKlein3 < 3; typoKlein3++) {                        b.textSize(20);                        // Drehung um 90 Grad                        b.rotate (b.radians(-90));                        // Die Ausrichtung des Sidetext                        b.textAlign(Justification.LEFT_ALIGN );                        // Die Färbung des Sidetext                          if ( typoKlein3 == 0 ) {b.fill (c2);  }                          if ( typoKlein3 == 1 ) {b.fill (c3);  }                          if ( typoKlein3 == 2 ) {b.fill (c5);  }                        // gant leichte neu Positionierung des Sidetext                        var xPos3Sidetext = 10+typoKlein3*0.4;                        var yPos3Sidetext = b.height -10 +typoKlein3*0.4;                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Kein Name / Typo klein3                        if (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Der Zeitpunkt der Erstellung ist " + b.nf (+ b.hour(),2) + ":" +b.nf (+ b.minute(),2) +":" +b.nf (+ b.second(),2) , xPos3Sidetext,  yPos3Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Normaler Name / Typo klein3                        if (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Der Zeitpunkt der Erstellung ist " + b.nf (+ b.hour(),2) + ":" +b.nf (+ b.minute(),2) +":" +b.nf (+ b.second(),2) , xPos3Sidetext,  yPos3Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Zu langer Name / Typo klein3                        if (edittextYourName.text.length > 30) {                            var sidetext = b.text ("Der Zeitpunkt der Erstellung ist " + b.nf (+ b.hour(),2) + ":" +b.nf (+ b.minute(),2) +":" +b.nf (+ b.second(),2) , xPos3Sidetext,  yPos3Sidetext, 180,40);                        }                        // Der Zeilenabstand des Sidetext                          b.typo(sidetext, 'leading', 17);                          sidetext.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY;                          b.opacity (sidetext, 100);                          // Drehung um 90 Grad zurück                          b.rotate (b.radians(+90));                      // Ende For Schleife typoKlein3<3 (kleine Schrift)                      }                //----------------------------------------------------------------------------------------------------------------------------------------------- Informationstext unten klein / Typo klein4                          for (var typoKlein4 = 0; typoKlein4 < 3; typoKlein4++) {                        b.textSize(20);                        // Drehung um 90 Grad                        b.rotate (b.radians(-90));                        // Die Ausrichtung des Sidetext                        b.textAlign(Justification.LEFT_ALIGN );                        // Die Färbung des Sidetext                          if ( typoKlein4 == 0 ) {b.fill (c2);  }                          if ( typoKlein4 == 1 ) {b.fill (c3);  }                          if ( typoKlein4 == 2 ) {b.fill (c5);  }                        // gant leichte neu Positionierung des Sidetext                        var xPos4Sidetext = b.width - 15+typoKlein4*0.4;                        var yPos4Sidetext = b.height -10 +typoKlein4*0.4;                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Kein Name / Typo klein4                        if (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Das Plakat wurde in " + scriptTime + " Sekunden generiert."  , xPos4Sidetext,  yPos4Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Normaler Name / Typo klein4                        if (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Das Plakat wurde in " + scriptTime + " Sekunden generiert."  , xPos4Sidetext,  yPos4Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Zu langer Name / Typo klein4                        if (edittextYourName.text.length > 30) {                            var sidetext = b.text ("Das Plakat wurde in " + scriptTime + " Sekunden generiert."  , xPos4Sidetext,  yPos4Sidetext, 180,40);                        }                        // Der Zeilenabstand des Sidetext                          b.typo(sidetext, 'leading', 17);                          sidetext.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY;                          b.opacity (sidetext, 100);                          // Drehung um 90 Grad zurück                          b.rotate (b.radians(+90));           // Ende For Schleife typoKlein4<3 (kleine Schrift)          }    // Ende if wichText == 1    }// Rückgängig machen des rechtsbündigen Textes für die nachfolgenden Schleifenb.textAlign(Justification.LEFT_ALIGN );    // #####################################################################################################################################################################################    // #####################################################################################################################################################################################    // #####################################################################################################################################################################################    // #####################################################################################################################################################################################    // #####################################################################################################################################################################################        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Text schreiben lassen / Text        // Den Text von Anfang an schreiben gelassen wird  if (wichText == 0) {            //-------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Text schreiben lassen / Text            // Text von Plkatgenerator schreiben lassen                var headlineList = [                "Bäume sprechen ganz leise", "Der Bär wohnt ganz tief im Wald", "Ein Bein kommt selten allein", "Ihr werdet euch noch wundern", "Vertrauen ist besser als Kontrolle", "Ich poste, also like mich.", "Schmeckt die Zukunft nach Salz?", "Du wirst wohl niemals erwachsen?",  "Stell dir vor es ist es und keiner isst es.", "Stell dir vor es ist Montag und keiner geht hin", "Die Karriere meiner Ehre", "Die Nacht schmeckt nach Sand", "Auch du findest einmal ein Korn", "Die Gedanken sind drei", "Das Klingt nach Stille", "Frue dich früh!", "Sternenstaub im Müsli", "Rauch und Gedanken", "Woher willst du das wissen?", "Wer wenn nicht wo?", "Faultiere im Nebel", "Wollkneule am Firmament", "Das Haar im Meer", "Ist mein Geist nachts auf Reise?", "Verändere deine Form", "Mutation! Um jeden Preis!", "Der Wald ruft nach dir", "Das Zentrum aller Dinge", "Der Zirkel bist du", "Jeder Schritt ein Treffer", "Bist du denn du?", "Knallerbsen im Schnee", "Nordlichter ringen um Fassung", "Die Wand steht dir offen", "Kein Geld, kein Zelt", "Die Gestalt aus Senf", "Heute wird mal nichts gedacht", "Tu es auf jeden Fall", "Ist da jemand?", "Der Wurm im Sturm", "Der Winter sieht mich nicht"                ];                // Würfelt eine Zufallszahl aus                var randomHeadlineNumber = b.floor (b.random (0, headlineList.length) );                // Wählt mit der Zufallszahl eine Stelle des Arrays aus                var randomHeadline = headlineList[randomHeadlineNumber];                // splice sortiert die Nummern aus die schon ausgewählt wurden                headlineList.splice (randomHeadlineNumber, 1);        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        // #####################################################################################################################################################################################        for (var k = 0; k < 5; k++) {                 //--------------------------------------------------------------------------------------------------------------------------------------------------------- Schriftart und Farbe / Typo Groß                b.textFont ('Haettenschweiler', 'Regular');                b.textSize(170);                  // // Verändert die Zeilenhöhe                  // b.typo(headline, 'leading', b.€height/3);                //--------------------------------------------------------------------------------------------------------------------------------------------------------- Die Grau Töne für den Text / Typo Groß                var color1 = 40;                var color2 = 90;                var color3 = 150;                var color4 = 200;                var color5 = 255;                var c1 = b.color (color1, color1, color1);                var c2 = b.color (color2, color2, color2);                var c3 = b.color (color3, color3, color3);                var c4 = b.color (color4, color4, color4);                var c5 = b.color (color5, color5, color5);                var randomTypoColorNumber = b.round (b.random (1));                //-------------------------------------------------------------------------------------------------------------------------------------  Reaktionen auf die For Schleife und Einfärbung / Typo Groß                  if ( k == 0 ) {b.fill (c1);  }                  if ( k == 1 ) {b.fill (c2);  }                  if ( k == 2 ) {b.fill (c3);  }                  if ( k == 3 ) {b.fill (c4);  }                  if ( k == 4 ) {b.fill (c5);  }                    //--------------------------------------------------------------------------------------------------------------------------------------------------------- Textplazierung ansich / Typo Groß                          var headline = b.text (randomHeadline,40 + k*1.2 ,26 + k*1.2,190,350);                      // Zeilenabstand                      b.typo ( headline, 'leading', 140 );                    //------------------------------------------------------------------------------------------------------------------------------------------Typo Textrahmen vergrößern bis passend /  Typo Groß                    // Nimme die Textrahmengröße in eine Variable                    var headlineHeight = b.itemHeight (headline);                    var headlineWidth = b.itemWidth (headline);                    while ( headline.overflows == true) {                      // Verändert die Textrahmengröße +1 bis der Overflow true ist                      b.itemHeight (headline, headlineHeight++)                    }                    //------------------------------------------------------------------------------------------------------------------------------------------------ Großschreibung und Ebenen Effekte / Typo Groß                      // Alles Wird GROSS geschrieben                      // b.typo(headline, 'capitalization', Capitalization.ALL_CAPS);                      // Ebenen Effekte                      if ( k == 0 ) { headline.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY ; b.opacity (headline, 100); }                      if ( k == 1 ) { headline.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY ; b.opacity (headline, 100); }                      if ( k == 2 ) { headline.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY ; b.opacity (headline, 100); }                      if ( k == 3 ) { headline.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY ; b.opacity (headline, 100); }                      if ( k == 4 ) { headline.transparencySettings.blendingSettings.blendMode = BlendMode.NORMAL ; b.opacity (headline, 100); }                    //--------------------------------------------------------------------------------------------------------------------------------------------------------- Der Hypinator von Timo / Typo Groß                      // Der Hyphinator von Timo                      var wordsCounting = b.words(headline);                      var hyphCounter = 0;                      // check for each word if there is more than one (parent) line, if so, it's hyphenated                        for (var y = 0; y < 10; y++) {                          for (var x = 0; x < wordsCounting.length; x++) {                            if(wordsCounting[x].lines.length > 1) {                              hyphCounter++;                              b.println("The word " + wordsCounting[x].contents + " is hyphenated.");                              // search the last insertion point of each hyphenated line and insert a discretionary line break                              wordsCounting[x].lines[0].insertionPoints[-1].contents = SpecialCharacters.DISCRETIONARY_LINE_BREAK;                            }                          }                        }            // Ende For Schleife k<5             }                    // #####################################################################################################################################################################################                    // #####################################################################################################################################################################################                    // #####################################################################################################################################################################################                    // #####################################################################################################################################################################################                    // #####################################################################################################################################################################################                    //-------------------------------------------------------------------------------------------------------------------------------------------------- Informationstext unten klein / Typo klein1                      // Zeit die das Script lief                      var scriptTime = b.round (b.millis()/1000);                    for (var typoKlein1 = 0; typoKlein1 < 3; typoKlein1++) {                        b.textSize(20);                        // Drehung um 90 Grad                        b.rotate (b.radians(90));                        // Die Ausrichtung des Sidetext                        b.textAlign(Justification.LEFT_ALIGN );                        // Die Färbung des Sidetext                          if ( typoKlein1 == 0 ) {b.fill (c2);  }                          if ( typoKlein1 == 1 ) {b.fill (c3);  }                          if ( typoKlein1 == 2 ) {b.fill (c5);  }                        // gant leichte neu Positionierung des Sidetext                        var xPosSidetext = 15+typoKlein1*0.4;                        var yPosSidetext = 10+typoKlein1*0.4;                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Kein Name / Typo klein1                        if (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Der Generator wurde von " + noName + " bedient.", xPosSidetext,  yPosSidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Normaler Name / Typo klein1                        if (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Der Generator wurde von " + edittextYourName.text + " bedient.", xPosSidetext,  yPosSidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Zu langer Name / Typo klein1                        if (edittextYourName.text.length > 30) {                            var sidetext = b.text ("Der Generator wurde von " + tooLong + " bedient.", xPosSidetext,  yPosSidetext, 180,40);                        }                        // Der Zeilenabstand des Sidetext                          b.typo(sidetext, 'leading', 17);                          sidetext.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY;                          b.opacity (sidetext, 100);                          // Drehung um 90 Grad zurück                          b.rotate (b.radians(-90));                      // Ende For Schleife typoKlein1<3 (kleine Schrift)                      }                    //-------------------------------------------------------------------------------------------------------------------------------------------------- Informationstext unten klein / Typo klein2                          for (var typoKlein2 = 0; typoKlein2 < 3; typoKlein2++) {                        b.textSize(20);                        // Drehung um 90 Grad                        b.rotate (b.radians(90));                        // Die Ausrichtung des Sidetext                        b.textAlign(Justification.LEFT_ALIGN );                        // Die Färbung des Sidetext                          if ( typoKlein2 == 0 ) {b.fill (c2);  }                          if ( typoKlein2 == 1 ) {b.fill (c3);  }                          if ( typoKlein2 == 2 ) {b.fill (c5);  }                        // gant leichte neu Positionierung des Sidetext                        var xPos2Sidetext = b.width - 10+typoKlein2*0.4;                        var yPos2Sidetext = 10+typoKlein2*0.4;                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Kein Name / Typo klein2                        if (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Das Plakat wurde am " + b.nf (+b.day(),2) +"." + b.nf (+b.month(),2) +"." + b.nf (b.year(),2) + " erstellt.", xPos2Sidetext,  yPos2Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Normaler Name / Typo klein2                        if (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Das Plakat wurde am " + b.nf (+b.day(),2) +"." + b.nf (+b.month(),2) +"." + b.nf (b.year(),2) + " erstellt." , xPos2Sidetext,  yPos2Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Zu langer Name / Typo klein2                        if (edittextYourName.text.length > 30) {                            var sidetext = b.text ("Das Plakat wurde am " + b.nf (+b.day(),2) +"." + b.nf (+b.month(),2) +"." + b.nf (b.year(),2) + " erstellt." , xPos2Sidetext,  yPos2Sidetext, 180,40);                        }                        // Der Zeilenabstand des Sidetext                          b.typo(sidetext, 'leading', 17);                          sidetext.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY;                          b.opacity (sidetext, 100);                          // Drehung um 90 Grad zurück                          b.rotate (b.radians(-90));                      // Ende For Schleife typoKlein2<3 (kleine Schrift)                      }              //----------------------------------------------------------------------------------------------------------------------------------------------- Informationstext unten klein / Typo klein3                          for (var typoKlein3 = 0; typoKlein3 < 3; typoKlein3++) {                        b.textSize(20);                        // Drehung um 90 Grad                        b.rotate (b.radians(-90));                        // Die Ausrichtung des Sidetext                        b.textAlign(Justification.LEFT_ALIGN );                        // Die Färbung des Sidetext                          if ( typoKlein3 == 0 ) {b.fill (c2);  }                          if ( typoKlein3 == 1 ) {b.fill (c3);  }                          if ( typoKlein3 == 2 ) {b.fill (c5);  }                        // gant leichte neu Positionierung des Sidetext                        var xPos3Sidetext = 10+typoKlein3*0.4;                        var yPos3Sidetext = b.height -10 +typoKlein3*0.4;                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Kein Name / Typo klein3                        if (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Der Zeitpunkt der Erstellung ist " + b.nf (+ b.hour(),2) + ":" +b.nf (+ b.minute(),2) +":" +b.nf (+ b.second(),2) , xPos3Sidetext,  yPos3Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Normaler Name / Typo klein3                        if (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Der Zeitpunkt der Erstellung ist " + b.nf (+ b.hour(),2) + ":" +b.nf (+ b.minute(),2) +":" +b.nf (+ b.second(),2) , xPos3Sidetext,  yPos3Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Zu langer Name / Typo klein3                        if (edittextYourName.text.length > 30) {                            var sidetext = b.text ("Der Zeitpunkt der Erstellung ist " + b.nf (+ b.hour(),2) + ":" +b.nf (+ b.minute(),2) +":" +b.nf (+ b.second(),2) , xPos3Sidetext,  yPos3Sidetext, 180,40);                        }                        // Der Zeilenabstand des Sidetext                          b.typo(sidetext, 'leading', 17);                          sidetext.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY;                          b.opacity (sidetext, 100);                          // Drehung um 90 Grad zurück                          b.rotate (b.radians(+90));                      // Ende For Schleife typoKlein3<3 (kleine Schrift)                      }                //----------------------------------------------------------------------------------------------------------------------------------------------- Informationstext unten klein / Typo klein4                          for (var typoKlein4 = 0; typoKlein4 < 3; typoKlein4++) {                        b.textSize(20);                        // Drehung um 90 Grad                        b.rotate (b.radians(-90));                        // Die Ausrichtung des Sidetext                        b.textAlign(Justification.LEFT_ALIGN );                        // Die Färbung des Sidetext                          if ( typoKlein4 == 0 ) {b.fill (c2);  }                          if ( typoKlein4 == 1 ) {b.fill (c3);  }                          if ( typoKlein4 == 2 ) {b.fill (c5);  }                        // gant leichte neu Positionierung des Sidetext                        var xPos4Sidetext = b.width - 15+typoKlein4*0.4;                        var yPos4Sidetext = b.height -10 +typoKlein4*0.4;                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Kein Name / Typo klein4                        if (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Das Plakat wurde in " + scriptTime + " Sekunden generiert."  , xPos4Sidetext,  yPos4Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Normaler Name / Typo klein4                        if (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {                            var sidetext = b.text ("Das Plakat wurde in " + scriptTime + " Sekunden generiert."  , xPos4Sidetext,  yPos4Sidetext, 180,40);                        }                        //--------------------------------------------------------------------------------------------------------------------------------------------------------- Zu langer Name / Typo klein4                        if (edittextYourName.text.length > 30) {                            var sidetext = b.text ("Das Plakat wurde in " + scriptTime + " Sekunden generiert."  , xPos4Sidetext,  yPos4Sidetext, 180,40);                        }                        // Der Zeilenabstand des Sidetext                          b.typo(sidetext, 'leading', 17);                          sidetext.transparencySettings.blendingSettings.blendMode = BlendMode.LUMINOSITY;                          b.opacity (sidetext, 100);                          // Drehung um 90 Grad zurück                          b.rotate (b.radians(+90));                      // Ende For Schleife typoKlein4<3 (kleine Schrift)                      }    // Ende if wichText == 0 (Wenn Zext selbst geschrieben werden soll ist)    }// Ende if GeneralText == 1 (Ob es generell Text geben soll)}// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//------------------------------------------------------------------------------------------------------------------------------------------------------------------ Reaktionen / PNG speichern// Die PNG´s werden gespeichertif (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {    // Das Ergebniss wird gespeichert mit dem Namen der Person    b.savePNG("Das Plakat" + " No. " + theBigVar + " von " + noName +".png", false);}if (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {    // Das Ergebniss wird gespeichert mit dem Namen der Person    b.savePNG("Das Plakat" + " No. " + theBigVar + " von " + edittextYourName.text +".png", false);}if (edittextYourName.text.length > 30) {    // Das Ergebniss wird gespeichert mit dem Namen der Person    b.savePNG("Das Plakat" + " No. " + theBigVar + " von " + tooLong.text +".png", false);}// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Exit und Drucken / Exitvar windowExitMessage = new Window ("dialog", " ", undefined, {closeButton: false} );// windowExitMessage.orientation = "row";windowExitMessage.alignChildren = ['fill', 'fill'];windowExitMessage.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Done.png"));// Falls jemand ESC bei der Namenseingabe gedrückt haben sollte und nichts eingegeben hatif (edittextYourName.text.length == 0 && edittextYourName.text.length < 30) {  var messageExitPrint = windowExitMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,30],);  messageExitPrint.text = "Hervorragend generiert, "+noName+".";  var messageExitPrint2 = windowExitMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,10],);  messageExitPrint2.text = "---------------------------------------------------------------------------------------------------";  var messageExitPrint3 = windowExitMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,30],);  messageExitPrint3.text = "Wenn du möchtest, kannst du dein Plakat jetzt ausdrucken.";}// Ganz normaler Textif (edittextYourName.text.length != 0 && edittextYourName.text.length < 30) {  var messageExitPrint = windowExitMessage.add ('statictext  {text: "Centre", characters: 20, justify: "center"} ', [0,0,500,30],);  messageExitPrint.text = "Hervorragend generiert, " +edittextYourName.text+".";  var messageExitPrint2 = windowExitMessage.add ('statictext  {text: "Centre", characters: 20, justify: "center"} ', [0,0,500,10],);  messageExitPrint2.text = "--------------------------------------------------------------------------------------------------------";  var messageExitPrint3 = windowExitMessage.add ('statictext  {text: "Centre", characters: 20, justify: "center"} ', [0,0,500,30],);  messageExitPrint3.text = "Wenn du möchtest, kannst du dein Plakat jetzt ausdrucken.";}// Falls jemand ESC bei der Namenseingabe gedrückt haben sollte und der Name zu lange istif (edittextYourName.text.length > 30) {  var messageExitPrint = windowExitMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,30],);  messageExitPrint.text = "Hervorragend generiert, "+tooLong+".";  var messageExitPrint2 = windowExitMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,10],);  messageExitPrint2.text = "---------------------------------------------------------------------------------------------------";  var messageExitPrint3 = windowExitMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,30],);  messageExitPrint3.text = "Wenn du möchtest, kannst du dein Plakat jetzt ausdrucken.";}var buttonPrint = windowExitMessage.add ("button", [0,0,350,60], "Ich möchte mein Plakat ausdrucken");var buttonNoPrint = windowExitMessage.add ("button", [0,0,350,60], "Beenden ohne zu drucken");var print = 0;//--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Drucken Buttons / Exit    with(windowExitMessage)        buttonNoPrint.onClick = function(buttonNoPrintFunctionExit){           // Der Schließen Befehl           close(1);         }    with(windowExitMessage)        buttonPrint.onClick = function(buttonPrintFunctionExit){           // Der Schließen Befehl           print++;           close(1);         }windowExitMessage.show ();if (print == 1) {        var windowPrintSupportMessage = new Window ("dialog", " ", undefined, {closeButton: false} );        // windowPrintSupportMessage.orientation = "row";        windowPrintSupportMessage.alignChildren = ['fill', 'fill'];      windowPrintSupportMessage.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Support2.png"));        var messageExitPrint = windowPrintSupportMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,30],);        messageExitPrint.text = "Falls du dein Plakat ausdrucken möchtest, bitte ich dich um 2 - 3 €";        var messageExitPrint2 = windowPrintSupportMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,20],);        messageExitPrint2.text = "für die Kosten von Papier, Druckerpatronen und der Ausstellung.";        var messageExitPrint4 = windowPrintSupportMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,10],);        messageExitPrint4.text = "---------------------------------------------------------------------------------------------------";        var messageExitPrint3 = windowPrintSupportMessage.add ('statictext  {text: "Center", characters: 20, justify: "center"} ', [0,0,500,30],);        messageExitPrint3.text = "Vielen Dank für deine Unterstützung!";      var buttonPrint2 = windowPrintSupportMessage.add ("button", [0,0,350,60], "Alles klar, los geht´s!");      var buttonNoPrint2 = windowPrintSupportMessage.add ("button", [0,0,350,60], "Dann lieber doch nicht");      //--------------------------------------------------------------------------------------------------------------------------------------------------------- Reaktionen / Drucken Buttons / Exit          with(windowPrintSupportMessage)              buttonNoPrint2.onClick = function(buttonNoPrintFunctionPrint){                 // Der Schließen Befehl                 close(1);              }          with(windowPrintSupportMessage)              buttonPrint2.onClick = function(buttonPrintFunctionPrint){                 // Der Schließen Befehl                 print++;                 close(1);              }          windowPrintSupportMessage.show ();          if (print == 2) {              // Der Drucken Befehl, false für nicht öffnen des Drucken Dialogs und übernehmen der vorherigen Einstellungen              app.documents.item(0).print(false);          }}// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################// #####################################################################################################################################################################################//========================================================================================================================================================= Fenster / Exit Message / Exitvar windowExitNoPrintMessage = new Window ("dialog", " ", undefined, {closeButton: false} );// windowExitMessage.orientation = "row";windowExitNoPrintMessage.alignChildren = ['fill', 'fill'];windowExitNoPrintMessage.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/Save.png"))var messageExitPrint = windowExitNoPrintMessage.add ('statictext  {text: "Center", characters: 80, justify: "center"} ', [0,0,370,30],);messageExitPrint.text = "Dein Plakat wurde gespeichert.";var messageExitPrint = windowExitNoPrintMessage.add ('statictext  {text: "Center", characters: 80, justify: "center"} ', [0,0,370,10],);messageExitPrint.text = "Du kannst es dir unter folgender Adresse anschauen und downloaden:";var messageExitPrint2 = windowExitNoPrintMessage.add ('statictext  {text: "Center", characters: 80, justify: "center"} ', [0,0,370,10],);messageExitPrint2.text = "----------------------------------------------------------------------------";windowExitNoPrintMessage.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/www.png") );windowExitNoPrintMessage.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/qr-code-kurzelinks-de-plakatgenerator.png"));var buttonExitExit = windowExitNoPrintMessage.add ("button", [0,0,350,60], "Nice!", {name:"ok"});windowExitNoPrintMessage.show ();//========================================================================================================================================================= Fenster / Start / Startvar windowExitScreen = new Window ("dialog", " ", undefined, {closeButton: false});windowExitScreen.alignChildren = ['fill', 'fill'];var exitPicture = windowExitScreen.add ("image", undefined, File ("D:/Daten/MyWorks/HAW/6 ________________________ Semester/6. Stil, System, Methode/Design/Semesterprojekt/Die Version von der Ausstellung/Bilder/ExitBild2.jpg"));var buttonExitExit = windowExitScreen.add ("button", [0,0,350,80], "RESTART", {name:"ok"});windowExitScreen.show ();// Löscht alle unbenutzten Farbfeldervar myIndesignDoc = app.activeDocument;var myUnusedSwatches = myIndesignDoc.unusedSwatches;for (var s = myUnusedSwatches.length-1; s >= 0; s--) {     var mySwatch = myIndesignDoc.unusedSwatches[s];     var name = mySwatch.name; // alert (name);  if (name != ""){ mySwatch.remove(); }}// Die große Var Schleife endet hier}// Die Draw Funktion entet}b.go();